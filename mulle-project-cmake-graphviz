#! /bin/sh
#
#   Copyright (c) 2020 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_CMAKE_GRAPHVIZ_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################



usage()
{
   cat <<EOF >&2
Usage:
   mulle-project-cmake-graphviz

   If there is a mulle-sde CMakeLists.txt, this will print a graphical
   representation of the local include tree in graphviz dot format.

   Just feed it into graphviz or look at it in an editor like VSCode with a
   graphviz preview. (Give the file a \`.dot\` extension)
EOF
   exit 1
}


# places to search for cmake files
CMAKE_INCLUDE_PATH="cmake:cmake/reflect:cmake/share"

# run it in a mulle-sde project to get a graphviz file, showing the way
# files are included

get_include_filenames()
{
   log_entry "get_include_filenames" "$@"

   local filename="$1"

   rexekutor sed -n -e '/^#/d' \
                    -e "s/.*include( *\\([A-Za-z0-9_]*\\).*/\\1.cmake/p" \
                    "${filename}"
}


dump_includes()
{
   log_entry "dump_includes" "$@"

   local filename="$1"
   local color="$2"

   local name

   name="`basename -- "${filename}"`"

   if [ ! -z "${color}" ]
   then
      printf "\"%s\" [ bgcolor=\"%s\" ]\n" "${name}" "${color}"
   fi

   #
   # these are evaluated at cmake runtime and can't be dumped
   #
   if [ "${name}" = "_Dependencies.cmake" ]
   then
      echo "   \"${name}\" -> \"dependency/include/*/cmake/DependenciesAndLibraries.cmake\""
   else
      if [ "${name}" = "_Libraries.cmake" ]
      then
         echo "   \"${name}\" -> \"dependency/include/*/cmake/DependenciesAndLibraries.cmake\""
      else
         rexekutor sed -n -e '/^#/d' \
                          -e "s/.*include( *\\([A-Za-z0-9_]*\\).*/   \"${name}\" -> \"\\1.cmake\"/p" \
                          "${filename}"
      fi
   fi
}


r_find_include()
{
   log_entry "r_find_include" "$@"

   local name="$1"

   local i

   .foreachpath i in ${CMAKE_INCLUDE_PATH}
   .do
      r_filepath_concat "${i}" "${name}"
      if [ -f "${RVAL}" ]
      then
         log_debug "${RVAL} found"
         return 0
      fi
   .done

   RVAL=
   return 1
}


dump_file()
{
   log_entry "dump_file" "$@"

   local filename="$1"
   local color="$2"

   local name

   if fgrep -x -q "${filename}" <<< "${DUMPED}"
   then
      return
   fi
   DUMPED="${filename}
${DUMPED}"

   local includes

   dump_includes "${filename}" "${color}"
   includes="`get_include_filenames "${filename}"`" || exit 1

   .foreachline name in ${includes}
   .do
      if r_find_include "${name}"
      then
         dump_file "${RVAL}"
      else
         :
         # doesn't really matter if optional though
         # echo "*** cmake file \"${name}\" not found" >&2
      fi
   .done
}



main()
{
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;
         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   cat <<EOF
digraph cmake
{
   rankdir="LR"
   node [shape="note"]
   graph [ordering="out"]

EOF

   local DUMPED

   dump_file "CMakeLists.txt"

   cat <<EOF
}
EOF
}

main "$@"
