#! /usr/bin/env bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_DEPENDENCY_VERSIONS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f          : force operation"

   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-dependency-versions [flags]

   Produces version checks for dependencies for C headers.

   ##
   ## ADD YOUR USAGE HERE
   ##

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


emit_version_check()
{
   log_entry "emit_version_check"

   local version

   version="`mulle-project-version -s 2> /dev/null`"
   if [ -z "${version}" ]
   then
      log_verbose "`basename "${PWD}"` is not a mulle project"
      return
   fi

   local major
   local minor
   local patch

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1

   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local type

   type="`mulle-sde environment get PROJECT_TYPE`"
   if [ "${type}" != "library" ]
   then
      return
   fi

   local identifier
   local name

   identifier="`mulle-sde environment get PROJECT_UPCASE_IDENTIFIER`"
   name="`mulle-sde environment get PROJECT_NAME`"

   echo "# if defined( ${identifier}_VERSION) && \\
     ${identifier}_VERSION < ((${major} << 20) | (${minor} << 8) | ${patch})"
   echo "#  error \"${name} is too old\""
   echo "# endif"
}


emit_include_file()
{
   local main_identifier="$1"

   local dependency
   local name

   echo "/*
 *   This file will be regenerated by \``basename $0`\`.
 *   Any edits will be lost.
 */"

   echo "#ifndef ${main_identifier}_CHECK_H__"
   echo "#define ${main_identifier}_CHECK_H__"

   set -f
   IFS=$'\n'
   for name in `mulle-sde dependency list -- --output-no-header --format '%a\n' | sort`
   do
      r_basename "${name}"
      if [ "${RVAL}" = "${name}" ]
      then
         dependency="stash/${name}"
      else
         dependency="${name}"
      fi

      if [ -d "${dependency}" ]
      then
      (
         cd "${dependency}" 2> /dev/null && emit_version_check
      )
      fi
   done

   echo "#endif"

}

main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;


         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"


   local main_identifier

   main_identifier="`mulle-sde environment get PROJECT_UPCASE_IDENTIFIER`" || exit 1

   if [ ! -d "stash" ]
   then
      log_warning "There is no stash directory here, nothing to do
${C_INFO}Run mulle-sde fetch if this is unexpected."
      return 0
   fi

   emit_include_file "${main_identifier}"

}


########
###
### INIT - You usually won't edit code below
###

trap_fail()
{
   exit 1
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-version.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   call_main "${MULLE_PROJECT_DEPENDENCY_VERSIONS_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
