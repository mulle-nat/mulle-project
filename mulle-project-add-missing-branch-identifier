#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_ADD_MISSING_BRANCH_IDENTIFIER_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi



print_flags()
{
   echo "   -f               : force operation"

   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage "            : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   mulle-project-add-missing-branch-identifier [flags]

   If the branch of your dependency is empty, this script will add an empty one
   of the form \${UPCASE_IDENTIFIER_BRANCH}. This is per-se harmless and can be
   very useful. It will also as a bonus wrap URL, nodetype and tag.

   For this command to work, all dependencies must have been fetched already.

   Example:
      mulle-project-add-missing-branch-identifier --user 'mulle-*' \\
                                                  --repo '!farm*' --repo '*'

Flags:
   --user <pattern> : specify github users to match, multiple uses are
                      possible, wildcards are possible
   --repo <pattern> : specify repository names to match, multiple uses are
                      possible, wildcards are possible
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


search_and_replace()
{
   log_entry "search_and_replace" "$@"

   local matching_users="$1"
   local matching_repos="$2"

   local lines
   local line

   #
   # uses mulle-sourcetree-parser.h library
   #
   lines="`project::sourcetree_parser::get_dependency_address_nodetype_branch_tag_url`"

   local upcaseid
   local name
   local newnodetype
   local newbranch
   local newurl
   local newtag
   local action

   include "case"

   local _address
   local _nodetype
   local _branch
   local _url
   local _host
   local _user
   local _repo
   local _nodetype_identifier
   local _nodetype_fallback
   local _branch_identifier
   local _branch_fallback
   local _url_identifier
   local _url_fallback
   local _tag_identifier
   local _tag_fallback

   .foreachline line in ${lines}
   .do
      [ -z "${line}" ] && .continue

      if ! project::sourcetree_parser::parse_nodetype_branch_tag_url "${line}"
      then
         .continue
      fi

      if [ ! -z "${_user}" ] && ! project::sourcetree_parser::is_matching_wildcards "${matching_users}" "${_user}"
      then
         log_fluff "\"${_user}\" does not match \"${matching_users}\""
         .continue
      fi
      if [ ! -z "${_repo}" ] && ! project::sourcetree_parser::is_matching_wildcards "${matching_repos}" "${_repo}"
      then
         log_fluff "\"${_repo}\" does not match \"${matching_repos}\""
         .continue
      fi

      r_basename "${_address}"
      r_smart_file_upcase_identifier "${RVAL}"
      upcaseid="${RVAL}"

      if [ -z "${_nodetype_fallback}" ]
      then
         newnodetype="\${${upcaseid}_NODETYPE}"
      else
         newnodetype="\${${upcaseid}_NODETYPE:-${_nodetype_fallback}}"
      fi

      if [ -z "${_branch_fallback}" ]
      then
         newbranch="\${${upcaseid}_BRANCH}"
      else
         newbranch="\${${upcaseid}_BRANCH:-${_branch_fallback}}"
      fi

      if [ -z "${_url_fallback}" ]
      then
         newurl="\${${upcaseid}_URL}"
      else
         newurl="\${${upcaseid}_URL:-${_url_fallback}}"
      fi

      if [ -z "${_tag_fallback}" ]
      then
         newtag="\${${upcaseid}_TAG}"
      else
         newtag="\${${upcaseid}_TAG:-${_tag_fallback}}"
      fi

      action='NO'
      if [ "${newnodetype}" != "${_nodetype}" ]
      then
         exekutor mulle-sourcetree \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_SOURCETREE_FLAGS:-} \
                     set "${_address}" nodetype "${newnodetype}"
         action='YES'
      fi

      if [ "${newbranch}" != "${_branch}" ]
      then
         exekutor mulle-sourcetree \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_SOURCETREE_FLAGS:-} \
                  set "${_address}" branch "${newbranch}"
         action='YES'
      fi

      if [ "${newurl}" != "${_url}" ]
      then
         exekutor mulle-sourcetree \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_SOURCETREE_FLAGS:-} \
                     set "${_address}" url "${newurl}"
         action='YES'
      fi

      if [ "${newtag}" != "${_tag}" ]
      then
         exekutor mulle-sourcetree \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_SOURCETREE_FLAGS:-} \
                     set "${_address}" tag "${newtag}"
         action='YES'
      fi
      if [ "${action}" = 'NO' ]
      then
         log_fluff "No change for ${_address}"
      fi
   .done
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_USERS
   local OPTION_REPOS

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --mulle)
            r_colon_concat "${OPTION_USERS}" 'mulle-*'
            OPTION_USERS="${RVAL}"
            r_colon_concat "${OPTION_USERS}" 'Mulle*'
            OPTION_USERS="${RVAL}"
         ;;

         --user)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            r_colon_concat "${OPTION_USERS}" "$1"
            OPTION_USERS="${RVAL}"
         ;;

         --repo)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            r_colon_concat "${OPTION_REPOS}" "$1"
            OPTION_REPOS="${RVAL}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   search_and_replace "${OPTION_USERS}" "${OPTION_REPOS}"
}


call_with_flags "main" "${MULLE_PROJECT_ADD_MISSING_BRANCH_IDENTIFIER_FLAGS}" "$@"
