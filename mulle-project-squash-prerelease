#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_SQUASH_PRERELEASE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi



print_flags()
{
   echo "   -f            : force operation"
   echo "   --mulle       : pass thru to mulle-project-git-prerelease"
   echo "   --word <s>    : word to match for in commit message (prerelease)"
   echo "   --message <s> : commit message (prerelease)"

   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
                "         : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-squash-prerelease [flags]

   Squash all leading commits that contain the word "prerelease" in the
   commit message into one commit. (Hint: use --mulle)

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}



main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_WORDS=""
   local OPTION_MESSAGE="prerelease"
   local OPTION_REV="HEAD"
   local OPTION_MULLE="HEAD"

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --message)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_MESSAGE="$1"
         ;;

         --word)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            r_comma_concat "${OPTION_WORDS}" "$1"
            OPTION_WORDS="${RVAL}"
         ;;

         --mulle)
            OPTION_MULLE="$1"
         ;;

         --)
            shift 
            break
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   include "project::git"

   if ! project::git::is_clean
   then
      fail "Project ${PWD#"${MULLE_USER_PWD}/"} is not pristine"
   fi

   exekutor git checkout "${GIT_DEFAULT_BRANCH:-master}" || return 1

   local commit
   local count
   local message
   local found
   local word

   OPTION_WORDS="${OPTION_WORDS:-prerelease}"

   count=0
   .foreachline commit in `rexekutor git rev-list "${OPTION_REV}" `
   .do
      message="`git log -1 --pretty='format:%s' "${commit}" `"

      found='NO'
      .foreachitem word in ${OPTION_WORDS}
      .do
         if grep -q -s -w "${word}" <<< "${message}"
         then
            found='YES'
            .break
         fi
      .done
      if [ "${found}" = 'NO' ]
      then
         .break
      fi

      count=$((count + 1))
   .done

   case "${count}" in 
      0|1)
         log_info "Nothing to squash"
         return 0
      ;;
   esac

   log_info "Squashing ${count} contiguous prerelease commits"

   exekutor git reset --soft HEAD~${count} && 
   exekutor git commit -m "${OPTION_MESSAGE}" || return 1

   log_info "Pushing prerelease changes"

   exekutor mulle-project-git-prerelease -f --clobber ${OPTION_MULLE} "$@"
}


call_with_flags "main" "${MULLE_PROJECT_SQUASH_PRERELEASE_FLAGS}" "$@"
