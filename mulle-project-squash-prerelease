#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_SQUASH_PRERELEASE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi



print_flags()
{
   echo "   -f            : force operation"
   echo "   --push        : force push squashed commits into prerelease"
   echo "   --mulle       : pass thru to mulle-project-git-prerelease"
   echo "   --word <s>    : words to match commit message (prerelease,fix)"
   echo "   --message <s> : commit message (squashed prerelease fixe)"

   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
                "         : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-squash-prerelease [flags]

   Squash all leading commits that only contain a single line commit message,
   that isn't  prefixed by '*'. (Hint: use --mulle)
   If no words are given, then the following words must exist in the
   commit message to be squashable:
      prerelease,fix,fixes,fixed,RELEASENOTES,version,CI

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}



main()
{
   local OPTION_WORDS=""
   local OPTION_MESSAGE="squashed prerelease fixes"
   local OPTION_REV="HEAD"
   local OPTION_MULLE="HEAD"
   local OPTION_PUSH


   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --message)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_MESSAGE="$1"
         ;;

         --word)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            r_comma_concat "${OPTION_WORDS}" "$1"
            OPTION_WORDS="${RVAL}"
         ;;

         --push)
            OPTION_PUSH='YES'
         ;;

         --mulle)
            OPTION_MULLE="$1"
            OPTION_PUSH='YES'
         ;;

         --)
            shift 
            break
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   include "project::git"

   if ! project::git::is_clean
   then
      fail "Project ${PWD#"${MULLE_USER_PWD}/"} is not pristine"
   fi

   exekutor git checkout "${GIT_DEFAULT_BRANCH:-master}" || return 1

   local commit
   local count
   local message
   local found
   local word
   local n_lines
   local all_messages

   OPTION_WORDS="${OPTION_WORDS:-prerelease,fix,fixes,fixed,RELEASENOTES,version,CI}"

   count=0
   .foreachline commit in `rexekutor git rev-list "${OPTION_REV}" `
   .do
      message="`git log -1 --pretty='format:%B' "${commit}" `"
      log_debug "Commit \"${commit}\" message is \"${message}\""

      n_lines="`wc -l <<< "${message}" `"

      if [ "${n_lines}" -gt 1 ]
      then
         log_debug "Commit \"${commit}\" has a multiline commit messsage"
         .continue
      fi

      found='NO'
      .foreachitem word in ${OPTION_WORDS}
      .do
         if grep -q -s -w "${word}" <<< "${message}"
         then
            log_verbose "Squashable commit \"${message}\""
            found='YES'
            .break
         fi
      .done
      if [ "${found}" = 'NO' ]
      then
         .break
      fi

      count=$((count + 1))
   .done

   case "${count}" in 
      1)
         log_info "Too little to squash"
         return 0
      ;;

      0)
         log_info "Nothing to squash"
         return 0
      ;;
   esac

   log_info "Squashing ${count} contiguous prerelease commits"

   rexekutor mulle-project-squash-commits ${MULLE_TECHNICAL_FLAGS} \
                                          -m "${OPTION_MESSAGE}" \
                                          "HEAD~${count}" || exit 1

   if [ "${OPTION_PUSH}" = 'YES' ]
   then
      log_info "Pushing prerelease changes"

      exekutor mulle-project-git-prerelease -f --clobber ${OPTION_MULLE} "$@"
   fi
}


call_with_flags "main" "${MULLE_PROJECT_SQUASH_PRERELEASE_FLAGS}" "$@"
