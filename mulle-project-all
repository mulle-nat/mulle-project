#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${SHELL_ALL_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{

   ##
   cat <<EOF
   --all               : execute in all projects,subprojects,tests
   --directory <dir>   : enter subdirectory, before executing project command
   --eval              : evaluate command line, requires tricky quoting though
   --if <expr>         : ignore project if shell expression evaluates to false
   --ignore <name>     : ignore a project from REPOS, multiples are possible
   --others            : also execute in other projects, like demo
   --sde               : only execute in mulle-sde projects
   --output-no-header  : don't visually separate command output
   --parallel          : execute operations in parallel
   --repos-file <f>    : REPOS file to use
   --strict            : errors preempt
   --tests             : also execute in test directories
EOF
   if [ ! -z "${MULLE_TRACE}" ]
   then
      cat <<EOF
   --lenient           : lenient operation, errors don't preempt (default)
   --main-project      : also execute in main project
   --subprojects       : also execute in subprojects
   --only-others       : only execute in other projects, like demo
   --only-main-project : only execute in main project (default)
   --only-tests        : only execute in tests directories
   --only-subprojects  : only execute in subprojects project
EOF
   fi

   ## ADD YOUR FLAG DESCRIPTION HERE
   ##

   options_technical_flags_usage \
                "               : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-all [flags] ...

   Execute a command in all projects that are defined by the file "REPOS"
   in the current directory. If there is no "REPOS" file, mulle-project-all
   will look for mulle-sde projects that reside in the current working
   directory (excluding the working directory itself) . Specialities like
   --tests, --subprojects, --others will only work with mulle-sde projects.
   With a REPOS file, mulle-project-all will work with non-mulle-sde projects
   as well.

   mulle-project-all can execute commands in parallel on all repositories with
   the --parallel option.

   mulle-project-all in --eval mode, will define a couple of environment
   variables for evaluation use:

      NAME            : basename of the directory
      PROJECT_NAME    : name of the main project

      SUBPROJECT_NAME : set if its a subproject
      OTHER_NAME      : set if its an other project test
      TEST_NAME       : set if its a test

   These values are alsot available in the --if expression.

Examples:
   List git status of all projects:
      mulle-project-all --parallel --output-no-header git status -s

   Create a .gitattributes file for projects under git control:
      mulle-project-all --if "[ -d .git ]" cp /tmp/.gitattributes .

   Generate hacky include statements for all projects:
      mulle-project-all -s --eval printf '%s\\\\n' '\#include\ \<\${NAME}.h\>'

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   if [ -z "${MULLE_TRACE}" ]
   then
   cat <<EOF >&2
      (use -v flag to see more options)
EOF
   fi
   echo "" >&2

   cat <<EOF >&2
Tip:
   It's convenient and conventional to put an \`alias mpa=mulle-project-all\`
   into your .bash_profile.

EOF

   exit 1
}



shell_it()
{
   log_entry "shell_it" "$@"

   [ -z "$1" ] && return

   (
      rexekutor cd "$1" || exit 1

      r_basename "$1"
      NAME="$RVAL"

      if [ ! -z "${OPTION_IF}" ]
      then
         if ! NAME="'${NAME}'" \
              PROJECT_NAME="'${PROJECT_NAME}'" \
              SUBPROJECT_NAME="'${SUBPROJECT_NAME}'" \
              OTHER_NAME="'${OTHER_NAME}'" \
              TEST_NAME="'${TEST_NAME}'" \
              eval_exekutor "${OPTION_IF}"
         then
            log_info "Skip ${C_RESET_BOLD}$1"
            return
         fi
      fi

      case ",${OPTION_ADORN}," in
         *,no-bar,*|*,no-top-bar,*|*,none,*)
         ;;

         *)
            log_verbose "${C_RESET}---------------------"
         ;;
      esac

      case ",${OPTION_ADORN}," in
         *,no-echo,*|*,no-printf,*|*,none,*)
         ;;

         *,printf,*)
            printf "%s " "$1"
         ;;

         *)
            log_info "${C_RESET_BOLD}$1"
         ;;
      esac

      case ",${OPTION_ADORN}," in
         *,no-bar,*|*,no-bottom-bar,*|*,none,*)
         ;;

         *)
            log_verbose "${C_RESET}---------------------"
         ;;
      esac


      shift

      if [ ! -z "${OPTION_DIRECTORY}" ]
      then
         cd "${OPTION_DIRECTORY}" || exit 1
      fi

      if [ "${OPTION_EVAL}" = 'YES' ]
      then
         eval_exekutor NAME="'${NAME}'" \
                       PROJECT_NAME="'${PROJECT_NAME}'" \
                       SUBPROJECT_NAME="'${SUBPROJECT_NAME}'" \
                       OTHER_NAME="'${OTHER_NAME}'" \
                       TEST_NAME="'${TEST_NAME}'" \
                       "$@"
         return $?
      fi

      exekutor "$@"
   )
}


project_it()
{
   log_entry "project_it" "$1" "$2" ...

   local project="$1"
   local mode="$2"

   shift 2

   local old

   case ",${mode}," in
      *,main-project,*)
         if [ -z "${PROJECT_NAME}" ]
         then
            PROJECT_NAME="${project}"
         fi

         if [ "${OPTION_SDE_TEST}" = 'YES' ]
         then
            if [ ! -d "${project}/.mulle/share/sde" ]
            then
               log_info "No sde project in ${C_RESET_BOLD}${project}"
               return
            fi
         fi

         if ! shell_it "${project}" "$@" && [ "${OPTION_LENIENT}" = 'NO' ]
         then
            exit 1
         fi

         PROJECT_NAME=
      ;;
   esac

   case ",${mode}," in
      *,subprojects,*)
         local subprojects
         local subproject 

         subprojects="`( cd "${project}"  ; 
                         mulle-sde -N subproject list --format '%a\n' \
                                                      --output-no-header 2> /dev/null
                        ) `"

         local old

         old="${SUBPROJECT_NAME}"
         .foreachpath subproject in ${subprojects}
         .do
            case "${subproject}" in
               craftinfo/*)
                  # ignore
               ;;

               *)
                  if [ -d "${project}/${subproject}" ]
                  then
                     SUBPROJECT_NAME="${subproject}" ; export SUBPROJECT_NAME

                     project_it "${project}/${subproject}" "${mode}" "$@"
                  fi
               ;;
            esac
         .done

         SUBPROJECT_NAME="${old}"
      ;;
   esac

   case ",${mode}," in
      *,tests,*)
         local tests 
         local test 

         tests="`( cd "${project}" ; mulle-env --search-here environment \
                                       get --lenient MULLE_SDE_TEST_PATH 2> /dev/null )`"
         tests="${tests:-test}"

         local old

         old="${TEST_NAME}"
         .foreachpath test in ${tests}
         .do
            if [ -d "${project}/${test}" ]
            then
               TEST_NAME="${test}"

               if ! shell_it "${project}/${test}" "$@" && [ "${OPTION_LENIENT}" = 'NO' ]
               then
                  exit 1
               fi
            fi
         .done

         TEST_NAME="${old}"
      ;;
   esac        

   case ",${mode}," in
      *,others,*)
         local others
         local other

         others="`( cd "${project}" ; mulle-env --search-here environment \
                           get MULLE_SDE_OTHER_PROJECTS_PATH 2> /dev/null )`"
         others="${others:-demo}"

         local old

         old="${OTHER_NAME}"
         .foreachpath other in ${others}
         .do
            if [ -d "${project}/${other}" ]
            then
               OTHER_NAME="${other}"

               project_it "${project}/${other}" "${mode}" "$@"
            fi
         .done

         OTHER_NAME="${old}"
      ;;
   esac
}


parallel_execute_argument_first()
{
   log_entry "parallel_execute_argument_first" "$@"

   local arguments="$1"
   local mode="$2"
   local exists_file="$3"

   shift 3

   local _parallel_statusfile
   local _parallel_maxjobs
   local _parallel_jobs
   local _parallel_fails

   [ $# -eq 0 ] && _internal_fail "missing commandline"

   _parallel_begin

   local argument

   .foreachline argument in ${arguments}
   .do
      if [ ! -z "${argument}" ]
      then
         if [ ! -z "${exists_file}" ] && [ ! -e "${argument}/${exists_file}" ]
         then
            .continue
         fi

         wait_for_available_job "${_parallel_maxjobs}"
         _parallel_jobs=$(($_parallel_jobs + 1))

         log_debug "Running job #${_parallel_jobs}: $*"

         (
            project_it "${argument}" "${mode}" "$@"
         ) &
      fi
   .done

   _parallel_end
}



main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_ADORN
   local OPTION_LENIENT='YES'
   local OPTION_MODE="main-project"
   local OPTION_REPOSFILE
   local OPTION_DIRECTORY
   local OPTION_PARALLEL
   local OPTION_SDE_TEST='NO'
   local OPTION_EVAL
   local OPTION_IF
   local OPTION_IGNORE

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      # this grabs -n -s -v
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         -a|--all)
            OPTION_MODE="main-project,subprojects,tests,others"
         ;;

         -d|--directory)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            r_concat "${OPTION_DIRECTORY}" "$1" "&&"
            OPTION_DIRECTORY="${RVAL}"
         ;;

         -e|--eval)
            OPTION_EVAL='YES'
         ;;

         -i|--ignore)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            r_add_line "${OPTION_IGNORE}" "$1"
            OPTION_IGNORE="${RVAL}"
         ;;

         --if)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            r_concat "${OPTION_IF}" "$1" "&&"
            OPTION_IF="${RVAL}"
         ;;


         --if-exists|--if-file|--if-exists-file)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            r_concat "${OPTION_IF}" "[ -e \"$1\" ]"
            OPTION_IF="${RVAL}"
         ;;

         -l|--lenient)
            OPTION_LENIENT='YES'
         ;;

         -m|--main-project-only|--only-main-project)
            OPTION_MODE="main-project"
         ;;

         -p|--parallel)
            OPTION_PARALLEL='YES'
         ;;

         -o|--others-only|--only-others|--other-only|--only-other)
            OPTION_MODE="others"
         ;;

         -r|--repos-file)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_REPOSFILE="$1"
         ;;

         -t|--tests-only|--only-tests|--test-only|--only-test)
            OPTION_MODE="tests"
         ;;

         --if-exists-file)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_EXISTS_FILE="$1"
         ;;

         --subprojects-only|--only-subprojects|--subproject-only|--only-subproject)
            OPTION_MODE="subprojects"
         ;;

         --others)
            r_comma_concat "${OPTION_MODE}" "others"
            OPTION_MODE="${RVAL}"
         ;;

         --main-project|--project)
            r_comma_concat "${OPTION_MODE}" "main-project"
            OPTION_MODE="${RVAL}"
         ;;

         --sde|--sde-test)
            OPTION_SDE_TEST='YES'
         ;;

         --strict)
            OPTION_LENIENT='NO'
         ;;

         --subprojects)
            r_comma_concat "${OPTION_MODE}" "subprojects"
            OPTION_MODE="${RVAL}"
         ;;

         --output-no-header)
            OPTION_ADORN="none"
         ;;

         --tests|--test)
            r_comma_concat "${OPTION_MODE}" "tests"
            OPTION_MODE="${RVAL}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local reposfile 
   local repos 

   reposfile="${OPTION_REPOSFILE:-REPOS}"
   if [ -f "${reposfile}" ]
   then
      repos="`rexekutor egrep -v '^#' "${reposfile}"`"
   else
      [ ! -z "${OPTION_REPOSFILE}" ] && fail "\"${reposfile}\" not found"

      shell_enable_nullglob
      repos="`ls -1d */.mulle/share/sde | sed -e "s/\/\.mulle\/share\/sde$//" `"
      shell_disable_nullglob
   fi

   if [ "${OPTION_PARALLEL}" = 'YES' ]
   then
      include "parallel"

      parallel_execute_argument_first "${repos}" \
                                      "${OPTION_MODE}" \
                                      "${OPTION_EXISTS_FILE}" \
                                      "$@"
      return $?
   fi

   local i

   .foreachline i in ${repos}
   .do
      if find_line "${OPTION_IGNORE}" "${i}"
      then
         .continue
      fi

      if [ ! -z "${i}" ]
      then
         if [ ! -z "${OPTION_EXISTS_FILE}" ] && [ ! -e "${i}/${OPTION_EXISTS_FILE}" ]
         then
            .continue
         fi
         project_it "$i" "${OPTION_MODE}" "$@"
      fi
   .done
}


call_with_flags "main" "${MULLE_REPLACE_FLAGS}" "$@"
