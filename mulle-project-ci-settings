#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_CI_SETTINGS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f               : force operation"

   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage \
                "            : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-ci-settings [flags]

   Generate environment variable settings to map the sourcetree dependencies to
   a different branch, nodetype, url. This is useful for testing prereleases
   with github actions, where you want to clone from a different branch rather
   than downloading a tagged archive from release.

   On Github actions, with the default flag values, set MULLE_HOSTNAME to
   "ci-prerelease" in the settings. This will be picked up and the
   environment variables will be used in the next build.

   It is important for this command to work, that all dependencies have been
   fetched. This is not as easy as it may sound, especially if you use 
   symlinks. It is important to do the cleaning and fetching in the proper
   order. All symlinked dependencies are also completely fetched:

   mulle-sde clean tidy ; mulle-sde clean fetch
   mulle-sde test clean tidy ; mulle-sde test fetch

Example:
   mulle-project-ci-settings --user 'mulle-*' --user '!mintomic'

Flags:
   --user <pattern> : specify github users to match in the URL of the
                      dependency. Multiple users and wildcards are possible
   --repo <pattern> : specify repository names to match in the URL of the
                      dependency. Multiple uses and wildcards are possible
   --branch <name>  : specify github branch to pull from (prerelease)
   --scope <name>   : specify environment scope (host-ci-prerelease)
   --mulle          : standard values for mulle-c/mulle-objc projects
   --append         : don't overwrite existing file completely

EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


produce_environment()
{
   log_entry produce_environment "$@"

   local mapped_branch="$1"
   local mapped_scope="$2"
   local matching_users="$3"
   local matching_repos="$4"
   local clobber="$5"

   [ -z "${mapped_branch}" ] && _internal_fail "mapped_branch is empty"
   [ -z "${mapped_scope}" ]  && _internal_fail "mapped_scope is empty"

   exekutor mulle-env \
               ${MULLE_TECHNICAL_FLAGS} \
               ${MULLE_ENV_FLAGS} \
            scope  \
               remove --if-exists "${mapped_scope}"  || fail "Could not remove old scope"

   local lines

   if [ "${clobber}" = 'YES' ]
   then
      eval `mulle-env mulle-tool-env env`
      remove_file_if_present "${MULLE_ENV_ETC_DIR}/environment-host-ci-prerelease.sh"
   fi

   #
   # uses mulle-sourcetree-parser library
   #
   lines="`project::sourcetree_parser::get_dependency_address_nodetype_branch_tag_url -r --bequeath `"

   local _address
   local _nodetype
   local _branch
   local _url
   local _host
   local _user
   local _repo
   local _nodetype_identifier
   local _nodetype_fallback
   local _branch_identifier
   local _branch_fallback
   local _url_identifier
   local _url_fallback
   local _tag_identifier
   local _tag_fallback

   local mapped_url
   local line

   log_debug "lines: ${lines}"

   .foreachline line in ${lines}
   .do
      [ -z "${line}" ] && .continue

      if ! project::sourcetree_parser::parse_nodetype_branch_tag_url "${line}"
      then
         .continue
      fi

      [ -z "${_address}" ] && fail "Can't figure out address: ${line}"
      #
      # we need it to set to git for prerelease
      #
      [ -z "${_url_identifier}" ] && fail "Can't figure out URL from URL ${_url}: ${line}"
      #
      # we need it to set prerelease branch
      #
      [ -z "${_branch_identifier}" ] && fail "Can't figure out branch identifier: ${line}"

      if [ ! -z "${_user}" ] && ! project::sourcetree_parser::is_matching_wildcards "${matching_users}" "${_user}"
      then
         log_fluff "\"${_user}\" does not match \"${matching_users}\""
         .continue
      fi
      if [ ! -z "${_repo}" ] && ! project::sourcetree_parser::is_matching_wildcards "${matching_repos}" "${_repo}"
      then
         log_fluff "\"${_repo}\" does not match \"${matching_repos}\""
         .continue
      fi

      case "${_nodetype}" in
         *clib*)
            [ -z "${_url}" ]    && fail "Can't figure out URL: ${line}"
            [ -z "${_branch}" ] && fail "Can't figure out branch: ${line}"

            log_verbose "Mapped branch ${C_MAGENTA}${C_BOLD}${mapped_branch}${C_VERBOSE} for ${C_RESET_BOLD}${_url}"

            exekutor mulle-env \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} \
                     environment  \
                        --scope "${mapped_scope}" \
                        set "${_branch_identifier}" "${mapped_branch}" "${_address} branch: ${_branch}"
         ;;

         *)
            [ -z "${_user}" ]    && fail "Can't figure out user from URL ${_url}: ${line}"
            [ -z "${_repo}" ]    && fail "Can't figure out repo from URL ${_url}: ${line}"

            mapped_url="https://${_host}/${_user}/${_repo%.git}.git"

            log_verbose "Map ${C_RESET_BOLD}${mapped_url}${C_VERBOSE} to ${C_RESET_BOLD}${_url}"

            [ -z "${_nodetype_identifier}" ] && fail "Can't figure out node identifier: ${line}"
            [ -z "${_host}" ]                && fail "Can't figure out host from URL ${_url}: ${line}"

            exekutor mulle-env \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} \
                     environment  \
                        --scope "${mapped_scope}" \
                        set "${_nodetype_identifier}" "git" "${_address} nodetype: ${_nodetype}" &&
            exekutor mulle-env \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} \
                     environment  \
                        --scope "${mapped_scope}" \
                        set "${_url_identifier}" "${mapped_url}" "${_address} url: ${_url}" &&
            exekutor mulle-env \
                        ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} \
                     environment  \
                        --scope "${mapped_scope}" \
                        set "${_branch_identifier}" "${mapped_branch}" "${_address} branch: ${_branch}"
         ;;
      esac
   .done
}


main()
{
   local OPTION_SCOPE
   local OPTION_BRANCH
   local OPTION_USERS
   local OPTION_REPOS
   local OPTION_CLOBBER='YES'

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --append)
            OPTION_CLOBBER='NO'
         ;;

         --mulle)
            r_colon_concat "${OPTION_USERS}" 'Mulle*'
            OPTION_USERS="${RVAL}"
            r_colon_concat "${OPTION_USERS}" 'mulle-*'
            OPTION_USERS="${RVAL}"

            r_colon_concat "${OPTION_REPOS}" '!mintomic*'
            OPTION_REPOS="${RVAL}"
            r_colon_concat "${OPTION_REPOS}" '!*farmhash*'
            OPTION_REPOS="${RVAL}"
            r_colon_concat "${OPTION_REPOS}" '*'
            OPTION_REPOS="${RVAL}"
         ;;

         --branch)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_BRANCH="$1"
         ;;

         --repo)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            r_colon_concat "${OPTION_REPOS}" "$1"
            OPTION_REPOS="${RVAL}"
         ;;

         --scope)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_SCOPE="$1"
         ;;

         --user)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            r_colon_concat "${OPTION_USERS}" "$1"
            OPTION_USERS="${RVAL}"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   include "project::sourcetree-parser" || exit 1

   produce_environment "${OPTION_BRANCH:-prerelease}" \
                       "${OPTION_SCOPE:-host-ci-${OPTION_BRANCH:-prerelease}}" \
                       "${OPTION_USERS}" \
                       "${OPTION_REPOS}" \
                       "${OPTION_CLOBBER}"
}



call_with_flags "main" "${MULLE_PROJECT_CI_SETTINGS_FLAGS}" "$@"
