#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_CLIB_JSON_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.2"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi



print_flags()
{
   echo "   -o <file>   : output JSON to file"
   echo "   -a <file>   : add additional file to sources"

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-clib-json [flags]

   Create a clib.json file for use with https://www.clibs.org.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


read_project_environment()
{
   log_entry "read_project_environment" "$@"

   if [ -f ".mulle/etc/env/environment-project.sh" ]
   then
      log_fluff "Reading project settings"
      . ".mulle/etc/env/environment-project.sh"
   fi

   if [ -z "${PROJECT_TYPE}" ]
   then
      if [ -f ".mulle/share/env/environment-project.sh" ]
      then
         log_fluff "Reading v2 project settings"
         . ".mulle/share/env/environment-project.sh"
      fi
   fi

   [ -z "${PROJECT_TYPE}" ] && \
     fail "Could not find required PROJECT_TYPE in environment."
}


get_repo()
{
   log_entry "get_repo" "$@"

   local domain user repo
   local remote

   .for remote in `git remote 2> /dev/null`
   .do
      url="`git remote get-url "${remote}"`"
      # check if known domain
      eval "`mulle-domain parse-url "${url}"`"
      if [ "${domain}" = github ]
      then
         .break
      fi
      repo=
   .done

   if [ -z "${repo}" ]
   then
      r_basename "${PWD}"
      repo="${RVAL}"
      r_dirname "${PWD}"
      r_basename "${RVAL}"
      user="${RVAL}"
   fi

   echo "${user}/${repo}"
}



print_version()
{
   log_entry "print_version" "$@"

   local version

   # picks up our environment though
   version="`PROJECT_UPCASE_IDENTIFIER= rexekutor mulle-project-version -s`" \
   || _internal_fail "No project version found"
   printf "%s" "${INDENT}\"version\" : \"${version}\""
}


print_name()
{
   log_entry "print_name" "$@"

   [ -z "${PROJECT_NAME}" ] && _internal_fail "No PROJECT_NAME set"

   printf "%s" "${INDENT}\"name\" : \"${PROJECT_NAME}\"";
}


print_description()
{
   log_entry "print_description" "$@"

   local text

   include "project::settings"

   text="`project::settings::get_description`"
   r_trim_whitespace "${text}"
   printf "%s" "${INDENT}\"description\" : \"${RVAL}\"";
}


print_keywords()
{
   log_entry "print_keywords" "$@"

   printf "%s" "${INDENT}\"keywords\" : []"
}


get_license_text()
{
   log_entry "get_license_text" "$@"

   if [ -f LICENSE ]
   then
      head -1 LICENSE
   else
      if [ -f LICENSE.txt ]
      then
         head -1 LICENSE.txt
      fi
   fi
}


get_license()
{
   log_entry "get_license" "$@"

   local line

   if [ -f "cola/properties.plist" ]
   then
      grep -E "license.*=" "cola/properties.plist" \
      |  sed -n 's/.*"\([^"]*\)".*/\1/p'
      return
   fi

   # grep LICENSE.txt
   line="`get_license_text`"
   case "${line}" in
      *BSD*3*)
         echo "BSD-3-Clause"
      ;;

      *)
         echo "UNLICENSED"    # dunno
      ;;
   esac
}


print_license()
{
   log_entry "print_license" "$@"

   local license

   license="`get_license`"
   printf "%s" "${INDENT}\"license\" : \"${license}\""
}


print_repo()
{
   log_entry "print_repo" "$@"

   printf "${INDENT}\"repo\" : \"%s\"" "`get_repo`"
}


print_sources()
{
   local aux_sources="$1"

   local qualifier

   if [ -d .mulle/share/match ]
   then
      qualifier='(TYPE_MATCHES header OR TYPE_MATCHES source OR CATEGORY_MATCHES clib) AND NOT CATEGORY_MATCHES no_clib'
      sources="`rexekutor mulle-match ${MULLE_TECHNICAL_FLAGS} \
                                      ${MULLE_MATCH_FLAGS}list --qualifier "${qualifier}" `"
   else
      # cheat and hack
      sources="`rexekutor find src -name "*.h" \
                                -o -name "*.inc" \
                                -o -name "*.c" \
                                -o -name "*.cpp" \
                                -o -name "*.aam" \
                                -o -name "*.m" `"
   fi

   .foreachline line in ${aux_sources}
   .do
      if [ ! -e "${line}" ]
      then
         fail "\"${line}\" does not exist"
      fi
      r_add_unique_line "${sources}" "${line}"
      sources="${RVAL}"
   .done

   sources="`LC_ALL=C sort -f <<< "${sources}" `"

   local sep

   sep="${INDENT}${INDENT}"

   printf "%s\n" "${INDENT}\"src\" : ["
   .foreachline line in ${sources}
   .do
      printf "%s\"%s\"" "${sep}" "${line}"
      sep=","$'\n'"${INDENT}${INDENT}"
   .done

   printf "\n%s" "${INDENT}]"
}


print_dependencies()
{
   log_entry "print_dependencies" "$@"

   local lines="$1"

   printf "${INDENT}\"dependencies\" : {"

   local sep

   sep="\\n${INDENT}${INDENT}"

   local domain
   local line
   local name
   local repo
   local url
   local user
   local xtag

   .foreachline line in ${lines}
   .do
#      name="${line%%;*}"
      line="${line#*;}"
      xtag="${line%%;*}"
      url="${line#*;}"

      if [ ! -z "${url}" ]
      then
         eval "`rexekutor mulle-domain ${MULLE_TECHNICAL_FLAGS} \
                                       ${MULLE_DOMAIN_FLAGS} parse "${url}"`"

         case "${domain}" in
            github)
               if [ ! -z "${user}" -a ! -z "${repo}" ]
               then
                  printf "${sep}"
                  sep=",\\n${INDENT}${INDENT}"
                  # use repo instead of name
                  printf "\"%s/%s\"" "${user}" "${repo}"
                  case "${xtag}" in
                     [0-9].*)
                        printf ": \"%s\"" "${xtag}"
                     ;;

                     *)
                        printf ": \"*\""
                     ;;
                  esac
               fi
            ;;
         esac
      fi
   .done

   printf "\n${INDENT}}"
}


print_json()
{
   log_entry "print_json" "$@"

   local aux_sources="$1"

   INDENT="   "
   echo "{"
      print_name
      printf ",\n"
      print_version
      printf ",\n"
      print_description
      printf ",\n"
      print_keywords
      printf ",\n"
      print_license
      printf ",\n"
      print_repo
      printf ",\n"
      print_sources "${aux_sources}"

      local dependencies

      # also use embedded resources and let the user sort it out
      dependencies="`rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                              ${MULLE_SDE_FLAGS} \
                        dependency list \
                           --columnar \
                           -- \
                              --dedupe-mode url-filename \
                              --output-eval \
                              --output-no-column \
                              --output-no-header \
                              --force-format "%a;%t;%u\\n" `"

      if [ ! -z "${dependencies}" ]
      then
         printf ",\n"
         print_dependencies "${dependencies}"
      fi
      echo
   echo "}"
}


main()
{
   local OPTION_OUTPUT_FILE="-"
   local OPTION_SOURCES

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         -o|--output-file)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            OPTION_OUTPUT_FILE="$1"
         ;;

         -a|--add-source)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            r_add_line "${OPTION_SOURCES}" "$1"
            OPTION_SOURCES="${RVAL}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   directory="`rexekutor mulle-sde project-dir`"
   if [ -z "${directory}" ]
   then
      fail "No mulle-sde project found"
   fi
   rexekutor cd "${directory}" || exit 1

   #
   # get local project environment
   #
   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`PATH=/bin:/usr/bin pwd -P`"
      MULLE_SHELL_MODE="" . ".mulle/share/env/environment.sh" || exit 1
   fi

   local text

   if [ "${OPTION_OUTPUT_FILE}" = '-' ]
   then
      print_json "${OPTION_SOURCES}"
   else
      text="`print_json "${OPTION_SOURCES}"`" || return 1
      redirect_exekutor "${OPTION_OUTPUT_FILE}" echo "${text}"
   fi
}

call_with_flags "main" "${MULLE_PROJECT_CLIB_JSON_FLAGS}" "$@"
