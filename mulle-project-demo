#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VERSION=<|MULLE_BASHFUNCTIONS_VERSION|>
# shellcheck shell=bash
#


[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_NEW_DEMOS_TRACE}" = 'YES' ] \
&& set -x  \
&& : "$0" "$@"

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.0"



demo::print_flags()
{
   echo "   --standalone : just create a standalone demo project"
   echo "   --meta <ext> : specify mulle-sde meta extension to use"
   echo "   -d <dir>     : directory to use instead of demo"
   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
           "        : "
}


demo::usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] 

   Create a new "demo" subdirectory in a library project. Each file of the form 
   main-*.<extension> in \`src\` will produce an executable.

   The library sources will be built by the demo project. Therefore the library 
   won't get linked as a library but as each individual .o file. The advantage 
   is more rapid development due to better dependency checking and no need to 
   clean, when there are changes in the library.
   The result is not well upgradable though. As it would be, if this was 
   completely done by a proper extension.

   With the -f flag you can force this to work with executable projects as 
   well. You are on you own there though..

   MEMO: need to add a -startup library for Objective-C manually for now
   
Flags:
EOF
   demo::print_flags | LC_ALL=C sort >&2

   echo >&2

   exit 1
}


demo::r_get_env()
{
   local key="$1"

   if ! RVAL="`rexekutor mulle-sde env get "${key}"`"
   then
      fail "No suitable library mulle-sde project here"
   fi
}


demo::emit_task_script()
{
   cat <<EOF
#! /usr/bin/env mulle-bash
# shellcheck shell=bash

#
# This function will be called by mulle-monitor
#
library_task_run()
{
   log_entry "library_task_run" "\$@"

   local rc 

   #
   # we want craftinfos that are easily gotten by name
   #
   rexekutor mulle-sourcetree \${MULLE_TECHNICAL_FLAGS} -N rcopy --update .. 'craftinfo/*'
   rc=\$?
   if [ \$rc -eq 2 ]
   then
      rc=0
   fi

   #
   # we only want linkable stuff (avoids -startup and mulle-objc-list)
   #
   rexekutor mulle-sourcetree \${MULLE_TECHNICAL_FLAGS} -N rcopy --update .. '*' 'ENABLES link AND ENABLES intermediate-link'
   rc=\$?
   if [ \$rc -eq 2 ]
   then
      rc=0
   fi
   return \$rc
}

#
# Convenience to test your script standalone
#
if [ -z "\${MULLE_MONITOR_TASK_LOAD}" ]
then
   library_task_run "\$@"
fi
EOF
}


demo::emit_cmakelists_txt()
{
   cat <<EOF
cmake_minimum_required( VERSION 3.15)

project( demo C)

set( MULLE_PROJECT_TYPE "Executable")

### mulle-sde environment

# add cmake module paths to search path
list( INSERT CMAKE_MODULE_PATH 0 "\${CMAKE_CURRENT_SOURCE_DIR}/cmake/share")
list( INSERT CMAKE_MODULE_PATH 0 "\${CMAKE_CURRENT_SOURCE_DIR}/cmake/reflect")
list( INSERT CMAKE_MODULE_PATH 0 "\${CMAKE_CURRENT_SOURCE_DIR}/cmake")


include( Environment)

include( Files)

include( IDESupport OPTIONAL)

include( Dependencies OPTIONAL)

foreach( SOURCE \${SOURCES})
   # get rid off src/main- prefix and .m suffix
   #             offset 9  length -9 - 2
   # ignore library "main.c" and "main.m" files, just in case
   #
   if( NOT (SOURCE MATCHES ".*/main\\.[cm]$"))
      if( SOURCE MATCHES "^src/main-")
         list( APPEND DEMO_MAIN_SOURCES "\${SOURCE}")
      else()
         list( APPEND DEMO_OTHER_SOURCES "\${SOURCE}")
      endif()
   endif()
endforeach()

foreach( MAIN_SOURCE \${DEMO_MAIN_SOURCES})
   string( LENGTH "\${MAIN_SOURCE}" MAIN_SOURCE_LENGTH)
   math( EXPR MAIN_SOURCE_LENGTH "\${MAIN_SOURCE_LENGTH} - 11")
   string( SUBSTRING "\${MAIN_SOURCE}" 9 \${MAIN_SOURCE_LENGTH} EXECUTABLE_NAME)

   set( SOURCES "\${MAIN_SOURCE}" \${DEMO_OTHER_SOURCES})
   include( Executable)
   include( InstallExecutable)
   include( FinalOutput OPTIONAL)
   # only for Executable
   include( Motd OPTIONAL)
endforeach()

EOF
}


demo::insert_line_before_last_endif()
{
   log_entry "demo::insert_line_before_last_endif" "$@"

   local filename="$1"
   local insert="$2"

   local text

   text="`cat "${filename}"`"

   local output
   local line

   include "array"

   while IFS= read -r line
   do
      # Check if the current line is "#endif", since we indent our
      # endifs this should work

      if [ "$line" = "#endif" ]
      then
         r_add_line_lf "${output}" "${insert}"
         output="${RVAL}"
      fi

      r_add_line_lf "${output}" "${line}"
      output="${RVAL}"
   done <<< "${text}"

   redirect_exekutor "${filename}" printf "%s\n" "${output}"
}


demo::append_line_at_end()
{
   log_entry "demo::append_line_at_end" "$@"

   local filename="$1"
   local insert="$2"

   redirect_append_exekutor "${filename}" printf "%s\n" "${insert}"
}


demo::main()
{
   #
   # simple option/flag handling
   #
   local OPTION_DIRNAME="demo"
   local OPTION_STANDALONE
   local OPTION_META="mulle-objc/objc-developer"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            demo::usage
         ;;

         -d|--directory-name)
            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
            shift

            OPTION_DIRNAME="$1"
         ;;

         --standalone)
            OPTION_STANDALONE='YES'
         ;;

         --meta)
            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
            shift

            OPTION_META="$1"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            demo::usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -ne 0 ] && demo::usage "Superflous arguments $*"

   if [ -d "${OPTION_DIRNAME}" ]
   then
      fail "There is already a directory \"${OPTION_DIRNAME}\" here, move it aside"
   fi

   local PROJECT_SOURCE_DIR
   local PROJECT_TYPE

   if [ "${OPTION_STANDALONE}" != 'YES' ]
   then
      demo::r_get_env "PROJECT_SOURCE_DIR"
      LIBRARY_SOURCE_DIR="${RVAL}"

      demo::r_get_env "PROJECT_TYPE"
      PROJECT_TYPE="${RVAL}"

      if [ "${PROJECT_TYPE}" != 'library' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
      then
         fail "Need a library project to install demo"
      fi

      # get first only
      demo::r_get_env "PROJECT_EXTENSIONS"
      PROJECT_EXTENSION="${RVAL%%:*}"

      OPTION_META=$(rexekutor mulle-sde extension meta)
   fi

   if [ -z "${OPTION_META}" ]
   then
      fail "Couldn't figure out the meta extension to use, provide it with --meta"
   fi

   if ! exekutor mulle-sde init -m "${OPTION_META}" -d "${OPTION_DIRNAME}" executable
   then
      return 1
   fi

   log_info "Setting up ${C_RESET_BOLD}${OPTION_DIRNAME}"

   if [ "${OPTION_STANDALONE}" != 'YES' ]
   then
   (
      exekutor cd "${OPTION_DIRNAME}"

      demo::r_get_env "PROJECT_SOURCE_DIR"
      PROJECT_SOURCE_DIR="${RVAL}"

      exekutor mv "${PROJECT_SOURCE_DIR}/main.${PROJECT_EXTENSION}" \
                  "${PROJECT_SOURCE_DIR}/main-demo1.${PROJECT_EXTENSION}"

      #
      # install a task to update changes in parent dependencies
      #
      log_info "Installing ${C_MAGENTA}${C_BOLD}library${C_INFO} task to copy parent dependencies on reflect"

      demo::emit_task_script \
      | rexekutor mulle-monitor ${MULLE_TECHNICAL_FLAGS} task add library -

      rexekutor mulle-monitor ${MULLE_TECHNICAL_FLAGS} callback create library

      rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} environment \
         set MULLE_SDE_REFLECT_CALLBACKS 'library@:${MULLE_SDE_REFLECT_CALLBACKS}' 
      #
      # for benefit of an executable parent instead of a library
      #
      rexekutor mulle-sde ignore "../${LIBRARY_SOURCE_DIR}/main.m"
      rexekutor mulle-sde ignore "../${LIBRARY_SOURCE_DIR}/generic/"

      #
      # Add library sources to project and reflect
      #
      log_info "Adding library sources to project files"

      rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} environment \
         set MULLE_MATCH_PATH "\${MULLE_MATCH_PATH}:../${LIBRARY_SOURCE_DIR}"

      rexekutor mulle-sde reflect

      #
      # install custom CMakeLists.txt (clumsy)
      #

      if [ -d ../craftinfo ]
      then
        log_info "Adding symlink to parent craftinfo"
        exekutor ln -sf ../craftinfo
      fi

      log_info "Patching generic headers to include parent generic headers"

      # include from demo/src/generic means ../../.. to reach parent

      demo::insert_line_before_last_endif 'src/generic/include-private.h' \
                                               '#include "../../../src/generic/include-private.h"'
      demo::insert_line_before_last_endif 'src/generic/include.h' \
                                               '#include "../../../src/generic/include.h"'
      demo::append_line_at_end 'src/generic/import-private.h' \
                                    '#import "../../../src/generic/import-private.h"'
      demo::append_line_at_end 'src/generic/import.h' \
                                    '#import "../../../src/generic/import.h"'
   )
   fi

   (
      exekutor cd "${OPTION_DIRNAME}"
      #
      # install custom CMakeLists.txt (clumsy)
      #
      log_info "Installing custom ${C_RESET_BOLD}CMakeLists.txt"

      demo::emit_cmakelists_txt \
      | redirect_exekutor CMakeLists.txt cat
   )
}


#
# You can also use the function `call_with_flags`, which has been defined
# during mulle-boot. It lets you call 'demo::main'
# with MULLE_PROJECT_NEW_DEMOS_FLAGS interposed.
#
# call_with_flags "demo::main" "${MULLE_PROJECT_NEW_DEMOS_FLAGS}" "$@"

demo::main "$@"
