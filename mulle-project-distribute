#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#
# For documentation and help see:
#    https://github.com/mulle-sde/mulle-project
#
# Run this somewhat like this (for real: remove -n):
#    mulle-project-distribute -v -n --publisher mulle-nat --publisher-tap mulle-kybernetik/software/
#
[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_DISTRIBUTE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi

usage()
{
   cat <<EOF >&2
Usage: ${MULLE_EXECUTABLE_USAGE_NAME:-mulle-project-distribute} [options]

   Distribute the project via github and homebrew. Debian is indirectly
   supported by calling mulle-project-debian.

   There are five stages of the distribution process that you can choose to
   skip:

   * pre-release  : run .mulle/etc/project/pre-release.sh (--no-pre-release)
   * git          : tag and push (--no-git)
   * formula      : create a homebrew formula (--no-formula)
   * formula-push : push formula to the brew tap (--no-formula-push)
   * post-release : run .mulle/etc/project/post-release.sh (--no-post-release)

   (Typically mulle-project-debian is run in post-release.)

Options:
   --branch <name>   : branch to push to (${BRANCH:-release})
   --debname <name>  : debian repository name (${DEBIAN_REPOSITORY:-main})
   --no-git          : suppress git operations (implies --no-post-release)
   --no-formula      : suppress formula operations (implies --no-post-release)
   --no-version-tag  : don't tag with the current version
   --no-formula-push : do not publish the formula to github
   --verify-only     : check but do not acually commit anything
   --post-release    : reenable post-release after --no-git or -no-formula
   --no-post-release : suppress post-release processing

EOF
   exit 1
}


source_file()
{
   log_verbose "Read \"$1\"" >&2
   . "$@"
}


project_is_compatible_version()
{
   local installed="$1"
   local script="$2"

   local s_major
   local s_minor
   local i_major
   local i_minor

   s_major="`printf "%s\n" "${script}"    | head -1 | cut -d. -f1`"
   s_minor="`printf "%s\n" "${script}"    | head -1 | cut -d. -f2`"
   i_major="`printf "%s\n" "${installed}" | head -1 | cut -d. -f1`"
   i_minor="`printf "%s\n" "${installed}" | head -1 | cut -d. -f2`"

   if [ "${i_major}" = "" -o "${i_minor}" = "" -o \
        "${s_major}" = "" -o "${s_minor}" = "" ]
   then
      return 4
   fi

   if [ "${i_major}" != "${s_major}" ]
   then
      return 1
   fi

   if [ "${i_minor}" -lt "${s_minor}" ]
   then
      return 1
   fi

   return 0
}


__environment_main()
{
   # --- COMMON ---

   if [ -z "${PROJECT}" ]
   then
      PROJECT="`basename -- "$PWD"`"
   fi

   #
   # NAME can usually be deduced, if you follow the conventions
   #
   if [ -z "${NAME}" ]
   then
      NAME="`project::version::get_formula_name_from_project "${PROJECT}" "${LANGUAGE}"`" || exit 1
   fi

   #
   # Use mulle-project-version to determine version
   #
   if [ -z "${VERSION}" ]
   then
      options="--no-info --no-tag-warning"
      [ ! -z "${LANGUAGE}" ]    && options="${options} --language \"${LANGUAGE}\""
      [ ! -z "${VERSIONNAME}" ] && options="${options} --versionname \"${VERSIONNAME}\""
      [ ! -z "${VERSIONFILE}" ] && options="${options} --versionfile \"${VERSIONFILE}\""

      VERSION="`eval mulle-project-version ${options} "${PROJECT}"`" || exit 1
   fi


   # --- FORMULA  ---


   # dependencies can be empty
   if [ -z "${DEPENDENCIES}" -a -f  .DEPENDENCIES ]
   then
      log_verbose "Read DEPENDENCIES from \".DEPENDENCIES\""
      DEPENDENCIES="`grep -E -v '^#' .DEPENDENCIES`"
   fi

   TAP_USER="${TAP_USER:-mulle-kybernetik}"
   TAP_NAME="${TAP_NAME:-software}"

   MULLE_TAP_USER="${MULLE_TAP_USER:-${TAP_USER}}"
   MULLE_TAP_NAME="${MULLE_TAP_NAME:-${TAP_NAME}}"

   CODEON_TAP_USER="${CODEON_TAP_USER:-mulle-cc}"
   CODEON_TAP_NAME="${CODEON_TAP_NAME:-software}"

   # TODO: so much hard coding, should put this outside into
   # source-able files

   MULLE_KYBERNETIK_TAP="${MULLE_KYBERNETIK_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_KYBERNETIK_TAP}" in
      */)
      ;;

      *)
         MULLE_KYBERNETIK_TAP="${MULLE_KYBERNETIK_TAP}/"
      ;;
   esac

   MULLE_SDE_TAP="${MULLE_SDE_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_SDE_TAP}" in
      */)
      ;;

      *)
         MULLE_SDE_TAP="${MULLE_SDE_TAP}/"
      ;;
   esac


   MULLE_NAT_TAP="${MULLE_NAT_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_NAT_TAP}" in
      */)
      ;;

      *)
         MULLE_NAT_TAP="${MULLE_NAT_TAP}/"
      ;;
   esac

   MULLE_C_TAP="${MULLE_C_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_C_TAP}" in
      */)
      ;;

      *)
         MULLE_C_TAP="${MULLE_C_TAP}/"
      ;;
   esac

   MULLE_CORE_TAP="${MULLE_CORE_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_CORE_TAP}" in
      */)
      ;;

      *)
         MULLE_CORE_TAP="${MULLE_CORE_TAP}/"
      ;;
   esac

   MULLE_OBJC_TAP="${MULLE_OBJC_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_OBJC_TAP}" in
      */)
      ;;

      *)
         MULLE_OBJC_TAP="${MULLE_OBJC_TAP}/"
      ;;
   esac

   MULLE_CONCURRENT_TAP="${MULLE_CONCURRENT_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_CONCURRENT_TAP}" in
      */)
      ;;

      *)
         MULLE_CONCURRENT_TAP="${MULLE_CORE_TAP}/"
      ;;
   esac

   MULLE_CORE_TAP="${MULLE_CORE_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_CORE_TAP}" in
      */)
      ;;

      *)
         MULLE_CORE_TAP="${MULLE_CORE_TAP}/"
      ;;
   esac

   MULLE_FOUNDATION_TAP="${MULLE_FOUNDATION_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_FOUNDATION_TAP}" in
      */)
      ;;

      *)
         MULLE_FOUNDATION_TAP="${MULLE_FOUNDATION_TAP}/"
      ;;
   esac

   MULLE_WEB_TAP="${MULLE_WEB_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_WEB_TAP}" in
      */)
      ;;

      *)
         MULLE_WEB_TAP="${MULLE_WEB_TAP}/"
      ;;
   esac

   MULLE_SCION_TAP="${MULLE_SCION_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${MULLE_SCION_TAP}" in
      */)
      ;;

      *)
         MULLE_SCION_TAP="${MULLE_SCION_TAP}/"
      ;;
   esac

   BUILDTOOLS_TAP="${BUILDTOOLS_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${BUILDTOOLS_TAP}" in
      */)
      ;;

      *)
         BUILDTOOLS_TAP="${BUILDTOOLS_TAP}/"
      ;;
   esac

   TOOLS_TAP="${TOOLS_TAP:-${MULLE_TAP_USER}/${MULLE_TAP_NAME}/}"
   case "${TOOLS_TAP}" in
      */)
      ;;

      *)
         TOOLS_TAP="${TOOLS_TAP}/"
      ;;
   esac

   DEPENDENCY_TAP="${DEPENDENCY_TAP:-${PUBLISHER_TAP}}"
   case "${DEPENDENCY_TAP}" in
      */)
      ;;

      *)
         DEPENDENCY_TAP="${DEPENDENCY_TAP}/"
      ;;
   esac

   CODEON_TAP="${CODEON_TAP:-${CODEON_TAP_USER}/${CODEON_TAP_NAME}/}"
   case "${CODEON_TAP}" in
      */)
      ;;

      *)
         CODEON_TAP="${CODEON_TAP}/"
      ;;
   esac

   # --- GIT ---

   if [ -z "${VERSION}" ]
   then
      fail "Could not figure out the version. (hint: use VERSIONNAME, VERSIONFILE)"
   fi

   # tag to tag your release
   if [ "${OPTION_VERSION_TAG}" = "YES" ]
   then
      TAG="${TAG:-${TAG_PREFIX}${VERSION}${TAG_SUFFIX}}"
   else
      TAG=""
   fi

   # git remote to push to, usually origin
   ORIGIN="${ORIGIN:-origin}"

   # git remote to push to, usually github, can be empty
   GITHUB="${GITHUB:-github}"

   # git branch to master to, source is always current
   BRANCH="${BRANCH:-master}"


   # --- HOMEBREW TAP ---

   #
   # Specify to where and under what name to publish via your brew tap
   #
   # require PUBLISHER (and PUBLISHER_TAP) as command line parameter, so
   # that forks don't have to edit this constantly
   #
   #
   TAPS_LOCATION="${TAPS_LOCATION:-..}"

   if [ ! -z "${PUBLISHER_TAP}" ]
   then
      r_basename "${PUBLISHER_TAP}"
      tmp="${RVAL}"
      HOMEBREW_TAP="${HOMEBREW_TAP:-${TAPS_LOCATION}/homebrew-${tmp}}"
   fi

   RBFILE="${RBFILE:-${NAME}.rb}"

  # where to grab the archive off
   ARCHIVE_URL="${ARCHIVE_URL:-https://github.com/${PUBLISHER}/${PROJECT}/archive/${TAG}.tar.gz}"

   # written into formula for project, will be evaled
   HOMEPAGE_URL="${HOMEPAGE_URL:-https://github.com/${PUBLISHER}/${PROJECT}}"

}


main()
{
   USE_CACHE='NO'
   OPTION_LATEST_TAG="latest"
   VERIFY_ONLY='NO'

   local OPTION_POST_RELEASE_OPTIONS=
   local OPTION_DO_PUSH_FORMULA="DEFAULT"
   local OPTION_DO_GIT_RELEASE="DEFAULT"
   local OPTION_DO_GENERATE_FORMULA="DEFAULT"
   local OPTION_DO_PRE_RELEASE="DEFAULT"
   local OPTION_DO_POST_RELEASE="DEFAULT"
   local OPTION_VERSION_TAG="YES"
   local OPTION_FORCE_PUSH="NO"

   source_file "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-user-files-settings.sh" "$@"   || exit 1

   LANGUAGE=

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            help='YES'
         ;;

         # single arg long (kinda lame)
         --cache)
            USE_CACHE='YES'
         ;;

         --no-cache)
            USE_CACHE='NO'
         ;;

         --echo)
            OPTION_ECHO='YES'
         ;;

        -f|--force-push)
            OPTION_FORCE_PUSH='YES'
         ;;

         --no-git)
            OPTION_DO_GIT_RELEASE='NO'
         ;;

         --no-formula)
            OPTION_DO_GENERATE_FORMULA='NO'
            OPTION_DO_PUSH_FORMULA='NO'
         ;;

         --no-generate-formula)
            OPTION_DO_GENERATE_FORMULA='NO'
         ;;

         --no-tag)
            OPTION_VERSION_TAG="NO"
            OPTION_LATEST_TAG="NO"
         ;;

         --no-version-tag)
            OPTION_VERSION_TAG="NO"
         ;;

         --latest-tag)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            OPTION_LATEST_TAG="$1"
         ;;

         --no-latest-tag)
            OPTION_LATEST_TAG=""
         ;;

         --push-formula|formula-push)
            OPTION_DO_PUSH_FORMULA='YES'
         ;;

         --no-push-formula|--no-formula-push)
            OPTION_DO_PUSH_FORMULA='NO'
         ;;

         --pre-release)
            OPTION_DO_PRE_RELEASE='YES'
         ;;

         --no-pre-release)
            OPTION_DO_PRE_RELEASE='NO'
         ;;

         --post-release)
            OPTION_DO_POST_RELEASE='YES'
         ;;

         --no-post-release)
            OPTION_DO_POST_RELEASE='NO'
         ;;

         --no-post-release-update)
            OPTION_POST_RELEASE_OPTIONS='--no-update'
         ;;

         # arg long

         --buildtools-tap)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            BUILDTOOLS_TAP="$1"
         ;;

         --branch)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            BRANCH="$1"
         ;;

         --debname|--debian-repository)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            DEBIAN_REPOSITORY="$1"
         ;;

         --dependency-tap)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            DEPENDENCY_TAP="$1"
         ;;

         --codeon-tap)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            CODEON_TAP="$1"
         ;;

         --github)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            GITHUB="$1"
         ;;

         --homepage-url)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            HOMEPAGE_URL="$1"
         ;;

         --language)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            LANGUAGE="$1"
         ;;

         --origin)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            ORIGIN="$1"
         ;;

         --post-release-options)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            OPTION_POST_RELEASE_OPTIONS="$1"
         ;;

         --project)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            PROJECT="$1"
         ;;

         --publisher)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            PUBLISHER="$1"
         ;;

         --publisher-tap)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            PUBLISHER_TAP="$1"
         ;;

         --tag)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            TAG="$1"
         ;;

         --tag-prefix)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            TAG_PREFIX="$1"
         ;;

         --tag-suffix)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            TAG_SUFFIX="$1"
         ;;

         --tap-name)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            TAP_NAME="$1"
         ;;

         --tap-user)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            TAP_USER="$1"
         ;;

         --codeon-tap-name)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            CODEON_TAP_NAME="$1"
         ;;

         --codeon-tap-user)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            CODEON_TAP_USER="$1"
         ;;

         --mulle-tap-name)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            MULLE_TAP_NAME="$1"
         ;;

         --mulle-tap-user)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift

            MULLE_TAP_USER="$1"
         ;;

         --tools-tap)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            TOOLS_TAP="$1"
         ;;

         --taps-location)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""
            shift
            TAPS_LOCATION="$1"
         ;;

         --verify-only)
            VERIFY_ONLY='YES'
         ;;

            # allow user to specify own parameters for his
            # generate_formula scripts w/o having to modify this file
         --*)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""

            varname="${1#..}" # not sure anymore what this does
            varname="${varname//-/_}"
            r_uppercase "${varname}"
            varname="${RVAL}"
            if ! grep -E -q -s '^[A-Z_][A-Z0-9_]*$' <<< "${varname}" > /dev/null
            then
               fail "invalid variable specification \"${varname}\", created by \"$1\""
            fi

            shift
            eval "${varname}='$1'"
            log_info "User variable ${varname} set to \"$1\""
         ;;

         -*)
            log_error "Unknown option \"$1\""
            exit 1
         ;;
      esac

      shift
   done

   if [ "${help}" = 'YES' ]
   then
      usage
   fi

   options_setup_trace "${MULLE_TRACE}" && set -x

   if [ ! -d ".mulle/etc/project" ]
   then
      log_warning "No .mulle/etc/project folder found."
   fi

#   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-git.sh" || exit 1
#   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-version.sh" || exit 1

   #
   # order of includes is important its a bit weird coded, due to being
   # old. We slurp in user values before the parameters, so that these
   # can be overridden by the parameters to the script
   #
   source_file "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-user-files.sh" "$@" || exit 1
   source_file "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-version.sh" "$@"    || exit 1

  __environment_main

   source_file "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-homebrew.sh" "$@"   || exit 1
   source_file "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-git.sh" "$@"        || exit 1

   #
   # override values read from user files
   # with flags an options
   #

   log_setting "OPTION_DO_GIT_RELEASE      = ${OPTION_DO_GIT_RELEASE}"
   log_setting "OPTION_DO_GENERATE_FORMULA = ${OPTION_DO_GENERATE_FORMULA}"
   log_setting "OPTION_DO_PRE_RELEASE      = ${OPTION_DO_PRE_RELEASE}"
   log_setting "OPTION_DO_POST_RELEASE     = ${OPTION_DO_POST_RELEASE}"
   log_setting "OPTION_DO_PUSH_FORMULA     = ${OPTION_DO_PUSH_FORMULA}"

   if [ "${OPTION_DO_GIT_RELEASE}" != 'DEFAULT' ]
   then
      DO_GIT_RELEASE="${OPTION_DO_GIT_RELEASE}"
   fi
   if [ "${OPTION_DO_GENERATE_FORMULA}" != 'DEFAULT' ]
   then
      DO_GENERATE_FORMULA="${OPTION_DO_GENERATE_FORMULA}"
   fi
   if [ "${OPTION_DO_PRE_RELEASE}" != 'DEFAULT' ]
   then
      DO_PRE_RELEASE="${OPTION_DO_PRE_RELEASE}"
   fi
   if [ "${OPTION_DO_POST_RELEASE}" != 'DEFAULT' ]
   then
      DO_POST_RELEASE="${OPTION_DO_POST_RELEASE}"
   fi
   if [ "${OPTION_DO_PUSH_FORMULA}" != 'DEFAULT' ]
   then
      DO_PUSH_FORMULA="${OPTION_DO_PUSH_FORMULA}"
   fi

   #
   # dial past options now as they have been parsed
   #
   if [ -z "${DO_GIT_RELEASE}" -a ! -d .mulle/etc/project ]
   then
      # make most simplistic stuff work (nice for farmhash e.g.)
      DO_GIT_RELEASE='YES'
   fi


   log_setting "DO_GIT_RELEASE      = ${DO_GIT_RELEASE}"
   log_setting "DO_GENERATE_FORMULA = ${DO_GENERATE_FORMULA}"
   log_setting "DO_PRE_RELEASE      = ${DO_PRE_RELEASE}"
   log_setting "DO_POST_RELEASE     = ${DO_POST_RELEASE}"
   log_setting "DO_PUSH_FORMULA     = ${DO_PUSH_FORMULA}"


   if [ "${DO_GIT_RELEASE}" != 'YES' -a  \
        "${DO_GENERATE_FORMULA}" != 'YES' -a  \
        "${DO_PUSH_FORMULA}" != 'YES' -a \
        "${DO_PRE_RELEASE}" != 'YES' -a \
        "${DO_POST_RELEASE}" != 'YES' ]
   then
      fail "Nothing to do! .mulle/etc/project/version-info.sh and .mulle/etc/project/formula-info.sh are missing"
   fi

   local exit_or_continue_if_dry_run

   exit_or_continue_if_dry_run="return"
   if [ "${MULLE_FLAG_EXEKUTOR_DRY_RUN}" = 'YES' ]
   then
      exit_or_continue_if_dry_run=':'
   fi

   #
   # check if someone installed a pre_release function
   # if yes call it
   #
   if [ "${DO_PRE_RELEASE}" = 'YES' ]
   then
      if [ "${VERIFY_ONLY}" != 'YES' ]
      then
         if shell_is_function "pre_release"
         then
            log_info "Pre release..."
            pre_release ${MULLE_TECHNICAL_FLAGS} \
                        "${PROJECT}" \
                        "${NAME}" \
                        "${VERSION}" \
                        "${DEPENDENCIES}" \
                        "${BUILD_DEPENDENCIES}" \
                        "${HOMEPAGE_URL}" \
                        "${DESC}" \
                        "${ARCHIVE_URL}" \
                        "${DEBIAN_DEPENDENCIES}" \
                        "${DEBIAN_REPOSITORY}" \
                        "${TAG}"
         else
            log_fluff "No pre release"
         fi
      fi
   fi


   if [ "${DO_GIT_RELEASE}" = 'YES' ]
   then
      # do the release
      project::git::verify_main "${BRANCH}" \
                                "${ORIGIN}" \
                                "${TAG}" \
                                "${GITHUB}" \
                                "${OPTION_LATEST_TAG}" \
                                "${OPTION_FORCE_PUSH}" || ${exit_or_continue_if_dry_run} 1

      if [ "${VERIFY_ONLY}" != 'YES' ]
      then
         log_info "Git release..."

         project::git::main "${BRANCH}" \
                            "${ORIGIN}" \
                            "${TAG}" \
                            "${GITHUB}" \
                            "${OPTION_LATEST_TAG}" \
                            "${OPTION_FORCE_PUSH}" || ${exit_or_continue_if_dry_run} 1
      fi
   else
      log_fluff "No git release"
   fi

   if [ "${DO_GENERATE_FORMULA}" = 'YES' ]
   then
      if [ -z "${PUBLISHER}" ]
      then
         fail "You need to specify a publisher with --publisher (hint: https://github.com/<publisher>)"
      fi

      if [ -z "${PUBLISHER_TAP}" ]
      then
         fail "You need to specify a publisher tap with --tap (hint: <mulle-kybernetik/software>)"
      fi

      if [ "${VERIFY_ONLY}" != 'YES' ]
      then
         log_info "Homebrew formula..."

         # generate the formula and push it
         if ! project::homebrew::generate "${PROJECT}" \
                                          "${NAME}" \
                                          "${VERSION}" \
                                          "${DEPENDENCIES}" \
                                          "${BUILD_DEPENDENCIES}" \
                                          "${HOMEPAGE_URL}" \
                                          "${DESC}" \
                                          "${ARCHIVE_URL}" \
                                          "${HOMEBREW_TAP}" \
                                          "${RBFILE}" \
                                          "${TAG}"
         then
            log_error "Homebrew generation failed!"
            ${exit_or_continue_if_dry_run}  1
         fi
      fi
   else
      log_fluff "No homebrew formula"
   fi


   if [ "${DO_PUSH_FORMULA}" = 'YES' ]
   then
      if ! project::homebrew::push "${NAME}" \
                                   "${VERSION}" \
                                   "${HOMEBREW_TAP}" \
                                   "${RBFILE}" \
                                   "${TAG}"
      then
         log_error "Homebrew formula push failed!"
         ${exit_or_continue_if_dry_run} 1
      fi
   fi

   DEBIAN_REPOSITORY="${DEBIAN_REPOSITORY:-main}"

   #
   # check if someone installed a post_release function
   # if yes call it (maybe calls mulle-project-debian)
   #
   if [ "${DO_POST_RELEASE}" = 'YES' ]
   then
      if [ "${VERIFY_ONLY}" != 'YES' ]
      then
         if shell_is_function "post_release"
         then
            log_info "Post release..."
            post_release ${MULLE_TECHNICAL_FLAGS} \
                         ${OPTION_POST_RELEASE_OPTIONS} \
                         "${PROJECT}" \
                         "${NAME}" \
                         "${VERSION}" \
                         "${DEPENDENCIES}" \
                         "${BUILD_DEPENDENCIES}" \
                         "${HOMEPAGE_URL}" \
                         "${DESC}" \
                         "${ARCHIVE_URL}" \
                         "${DEBIAN_DEPENDENCIES}" \
                         "${DEBIAN_REPOSITORY}" \
                         "${TAG}"
         else
            log_fluff "No post release"
         fi
      fi
   fi
}


main "$@"
