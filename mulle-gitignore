#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2022 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_GITIGNORE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.1"


### >> START OF mulle-bashfunctions-minimal-embed.sh >>
### << END OF mulle-bashfunctions-minimal-embed.sh <<


print_flags()
{
   echo "   --stdin : read file values from stdin instead"
   options_technical_flags_usage "   : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-gitignore [flags] <file>

   Add a file or directory to the .gitignore file, if it's not already present.
   Add patterns in single quotes like for example \`*.old\`.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


append_to_gitignore_if_needed()
{
   local file="$1"

   r_trim_whitespace "${file}"
   file="${RVAL}"

   case "${file}" in
      ""|\#*)
         # log_warning 'Fool! Don''t add comments this way!'
         return
      ;;
   esac

   local line

   if [ -f ".gitignore" ]
   then
      case "${file}" in
         */*)
            local directory

            directory="${file##/}"
            directory="${directory%%/}"

            local pattern0
            local pattern1
            local pattern2
            local pattern3

            # variations with leading and trailing slashes
            pattern0="${directory}"
            pattern1="${directory}/"
            pattern2="/${directory}"
            pattern3="/${directory}/"

            if rexekutor grep -F -q -s -x -e "${pattern0}" .gitignore
            then
               log_verbose "Duplicate ${C_RESET_BOLD}${pattern0}${C_VERBOSE} found"
               return
            fi
            if rexekutor grep -F -q -s -x -e "${pattern1}" .gitignore
            then
               log_verbose "Duplicate ${C_RESET_BOLD}${pattern1}${C_VERBOSE} found"
               return
            fi
            if rexekutor grep -F -q -s -x -e "${pattern2}" .gitignore
            then
               log_verbose "Duplicate ${C_RESET_BOLD}${pattern2}${C_VERBOSE} found"
               return
            fi
            if rexekutor grep -F -q -s -x -e "${pattern3}" .gitignore
            then
               log_verbose "Duplicate ${C_RESET_BOLD}${pattern3}${C_VERBOSE} found"
               return
            fi
         ;;

         *)
            if rexekutor grep -F -q -s -x -e "${file}" .gitignore
            then
               log_verbose "Duplicate ${C_RESET_BOLD}${file}${C_VERBOSE} found"
               return
            fi
         ;;
      esac
   fi

   #
   # prepend \n because it is safer, in case .gitignore has no trailing
   # LF which it often seems to not have
   # grep -F is bugged on at least OS X 10.x, so can't use -e chaining

   local terminator
   local line

   line="${file}"
   terminator="`rexekutor tail -c 1 ".gitignore" 2> /dev/null | tr '\012' '|'`"

   if [ ! -z "${terminator}" -a "${terminator}" != "|" ]
   then
      line=$'\n'"${line}"
   fi

   log_info "Adding \"${file}\" to \".gitignore\""
   redirect_append_exekutor .gitignore printf "%s\n" "${line}" || fail "Couldn't append to .gitignore"
}



main()
{
   local FLAG_STDIN='NO'

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --stdin)
            FLAG_STDIN='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local line

   if [ "${FLAG_STDIN}" = 'YES' ]
   then
      IFS=$'\n'
      while read -r line
      do
         append_to_gitignore_if_needed "${line}"
      done
      return 0
   fi

   [ $# -eq 0 ] && usage "Missing file"

   .foreachline line in "$@"
   .do
      append_to_gitignore_if_needed "${line}"
   .done
}


call_with_flags "main" "${MULLE_PROJECT_VERSIONCHECK_FLAGS}" "$@"
