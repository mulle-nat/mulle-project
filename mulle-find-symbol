#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_REPLACE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION='0.0.2'


##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f          : force operation"
   echo "   --          : skip options"

   ##
   ## ADD YOUR FLAG DESCRIPTION HERE
   ##

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-find-symbol [flags] <symbol>

   Search through libraries to find which defines a symbol.
   Will prefer static over shared libraries.
   
Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_SED=""

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            shift
            break
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -lt 1 ] && usage "missing argument"

   local symbol="$1"

   shift 1

   [ $# -ne 0 ] && usage "superflous arguments \"$*\"" 

   local escaped_symbol

   r_escaped_sed_pattern "${symbol}"
   escaped_symbol="${RVAL}"

   if [ -z "${escaped_symbol}" ]
   then
      usage "Unusable symbol \"${symbol}\""
   fi

   LD_SEARCHPATH="${LD_SEARCHPATH:-dependency/lib:addiction/lib}"

   shell_disable_pipefail

   local i
   local j
   local match

   # quickly hacked together so far
   match='NO'
   IFS=":" ; shell_disable_glob
   for i in ${LD_SEARCHPATH}
   do
      IFS=$'\n'
      for j in `rexekutor find "$i" -type f -name "lib*.a" -print | sort -f`
      do
         IFS="${DEFAULT_IFS}"
         if rexekutor nm "$j" | egrep -q "[A-T] ${escaped_symbol}\$"
         then
            printf "%s\n" "$j: $symbol"
            match="YES"
            [ "${OPTION_ALL}" != 'YES' ] && return
         fi
      done
      IFS=":"
      [ "${match}" = 'YES' -a "${OPTION_ALL}" != 'YES' ] && retun
   done

   if [ "${match}" = 'NO' -o "${OPTION_ALL}" = 'YES' ]
   then
      IFS=":" ; shell_disable_glob
      for i in ${LD_SEARCHPATH}
      do
         IFS=$'\n'
         for j in `rexekutor find "$i" -type f -name "lib*.so.*" -print | sort -f`
         do
            IFS="${DEFAULT_IFS}"
            if rexekutor nm "$j" | egrep -q "[A-T] ${escaped_symbol}\$"
            then
               printf "%s\n" "$j: $symbol"
               match="YES"
               [ "${OPTION_ALL}" != 'YES' ] && break
            fi
         done
         IFS=":"
         [ "${match}" = 'YES' -a "${OPTION_ALL}" != 'YES' ] && break
      done
   fi
}

call_with_flags "main" "${MULLE_REPLACE_FLAGS}" "$@"
