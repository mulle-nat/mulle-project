#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_REPLACE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION='0.0.2'


### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.1"


### >> START OF mulle-bashfunctions-minimal-embed.sh >>
### << END OF mulle-bashfunctions-minimal-embed.sh <<



print_flags()
{
   echo "   -f          : force operation"
   echo "   --          : skip options"

   ##
   ## ADD YOUR FLAG DESCRIPTION HERE
   ##

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-find-symbol [flags] <symbol>

   Search through libraries to find which defines a symbol.
   Will prefer static over shared libraries.
   
Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local OPTION_SED=""

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            shift
            break
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -lt 1 ] && usage "missing argument"

   local symbol="$1"

   shift 1

   [ $# -ne 0 ] && usage "superflous arguments \"$*\"" 

   local escaped_symbol

   r_escaped_sed_pattern "${symbol}"
   escaped_symbol="${RVAL}"

   if [ -z "${escaped_symbol}" ]
   then
      usage "Unusable symbol \"${symbol}\""
   fi

   LD_SEARCHPATH="${LD_SEARCHPATH:-dependency/lib:addiction/lib}"

   shell_disable_pipefail

   local i
   local j
   local match

   # quickly hacked together so far
   match='NO'
   IFS=":" ; shell_disable_glob
   for i in ${LD_SEARCHPATH}
   do
      IFS=$'\n'
      for j in `rexekutor find "$i" -type f -name "lib*.a" -print | sort -f`
      do
         IFS="${DEFAULT_IFS}"
         if rexekutor nm "$j" | grep -E -q "[A-T] ${escaped_symbol}\$"
         then
            printf "%s\n" "$j: $symbol"
            match="YES"
            [ "${OPTION_ALL}" != 'YES' ] && return
         fi
      done
      IFS=":"
      [ "${match}" = 'YES' -a "${OPTION_ALL}" != 'YES' ] && retun
   done

   if [ "${match}" = 'NO' -o "${OPTION_ALL}" = 'YES' ]
   then
      IFS=":" ; shell_disable_glob
      for i in ${LD_SEARCHPATH}
      do
         IFS=$'\n'
         for j in `rexekutor find "$i" -type f -name "lib*.so.*" -print | sort -f`
         do
            IFS="${DEFAULT_IFS}"
            if rexekutor nm "$j" | grep -E -q "[A-T] ${escaped_symbol}\$"
            then
               printf "%s\n" "$j: $symbol"
               match="YES"
               [ "${OPTION_ALL}" != 'YES' ] && break
            fi
         done
         IFS=":"
         [ "${match}" = 'YES' -a "${OPTION_ALL}" != 'YES' ] && break
      done
   fi
}

call_with_flags "main" "${MULLE_REPLACE_FLAGS}" "$@"
