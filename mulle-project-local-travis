#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_LOCAL_TRAVIS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####

MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f              : force operation"
   echo "   -e              : expose current MULLE_FETCH_SEARCH_PATH to docker"
   echo "   -i386           : run docker in 32 bit if available"
   echo "   --no-source-env : do not load mulle-sde environment"
   echo "   --travis        : take travis.d slow path, before_install and script"
   echo "   --fast          : take travis.d fast path, script only"
   echo "   --sde <dir>     : path to sde parent folder, to upgrade sde tools"
   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage \
                "           : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-local-travis [flags]

   Works in conjunction with the mulle-objc-developer travis docker.
   Runs a local instance of travis in docker, sort of.

   Use --no-source-env if you have no mulle-sde project, but a compatible
   .travis.d folder nonetheless.

Example:
   Run with MULLE_FETCH_SEARCH_PATH expose (readonly) to docker,
   install current mulle-sde from "/home/src/srcS":

   mulle-project-local-travis -e --sde /home/src/srcS

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local OPTION_UPGRADE_SDE_PATH=
   local OPTION_SOURCE_ENV='YES'
   local OPTION_EXPOSE_FETCH_PATH='NO'
   local OPTION_FAST='YES'
   local OPTION_SHELL='YES'
   local OPTION_SUFFIX=
   local project_dir

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --x86_64)
            OPTION_SUFFIX=
         ;;

         --i386)
            OPTION_SUFFIX="-32"
         ;;

         --source-env)
            OPTION_SOURCE_ENV='YES'
         ;;

         --no-source-env)
            OPTION_SOURCE_ENV='NO'
         ;;

         --shell)
            OPTION_SHELL='YES'
         ;;

         --no-shell)
            OPTION_SHELL='NO'
         ;;

         --travis-fast|--fast)
            OPTION_FAST='YES'
         ;;

         --travis|--slow)
            OPTION_FAST='NO'
         ;;

         --sde)
            [ $# -eq 1 ] && usage "Missing $1 argument"
            shift

            OPTION_UPGRADE_SDE_PATH="$1"
         ;;

         -e|--expose-fetch-search-path)
            OPTION_EXPOSE_FETCH_PATH='YES'
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   project_dir="`mulle-sde project-dir`"
   if [ ! -z "${project_dir}" ]
   then
      rexekutor cd "${project_dir}" || exit 1
   fi

   [ ! -d ".travis.d" ] && fail "The project lacks a .travis.d folder (mulle-sde/travis extension is not installed)"

   local cmd

   case "${MULLE_UNAME}" in
      darwin)
      ;;

      *)
         cmd="sudo "
      ;;
   esac

   r_concat "${cmd}" "docker run -i -t -h \"travis-ci.local\""
   cmd="${RVAL}"

   cmd="${cmd} --volume \"${PWD}:/mnt/project:ro\""

   #
   # map our local searchpath into docker container
   #
   if [ "${OPTION_EXPOSE_FETCH_PATH}" = 'YES' ]
   then
      if [ -z "${MULLE_FETCH_SEARCH_PATH}" ]
      then
         if [ -z "${project_dir}" ]
         then
            fail "There is no mulle-sde project in \"${PWD#${MULLE_USER_PWD}/}\" and MULLE_FETCH_SEARCH_PATH is undefined"
         fi
         MULLE_FETCH_SEARCH_PATH="`mulle-env -c env | sed -n 's/^MULLE_FETCH_SEARCH_PATH=\(.*\)/\1/p'`"
      fi

      local component
      local name

      IFS=':'
      for component in ${MULLE_FETCH_SEARCH_PATH}
      do
         IFS="${DEFAULT_IFS}"
         name="`"${UUIDGEN:-uuidgen}" `"
         if [ -d "${component}" ]
         then
            cmd="${cmd} --volume \"${component}:/mnt/search/${name}:ro\""
         fi
      done
      IFS="${DEFAULT_IFS}"
   fi

   if [ ! -z "${OPTION_UPGRADE_SDE_PATH}" ]
   then
      cmd="${cmd} --volume \"${OPTION_UPGRADE_SDE_PATH}:/mnt/sde:ro\""
   fi

   # end of flags

   cmd="${cmd} travis-ci-local${OPTION_SUFFIX}"

   cmd="${cmd} ${MULLE_TECHNICAL_FLAGS}"

   if [ "${OPTION_FAST}" = 'YES' ]
   then
      cmd="${cmd} --travis-fast"
   else
      cmd="${cmd} --travis"
   fi

   if [ "${OPTION_SOURCE_ENV}" = 'YES' ]
   then
      cmd="${cmd} --source-env"
   else
      cmd="${cmd} --no-source-env"
   fi

   if [ "${OPTION_SHELL}" = 'YES' ]
   then
      cmd="${cmd} --shell"
   else
      cmd="${cmd} --no-shell"
   fi

   eval_exekutor "${cmd}"
}


########
###
### INIT - You usually won't edit code below
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env (${PWD}})" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   shell_enable_pipefail
   shell_enable_extglob

   call_main "${MULLE_PROJECT_LOCAL_TRAVIS_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
