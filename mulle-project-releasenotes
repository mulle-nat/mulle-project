#! /usr/bin/env bash
#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage: mulle-project-releasenotes [flags] [releasenotes]

   Emit markup releasenotes for the current version. If no version is given,
   mulle-project-version is used to determine the current version.

   All comments from the last tag till HEAD will be collected.
   All comment lines starting with a '*' are included in the release notes.

Flags:
   -a                       : prepend notes to first releasenote
   -f                       : overwrite existing releasenotes for version
   --all                    : dump all releasenotes from the beginning
   --commit                 : git commit --amend --no-edit releasenotes
   --default-message <text> : text to use,if there are no suitable git comments
   --filter <executable>    : use something else than egrep to filter comments
   --first-patch-zero       : consider patch 0 to be the first minor commit
   --grep <arguments>       : specify egrep arguments (hackish)
   --input <file>           : file to prepend comments to
   --message <text>         : message to use instead of git comments
   --missing                : emit all missing comments, not just from last tag
   --output <file>          : where to output the releasenotes (- for stdout)
   --tag <tag>              : git tag where to collect comments from
   --unfiltered             : don't filter git commit comments
   --version <version>      : specify version for releasenotes
EOF
   exit 1
}


compute_markers()
{
   log_entry "compute_markers" "$@"

   local version="$1"

   local major
   local minor
   local patch

   get_major_minor_patch "${version}"

   if [ "${patch}" -eq "${OPTION_FIRST_PATCH}" ]
   then
      if [ "${minor}" -eq 0 ]
      then
         echo "#"
      else
         echo "##"
      fi
   else
      echo "###"
   fi
}


filter_releasenotes()
{
   log_entry "filter_releasenotes" "$@"

   sed -n 's/'${RELEASENOTE_GREP}'\(.*\)/\1/p'
}


get_releasenote_commits()
{
   log_entry "get_releasenote_commits" "$@"

   if [ "${OPTION_ALL}" = 'YES' ]
   then
      git_commits_from_start
      return
   fi

   local start

   start="${OPTION_TAG}"

   if [ "${OPTION_MISSING}" = 'YES' ]
   then
      if [ "${OPTION_INPUT}" = "-" ]
      then
         fail "no input specified"
      fi

      if [ ! -z "${start}" ]
      then
         fail "missing and start specified at same time"
      fi

      start="`get_latest_releasenote_version "${OPTION_INPUT}"`"
      log_debug "latest releasenote version is \"${start}\""
   fi

   if [ -z "${start}" ]
   then
      start="`git_last_tag`"
      log_debug "last tag is \"${start}\""
      if [ -z "${start}" ]
      then
         start="`git_any_first_commit`"
         log_debug "any first commit is \"${start}\""
      fi
   fi

   log_debug "start is \"${start}\""

   git_commits_from_tag "${start}"
}


determine_message()
{
   log_entry "determine_message" "$@"

   local prefix="$1"
   local defaultmessage="$2"

   local message
   local commits

   commits="`get_releasenote_commits`"
   log_debug "Commits: ${commits}"

   message="`"${RELEASENOTE_FILTER}" <<< "${commits}"`"

   if [ -z "${message}" ]
   then
       message="${defaultmessage}"
   fi

   #
   # now prefix
   #
   if [ ! -z "${prefix}" ]
   then
      local pattern
         r_escaped_sed_pattern "${prefix}"
      pattern="${RVAL}"

      message="`sed "s/^/${pattern}/" <<< "${message}"`"
   fi

   echo "${message}"
}


markdown_escape_message()
{
   log_entry "markdown_escape_message" "$@"

   #
   # envelope underscore words as backticks
   # also envelope lozenges
   #
   sed -e 's/\([^ ]*_[^ _]*\)/`\1`/g' \
       -e 's/\(<[^<>]*>\)/`\1`/g'
}


emit_releasenotes()
{
   log_entry "emit_releasenotes" "$@"

   local version="$1"
   local markers="$2"
   local prefix="$3"
   local message="$4"
   local defaultmessage="$5"

   if [ -z "${message}" ]
   then
      message="`determine_message "${prefix}" "${defaultmessage}"`" || exit 1
   fi

   if [ "${OPTION_MD_ESCAPE}" = 'YES' ]
   then
      message="`markdown_escape_message <<< "${message}"`"
   fi

   exekutor cat <<EOF
${markers} ${version}

${message}
EOF
}


copy_without_first_entry()
{
   log_entry "copy_without_first_entry" "$@"

   local header="$1"

   # remove old comments for same version
   local markers
   local state
   local line

   markers="`sed 's/^\(#+\).*/\1/' <<< "${header}"`"

   state="start"
   while IFS=$'\n' read -r line
   do
      case "${state}" in
         start)
            state="search"
         ;;

         search)
            if egrep -s "^${markers} *" <<< "${line}"
            then
               state="copy"
               exekutor echo "${line}"
            fi
         ;;

         copy)
            exekutor echo "${line}"
         ;;
      esac
   done
}


copy_without_first_line()
{
   log_entry "copy_without_first_line" "$@"

   # also remove a first empty line if present

   sed '1d' | sed '/./,$!d'
}


emit_prepended_notes_to_file()
{
   log_entry "emit_prepended_notes_to_file" "$@"

   local markers="$1"
   local notes="$2"
   local tmpfile="$3"
   local edited_header="$4"

   cat <<EOF
${notes}
EOF

   if [ "${edited_header}" = 'NO' -o "${OPTION_APPEND}" = 'NO' ]
   then
      echo

      case "${markers}" in
         "###"*)
         ;;

         *)
            echo
         ;;
      esac
   fi

   cat "${tmpfile}"
}


get_latest_releasenote_version()
{
   log_entry "get_latest_releasenote_version" "$@"

   local filename

   if [ ! -f "${filename}" ]
   then
      return 1
   fi

   egrep -v '^[[:space:]]*$' "${filename}" | \
      head -1 | \
      sed -n 's/^#*[[:space:]]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/'
}


merged_releasenotes()
{
   log_entry "merged_releasenotes" "$@"

   local markers="$1"
   local notes="$2"
   local version="$3"

   local old_header
   local new_header
   local edited_header

   local tmpfile

   #
   # to be able to rerun this command, snip off
   # previously generated notes
   #
   if [ "${OPTION_INPUT}" = "-" ]
   then
      old_header="`head -1 | sed 's/^#*[[:space:]]*//'`"
   else
      if [ ! -f "${OPTION_INPUT}" ]
      then
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
         then
            fail "Input file \"${OPTION_INPUT}\" not found"
         fi
         OPTION_APPEND='NO'
      else
         old_header="`head -1 "${OPTION_INPUT}" | sed 's/^#*[[:space:]]*//'`"
      fi
   fi

   new_header="`head -1 <<< "${notes}" | sed 's/^#*[[:space:]]*//'`"

   tmpfile="`mktemp "tmp.XXXXXXXX"`"
   if [ "${old_header}" = "${new_header}" ]
   then
      if [ "${OPTION_APPEND}" = 'YES' ]
      then
         if [ "${OPTION_INPUT}" = "-" ]
         then
            copy_without_first_line "${old_header}" > "${tmpfile}" || exit 1
         else
            copy_without_first_line "${old_header}" < "${OPTION_INPUT}" > "${tmpfile}" || exit 1
         fi
      else
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'NO' ]
         then
            rm "${tmpfile}"
            fail "Releasenotes already contain a leading entry for \"${version}\""
         fi

         if [ "${OPTION_INPUT}" = "-" ]
         then
            copy_without_first_entry "${old_header}" > "${tmpfile}" || exit 1
         else
            copy_without_first_entry "${old_header}" < "${OPTION_INPUT}" > "${tmpfile}" || exit 1
         fi
      fi
      edited_header='YES'
   else
      exekutor cp "${OPTION_INPUT}" "${tmpfile}" || exit 1
      edited_header='YES'
   fi

   emit_prepended_notes_to_file "${markers}" "${notes}" "${tmpfile}" "${edited_header}"

   if [ "${OPTION_KEEP_TMP}" = 'NO' ]
   then
      exekutor rm "${tmpfile}"
   fi
}


main()
{
   local start

   local directory

   local OPTION_APPEND='NO'
   local OPTION_DEFAULT_MESSAGE="Various small improvements"
   local OPTION_FIRST_PATCH="0"
   local MULLE_FLAG_MAGNUM_FORCE='NO'
   local OPTION_COMMIT='NO'
   local OPTION_INPUT=""
   local OPTION_ADD_U='NO'
   local OPTION_KEEP_TMP='NO'
   local OPTION_MESSAGE=""
   local OPTION_OUTPUT=""
   local OPTION_PREFIX="* "
   local OPTION_TAG=""
   local OPTION_COMMITFLAGS="--amend --no-edit"
   local OPTION_ALL
   local OPTION_MD_ESCAPE='YES'

   local custom_output='NO'

   if [ -z "${RELEASENOTE_FILTER}" ]
   then
      RELEASENOTE_FILTER=filter_releasenotes
   fi

   if [ -z "${RELEASENOTE_GREP}" ]
   then
      RELEASENOTE_GREP='^[[:space:]]*\*[[:space:]]*'
   fi

   if [ -f ".first_patch" ]
   then
      OPTION_FIRST_PATCH="`cat ".first_patch"`"
   fi

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         ++)
            OPTION_COMMIT='YES'
            OPTION_INPUT="RELEASENOTES.md"
            OPTION_OUTPUT="RELEASENOTES.md"
            OPTION_ADD_U='YES'
         ;;

         -a|--append)
            OPTION_APPEND='YES'
         ;;

         --all)
            OPTION_ALL='YES'
         ;;

         -c|--commit)
            OPTION_COMMIT='YES'
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE="YES"
         ;;

         --filter)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            RELEASENOTE_FILTER="$1"
         ;;

         -g|--grep)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            RELEASENOTE_GREP="$1"
         ;;

         -m|--message)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_MESSAGE="$1"
         ;;

         -dm|--default_message)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_DEFAULT_MESSAGE="$1"
         ;;

         --keep-tmp)
            OPTION_KEEP_TMP='YES'
         ;;

         -i|--input)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_INPUT="$1"
         ;;

         -o|--output)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_OUTPUT="$1"
         ;;

         -u|--unfiltered)
            RELEASENOTE_GREP='^'  # should match everything
         ;;

         --missing)
            OPTION_MISSING='YES'
         ;;

         --no-md-escape)
            OPTION_MD_ESCAPE='NO'
         ;;

         --prefix)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_PREFIX="$1"
         ;;

         --tag)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_TAG="$1"
         ;;

         --version)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            VERSION="$1"
         ;;

         -0|--first-patch-zero)
            OPTION_FIRST_PATCH="0"
         ;;

         -1|--first-patch-one)
            OPTION_FIRST_PATCH="1"
         ;;

         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   case $# in
      0)
         if [ -z "${OPTION_OUTPUT}" ]
         then
            OPTION_OUTPUT="-"
         fi
      ;;

      1)
         if [ -z "${OPTION_INPUT}" ]
         then
            OPTION_INPUT="$1"
         fi

         if [ -z "${OPTION_OUTPUT}" ]
         then
            OPTION_OUTPUT="$1"
         fi
      ;;

      *)
         usage
      ;;
   esac

   if [ -z "${OPTION_OUTPUT}" ]
   then
      fail "output must not be empty, use - for stdout"
   fi

   if [ -z "${VERSION}" ]
   then
      VERSION="`rexekutor mulle-project-version --no-tag-warning`" || fail "Could not figure out current version"
   fi

   if [ "${OPTION_COMMIT}" = 'YES' ]
   then
      if [ "${OPTION_ADD_U}" = 'YES' ]
      then
         exekutor git add -u
         if ! git diff-files --ignore-submodules -- > /dev/null
         then
            fail "git repository is not in a pristine enough state, can not commit"
         fi
      else
         if [ ! -z "`rexekutor git status -s --untracked-files=no`" ]
         then
            fail "git repository is not in a pristine state, can not commit"
         fi
      fi
   fi

   local notes
   local markers

   log_fluff "Version: ${VERSION}"
   markers="`compute_markers "${VERSION}"`"

   log_fluff "Markers: ${markers}"
   notes="`emit_releasenotes "${VERSION}" \
                             "${markers}" \
                             "${OPTION_PREFIX}" \
                             "${OPTION_MESSAGE}" \
                             "${OPTION_DEFAULT_MESSAGE}" `"

   case "${OPTION_INPUT}" in
      ''|'-')
      ;;

      *)
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" = "YES" -a  ! -f "${OPTION_INPUT}" ]
         then
            OPTION_INPUT=''
         fi
      ;;
   esac

   #
   # if no file is given, we don't merge
   #
   if [ -z "${OPTION_INPUT}" ]
   then
      if [ "${OPTION_OUTPUT}" = "-" ]
      then
         exekutor echo "${notes}"
      else
         redirect_exekutor "${OPTION_OUTPUT}" echo "${notes}"  || exit 1
      fi
   else
      local result

      result="`merged_releasenotes "${markers}" "${notes}" "${VERSION}"`" || exit 1

      if [ "${OPTION_OUTPUT}" = "-" ]
      then
         exekutor echo "${result}"
      else
         redirect_exekutor "${OPTION_OUTPUT}" echo "${result}" || exit 1
      fi
   fi

   if [ "${OPTION_COMMIT}" = 'YES' ]
   then
      changed="`git ls-files -m "${OPTION_OUTPUT}"`"
      if [ ! -z "${changed}" ]
      then
         if [ "${OPTION_ADD_U}" = 'YES' ]
         then
            exekutor git commit ${OPTION_COMMITFLAGS}
         else
            exekutor git commit ${OPTION_COMMITFLAGS} "${OPTION_OUTPUT}"
         fi
      fi
   fi
}


########
###
### INIT
###
_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions are not installed" >&2 && \
      exit 1
   fi

   # shellcheck source=../mulle-bashfunctions/src/mulle-bashfunctions.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh"

   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-git.sh" || exit 1
   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   set -o pipefail
}


###
### INIT
###
########


_init "$@" # needs params
main "$@"
