#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_RELEASENOTES_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   mulle-project-releasenotes [flags] [releasenotes]

   Emit markup releasenotes for the current version. If no version is given,
   mulle-project-version is used to determine the current version.

   All comments from the last tag till HEAD will be collected.
   All comment lines starting with a '*' are included in the release notes.

   mulle-project-releasenotes has been written for incremental updates, that
   do not destroy edits. To recreate everything from scratch, use the
   --scratch option.

   mulle-project-releasenotes only recognizes tags in major.minor.[patch]
   format, without any prefix or suffix.

Examples:
   Create initial RELEASENOTES.md with:

      mulle-project-releasenotes --all > RELEASENOTES.md

Flags:
   -a                       : prepend notes to first releasenote
   -f                       : overwrite existing releasenotes for version
   --all                    : dump all releasenotes from the beginning in one
   --commit                 : git commit --amend --no-edit releasenotes
   --default-message <text> : text to use,if there are no suitable git comments
   --filter <executable>    : use something else than egrep to filter comments
   --first-patch-zero       : consider patch 0 to be the first minor commit
   --grep <arguments>       : specify egrep arguments (hackish)
   --input <file>           : file to prepend comments to
   --message <text>         : message to use instead of git comments
   --missing                : emit all missing comments, not just from last tag
   --output <file>          : where to output the releasenotes (- for stdout)
   --print-latest-version   : prints latest version in releasenotes then exits
   --scratch                : dump all releasenotes from the beginning in many
   --tag <tag>              : last tag to collect comments from
   --unfiltered             : don't filter git commit comments
   --version <version>      : specify version for releasenotes
EOF
   exit 1
}


r_compute_markers()
{
   log_entry "r_compute_markers" "$@"

   local version="$1"

   local major
   local minor
   local patch

   major="`cut -d'.' -f 1 <<< "${version}"`"
   minor="`cut -d'.' -f 2 <<< "${version}"`"
   patch="`cut -d'.' -f 3 <<< "${version}"`"

   if [ "${patch:-0}" -eq "${OPTION_FIRST_PATCH}" ]
   then
      if [ "${minor:-0}" -eq 0 ]
      then
         RVAL="#"
      else
         RVAL="##"
      fi
   else
      case "${version}" in
         *\.*\.*\.*\.*)
            RVAL="####"
         ;;

         *)
            RVAL="###"
         ;;
      esac
   fi
}


filter_releasenotes()
{
   log_entry "filter_releasenotes" "$@"

   sed -n 's/'${RELEASENOTE_GREP}'\(.*\)/\1/p'
}


# emits most recent one first
git_version_tags()
{
   log_entry "git_version_tags" "$@"

   rexekutor git tag --sort=committerdate \
   | egrep -v '[a-zA-Z/!"$%&()=#;,-]' \
   | sed -n '1!G;h;$p'
}


get_releasenote_commits()
{
   log_entry "get_releasenote_commits" "$@"

   if [ "${OPTION_ALL}" = 'YES' ]
   then
      project::git::commits_from_start
      return
   fi

   local start

   start="${OPTION_TAG}"

   if [ "${OPTION_MISSING}" = 'YES' ]
   then
      if [ "${OPTION_INPUT}" = "-" ]
      then
         fail "no input specified"
      fi

      if [ ! -z "${start}" ]
      then
         fail "missing and start specified at same time"
      fi

      start="`get_latest_releasenote_version "${OPTION_INPUT}"`"
      log_debug "latest releasenote version is \"${start}\""
   fi

   if [ -z "${start}" ]
   then
      start="`git_version_tags | head -1`"

      log_debug "last tag is \"${start}\""
      if [ -z "${start}" ]
      then
         start="`project::git::any_first_commit`"
         log_debug "any first commit is \"${start}\""
      fi
   fi

   log_debug "start is \"${start}\""

   project::git::commits_from_tag "${start}"
}


determine_message()
{
   log_entry "determine_message" "$@"

   local prefix="$1"
   local defaultmessage="$2"

   local message
   local commits

   commits="`get_releasenote_commits`"
   log_debug "Commits: ${commits}"

   message="`"${RELEASENOTE_FILTER}" <<< "${commits}"`"
   log_debug "message: ${markers}"

   if [ -z "${message}" ]
   then
       message="${defaultmessage}"
   fi

   #
   # now prefix
   #
   if [ ! -z "${prefix}" ]
   then
      local pattern
         r_escaped_sed_pattern "${prefix}"
      pattern="${RVAL}"

      message="`sed "s/^/${pattern}/" <<< "${message}"`"
   fi

   printf "%s\n" "${message}"
}


markdown_escape_message()
{
   log_entry "markdown_escape_message" "$@"

   #
   # envelope underscore words as backticks
   # also envelope lozenges
   #
   sed -e 's/\([^ ]*_[^ _]*\)/`\1`/g' \
       -e 's/\(<[^<>]*>\)/`\1`/g'
}


emit_releasenotes()
{
   log_entry "emit_releasenotes" "$@"

   local version="$1"
   local markers="$2"
   local prefix="$3"
   local message="$4"
   local defaultmessage="$5"

   if [ -z "${message}" ]
   then
      message="`determine_message "${prefix}" "${defaultmessage}"`" || exit 1
   fi

   if [ "${OPTION_MD_ESCAPE}" = 'YES' ]
   then
      message="`markdown_escape_message <<< "${message}"`"
   fi

   exekutor cat <<EOF
${markers} ${version}

${message}
EOF
}


copy_without_first_entry()
{
   log_entry "copy_without_first_entry" "$@"

   local header="$1"

   # remove old comments for same version
   local markers
   local state
   local line

   markers="`sed 's/^\(#+\).*/\1/' <<< "${header}"`"
   log_debug "markers: ${markers}"

   state="start"
   while IFS=$'\n' read -r line
   do
      case "${state}" in
         start)
            state="search"
         ;;

         search)
            if egrep -s "^${markers} *" <<< "${line}"
            then
               state="copy"
               exekutor printf "%s\n" "${line}"
            fi
         ;;

         copy)
            exekutor printf "%s\n" "${line}"
         ;;
      esac
   done
}


copy_without_first_line()
{
   log_entry "copy_without_first_line" "$@"

   # also remove a first empty line if present

   sed '1d' | sed '/./,$!d'
}


emit_prepended_notes_to_file()
{
   log_entry "emit_prepended_notes_to_file" "$@"

   local markers="$1"
   local notes="$2"
   local tmpfile="$3"
   local edited_header="$4"

   cat <<EOF
${notes}
EOF

   if [ "${edited_header}" = 'NO' -o "${OPTION_APPEND}" = 'NO' ]
   then
      echo

      case "${markers}" in
         "###"*)
         ;;

         *)
            echo
         ;;
      esac
   fi

   cat "${tmpfile}"
}


get_latest_releasenote_version()
{
   log_entry "get_latest_releasenote_version" "$@"

   local filename="$1"

   if [ ! -f "${filename}" ]
   then
      return 1
   fi

   egrep -v '^[[:space:]]*$' "${filename}" | \
      head -1 | \
      sed -n 's/^#*[[:space:]]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/p'
}


merged_releasenotes()
{
   log_entry "merged_releasenotes" "$@"

   local markers="$1"
   local notes="$2"
   local version="$3"

   local old_header
   local new_header
   local edited_header

   local tmpfile

   #
   # to be able to rerun this command, snip off
   # previously generated notes
   #
   if [ "${OPTION_INPUT}" = "-" ]
   then
      old_header="`head -1 | sed 's/^#*[[:space:]]*//'`"
   else
      if [ ! -f "${OPTION_INPUT}" ]
      then
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
         then
            fail "Input file \"${OPTION_INPUT}\" not found"
         fi
         OPTION_APPEND='NO'
      else
         old_header="`head -1 "${OPTION_INPUT}" | sed 's/^#*[[:space:]]*//'`"
      fi
   fi

   new_header="`head -1 <<< "${notes}" | sed 's/^#*[[:space:]]*//'`"

   tmpfile="`mktemp "tmp.XXXXXXXX"`"
   if [ "${old_header}" = "${new_header}" ]
   then
      if [ "${OPTION_APPEND}" = 'YES' ]
      then
         if [ "${OPTION_INPUT}" = "-" ]
         then
            copy_without_first_line "${old_header}" > "${tmpfile}" || exit 1
         else
            copy_without_first_line "${old_header}" < "${OPTION_INPUT}" > "${tmpfile}" || exit 1
         fi
      else
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'NO' ]
         then
            rm "${tmpfile}"
            log_info "Releasenotes already contain a leading entry for \"${version}\""
            return 2
         fi

         if [ "${OPTION_INPUT}" = "-" ]
         then
            copy_without_first_entry "${old_header}" > "${tmpfile}" || exit 1
         else
            copy_without_first_entry "${old_header}" < "${OPTION_INPUT}" > "${tmpfile}" || exit 1
         fi
      fi
      edited_header='YES'
   else
      exekutor cp "${OPTION_INPUT}" "${tmpfile}" || exit 1
      edited_header='YES'
   fi

   emit_prepended_notes_to_file "${markers}" "${notes}" "${tmpfile}" "${edited_header}"

   if [ "${OPTION_KEEP_TMP}" = 'NO' ]
   then
      exekutor rm "${tmpfile}"
   fi
}


git_log_get_tags_and_message()
{
   log_entry "git_log_get_tags_and_message" "$@"

   rexekutor git log --pretty='format:##%d
%B' "$@"
}


parse_git_tags_in_line()
{
   log_entry "parse_git_tags_in_line" "$@"

   local line="$1"

   local s

   r_trim_whitespace "${line}"
   s="${RVAL}"

   # get past ( if any
   if [ "${s:0:1}" != '(' ]
   then
      return 0
   fi
   s="${s:1}"

   while [ ! -z "${s}" ]
   do
      # remove front whitespace
      s="${s#"${s%%[![:space:]]*}"}"
      case "${s}" in
         # problem: tags can contain ','
         # we can't solve this easily
         'tag:'*)
            s="${s#tag:}"
            s="${s#"${s%%[![:space:]]*}"}"
            echo "${s%%[,)]*}"
            s="${s%*[,)]}" ## will consume final ')'
         ;;

         *,*)
            s="${s#*,}"
         ;;

         *)
            return 0
         ;;
      esac
   done
}


scratch_dump_stdin()
{
   log_entry "scratch_dump_stdin" "$@"

   local state
   local line
   local marks

   local collect

   IFS=$'\n'
   while :
   do
      if ! read -r line
      then
         IFS="${DEFAULT_IFS}"
         if [ ! -z "${collect}" ]
         then
            echo "${collect}"
         fi
         return
      fi

      case "${line}" in
         \#\#*)
         ;;

         \**)
            if [ "${OPTION_MD_ESCAPE}" = 'YES' ]
            then
               markdown_escape_message <<< "${line}"
            else
               echo "${line}"
            fi
            continue
         ;;

         ""|*)
            continue
         ;;
      esac

      local found
      local tags
      local tag

      found=
      tags="`parse_git_tags_in_line "${line:2}" `" || return 1
      for tag in ${tags}
      do
         case ${tag} in
            *-prerelease|*-latest)
            ;;

            [0-9]*)
               found="${tag}"
               break
            ;;
         esac
      done

      if [ -z "${state}" -a -z "${found}" ]
      then
         found="${version}"
      fi

      local markers

      if [ ! -z "${found}" ]
      then
         r_compute_markers "${found}"
         markers="${RVAL}"

         if [ ! -z "${state}" ]
         then
            echo
         fi
         echo "${markers} ${found}"
         echo
         state="${found}"
      fi
   done
}


scratch_dump()
{
   log_entry "scratch_dump" "$@"

   local version="$1"

   local text

   text="`git_log_get_tags_and_message `"

   scratch_dump_stdin <<< "${text}"
}


main()
{
   local OPTION_APPEND='NO'
   local OPTION_DEFAULT_MESSAGE="Various small improvements"
   local OPTION_FIRST_PATCH="0"
   local MULLE_FLAG_MAGNUM_FORCE='NO'
   local OPTION_COMMIT='NO'
   local OPTION_INPUT=""
   local OPTION_ADD_U='NO'
   local OPTION_KEEP_TMP='NO'
   local OPTION_MESSAGE=""
   local OPTION_OUTPUT=""
   local OPTION_PREFIX="* "
   local OPTION_TAG=""
   local OPTION_COMMITFLAGS="--amend --no-edit"
   local OPTION_ALL
   local OPTION_SCRATCH
   local OPTION_MD_ESCAPE='YES'
   local OPTION_PRINT_LATEST_VERSION='NO'

   local custom_output='NO'

   if [ -z "${RELEASENOTE_FILTER}" ]
   then
      RELEASENOTE_FILTER=filter_releasenotes
   fi

   if [ -z "${RELEASENOTE_GREP}" ]
   then
      RELEASENOTE_GREP='^[[:space:]]*\*[[:space:]]*'
   fi

   if [ -f ".first_patch" ]
   then
      OPTION_FIRST_PATCH="`cat ".first_patch"`"
   fi

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         ++)
            OPTION_COMMIT='YES'
            OPTION_INPUT="RELEASENOTES.md"
            OPTION_OUTPUT="RELEASENOTES.md"
            OPTION_ADD_U='YES'
         ;;

         -0|--first-patch-zero)
            OPTION_FIRST_PATCH="0"
         ;;

         -1|--first-patch-one)
            OPTION_FIRST_PATCH="1"
         ;;

         -a|--append)
            OPTION_APPEND='YES'
         ;;

         --all)
            OPTION_ALL='YES'
         ;;

         --scratch)
            OPTION_SCRATCH='YES'
         ;;

         -c|--commit)
            OPTION_COMMIT='YES'
         ;;

         -dm|--default_message)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_DEFAULT_MESSAGE="$1"
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE="YES"
         ;;

         --filter)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            RELEASENOTE_FILTER="$1"
         ;;

         -g|--grep)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            RELEASENOTE_GREP="$1"
         ;;

         -i|--input)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_INPUT="$1"
         ;;

         --keep-tmp)
            OPTION_KEEP_TMP='YES'
         ;;

         -m|--message)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_MESSAGE="$1"
         ;;

         --missing)
            OPTION_MISSING='YES'
         ;;

         --no-md-escape)
            OPTION_MD_ESCAPE='NO'
         ;;

         -o|--output)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_OUTPUT="$1"
         ;;

         --prefix)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_PREFIX="$1"
         ;;

         --print-latest-version)
            shift
            OPTION_INPUT="$1"
            get_latest_releasenote_version "$1"
            return $?
         ;;

         --tag)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            OPTION_TAG="$1"
         ;;

         -u|--unfiltered)
            RELEASENOTE_GREP='^'  # should match everything
         ;;

         --version)
            [ $# -eq 1 ] && usage "missing argument for \"$1\""
            shift

            VERSION="$1"
         ;;

         -w|--write)
            OPTION_INPUT="RELEASENOTES.md"
            OPTION_OUTPUT="RELEASENOTES.md"
         ;;

         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   include "project::git"
   include "project::version"

   case $# in
      0)
         if [ -z "${OPTION_OUTPUT}" ]
         then
            OPTION_OUTPUT="-"
         fi
      ;;

      1)
         if [ -z "${OPTION_INPUT}" ]
         then
            OPTION_INPUT="$1"
         fi

         if [ -z "${OPTION_OUTPUT}" ]
         then
            OPTION_OUTPUT="$1"
         fi
      ;;

      *)
         usage
      ;;
   esac

   if [ -z "${OPTION_OUTPUT}" ]
   then
      fail "Output must not be empty, use - for stdout"
   fi

   if [ -z "${VERSION}" ]
   then
      VERSION="`rexekutor mulle-project-version --no-tag-warning`" || fail "Could not figure out current version"
   fi

   if [ "${OPTION_COMMIT}" = 'YES' ]
   then
      if [ "${OPTION_ADD_U}" = 'YES' ]
      then
         exekutor git add -u
         if ! git diff-files --ignore-submodules -- > /dev/null
         then
            fail "git repository is not in a pristine enough state, can not commit"
         fi
      else
         if [ ! -z "`rexekutor git status -s --untracked-files=no`" ]
         then
            fail "git repository is not in a pristine state, can not commit"
         fi
      fi
   fi

   local notes

   if [ ! -z "${OPTION_SCRATCH}" ]
   then
      notes="`scratch_dump "${VERSION}"`" || return 1
   else
      local markers

      log_fluff "Version: ${VERSION}"
      r_compute_markers "${VERSION}"
      markers="${RVAL}"

      log_fluff "Markers: ${markers}"
      notes="`emit_releasenotes "${VERSION}" \
                                "${markers}" \
                                "${OPTION_PREFIX}" \
                                "${OPTION_MESSAGE}" \
                                "${OPTION_DEFAULT_MESSAGE}" `" || return 1
   fi

   case "${OPTION_INPUT}" in
      ''|'-')
      ;;

      *)
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" = "YES" -a  ! -f "${OPTION_INPUT}" ]
         then
            OPTION_INPUT=''
         fi
      ;;
   esac

   #
   # if no file is given, we don't merge
   #
   if [ -z "${OPTION_INPUT}" ]
   then
      if [ "${OPTION_OUTPUT}" = "-" ]
      then
         exekutor printf "%s\n" "${notes}"
      else
         redirect_exekutor "${OPTION_OUTPUT}" \
            printf "%s\n" "${notes}"  || return 1
      fi
   else
      local result
      local rval

      result="`merged_releasenotes "${markers}" "${notes}" "${VERSION}"`"
      rval=$?
      case $rval in
         0)
         ;;

         1)
            exit 1 # failure
         ;;

         2)
            return 0 # nothing new to write
         ;;
      esac

      if [ "${OPTION_OUTPUT}" = "-" ]
      then
         exekutor printf "%s\n" "${result}"
      else
         redirect_exekutor "${OPTION_OUTPUT}" \
            printf "%s\n" "${result}" || return 1
      fi
   fi

   if [ "${OPTION_COMMIT}" = 'YES' ]
   then
      changed="`rexekutor git ls-files -m "${OPTION_OUTPUT}"`"
      if [ ! -z "${changed}" ]
      then
         if [ "${OPTION_ADD_U}" = 'YES' ] # second OPTION_ADD_U stage
         then
            exekutor git commit ${OPTION_COMMITFLAGS}
         else
            if ! project::git::can_amend
            then
               fail "Automatic amend/commit not possible for tagged or already pushed commits"
            fi
            exekutor git commit ${OPTION_COMMITFLAGS} "${OPTION_OUTPUT}"
         fi
      fi
   fi
}



main "$@"
