#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VERSION=<|MULLE_BASHFUNCTIONS_VERSION|>
# shellcheck shell=bash
#


[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_RESOLVE_SYMLINKS_TRACE}" = 'YES' ] \
&& set -x  \
&& : "$0" "$@"

### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.1"


### >> START OF mulle-bashfunctions-embed.sh >>
### << END OF mulle-bashfunctions-embed.sh <<


resolve_symlinks::print_flags()
{
   echo "   -f   : force operation"
   echo "   -r   : recursive operation"

   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
           ": "
}


resolve_symlinks::usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-resolve-symlinks [flags] <files>

   Resolve all symbolic links and replace with actual files. Sort of like
   a delayed copy on write. Though the script is very conservative in its
   approach to replace symlinks with files, interrupting it in the middle
   of the proceedings may lead to the loss of a symlink.

Flags:
EOF
   resolve_symlinks::print_flags | LC_ALL=C sort >&2

   exit 1
}


resolve_symlinks::resolve()
{
   log_entry "resolve_symlinks::resolve" "$@"

   local filename="$1"
   local recursive="${2:-NO}"

   [ -z "${filename}" ] && _internal_fail "filename is empty"

   local directory

   r_dirname "${filename}"
   directory="${RVAL}"

   local type
   local actualtype
   local resolved
   local tmpfile
   local tmpdir
   local files
   local file

   # can't use stat usefully, because it's locale based and return values
   # are probably OS specific
   r_file_type "${filename}"
   type="${RVAL}"

   case "${type}" in
      '')
         fail "${filename} does not exist"
      ;;

      'f')
         # already resolved
      ;;

      'F')
         r_resolve_symlinks "${filename}"
         r_simplified_absolutepath "${RVAL}"
         resolved="${RVAL}"

         if [ -z "${resolved}" ]
         then
            log_error "Symlink ${C_RESET_BOLD}${filename}${C_ERROR} can not be resolved"
            return 1
         fi

         # make it just that little more foolproof in case the cp
         # fails we can keep the symlink intact
         r_make_tmpname_in_dir_uuidgen "" "${directory}" "mprs"
         tmpfile="${RVAL}"

         exekutor cp -a "${resolved}" "${tmpfile}" && \
         exekutor rm "${filename}" && \
         exekutor mv "${tmpfile}" "${filename}"
      ;;


      'd')
         if [ "${recursive}" = 'YES' ]
         then
            files=`dir_list_files "${filename}"`
            .foreachline file in ${files}
            .do
               if ! resolve_symlinks::resolve "${file}" "${recursive}"
               then
                  return 1
               fi
            .done
            return
         fi
      ;;

      'D')
         r_resolve_symlinks "${filename}"
         r_simplified_absolutepath "${RVAL}"
         resolved="${RVAL}"

         if [ -z "${resolved}" ]
         then
            log_error "Symlink ${C_RESET_BOLD}${filename}${C_ERROR} can not be resolved"
            return 1
         fi

         r_make_tmpname_in_dir_uuidgen "" "${directory}" "mprs"
         tmpdir="${RVAL}"

         exekutor cp -Ra "${resolved}" "${tmpdir}" && \
         exekutor rm "${filename}" && \
         exekutor mv "${tmpdir}" "${filename}"
         if [ "${recursive}" = 'YES' ]
         then
            resolve_symlinks::resolve "${filename}" "${recursive}"
         fi
      ;;

      *)
         log_fluff "Ignore ${filename} because of type \"${type}\""
      ;;
   esac
}



resolve_symlinks::main()
{
   #
   # simple option/flag handling
   #
   local OPTION_VALUE
   local OPTION_RECURSIVE

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            resolve_symlinks::usage
         ;;

         -r|--recursive)
#            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
#            shift

            OPTION_RECURSIVE='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;


         -*)
            resolve_symlinks::usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -eq 0 ] && resolve_symlinks::usage "Missing arguments"

   local i

   for i in "$@"
   do
      resolve_symlinks::resolve "$i" "${OPTION_RECURSIVE}"
   done
}

#
# You can also use the function `call_with_flags`, which has been defined
# during mulle-boot. It lets you call 'resolve_symlinks::main'
# with MULLE_PROJECT_RESOLVE_SYMLINKS_FLAGS interposed.
#
# call_with_flags "resolve_symlinks::main" "${MULLE_PROJECT_RESOLVE_SYMLINKS_FLAGS}" "$@"

resolve_symlinks::main "$@"
