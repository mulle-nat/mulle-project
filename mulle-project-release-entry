#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_RELEASE_ENTRY_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi



print_flags()
{
   echo "   -f        : force operation"
   echo "   -m        : suppress output if there is only a patch change"
   echo "   -p <date> : use date as previous release date instead of tag"
   echo "   -b        : put ** around major change fields"
   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
                " : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-releaseentry [flags]

   Emit a markdown line with a hyperlink to the RELEASENOTES.md

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


convert_datestring_to_timestamp()
{
   date -d"$(sed -r 's#(.{4})(.{2})(.{2})(.{2})(.{2})#\1/\2/\3 \4:\5:#' <<< "${datestring}")" "+%s"
}


convert_date_to_timestamp()
{
   local year="$1"
   local month="$2"
   local day="$3"
   local hour="$4"
   local minute="$5"
   local second="$6"

   local datestring

   # this gets a timestamp of 0 with default values if on UTC, but
   # will change with timezone!
   printf -v datestring "%04d%02d%02d%02d%02d%02d" "${year:-1970}" \
                                                   "${month:-1}" \
                                                   "${day:-1}" \
                                                   "${hour:-0}" \
                                                   "${minute:-0}" \
                                                   "${second:-0}"

   date -d"$(sed -r 's#(.{4})(.{2})(.{2})(.{2})(.{2})#\1/\2/\3 \4:\5:#' <<< "${datestring}")" "+%s"
}


emit_line()
{
   local version="$1"
   local tag="$2"
   local marker="$3"

   local repo
   local user
   local dir

   dir="${PWD}"

   repo="`mulle-sde env get PROJECT_NAME 2> /dev/null`"
   if [ -z "${repo}" ]
   then
      r_basename "${dir}"
      repo="${RVAL}"
   fi

   r_dirname "${dir}"
   dir="${RVAL}"
   r_basename "${dir}"
   user="${RVAL}"

   case "${user}" in
      srcS)
         user="mulle-sde"
      ;;
   esac

   echo "| ${marker}[${repo}](//github.com/${user}/${repo}/RELEASENOTES.md)${marker} | ${marker}${version}${marker} | ${tag:--} |"
}


git_numeric_tags_sorted_by_time()
{
   log_entry git_numeric_tags_sorted_by_time "$@"

   rexekutor git tag --sort=committerdate \
   | grep -E '^[0-9]*\.[0-9]*\.[0-9]*$'
}


git_numeric_tags_in_timerange()
{
   log_entry git_numeric_tags_in_timerange "$@"

   local timestamp1="$1"
   local timestamp2="$2"

   local tags

   tags="`git_numeric_tags_sorted_by_time`"
   if [ -z "${timestamp1}" -a -z "${timestamp2}" ]
   then
      if [ ! -z "${tags}" ]
      then
         printf '%s\n' "${tags}"
      fi
      return
   fi

   local tag
   local timestamp

   while :
   do
      if ! read -r tag
      then
         break
      fi

      timestamp="`rexekutor git log -1 --format="%at" "${tag}"`"
      if [ ! -z "${timestamp1}" ] && [ "${timestamp}" -lt "${timestamp1}" ]
      then
         log_debug "tag \"${tag}\" with timestamp ${timestamp} is out of range ${timestamp1}-${timestamp2}"
         continue
      fi

      if [ ! -z "${timestamp2}" ] && [ "${timestamp}" -ge "${timestamp2}" ]
      then
         log_debug "tag \"${tag}\" with timestamp ${timestamp} is out of range ${timestamp1}-${timestamp2}"
         continue
      fi
      echo "${tag}"
   done <<< "${tags}"
}


run()
{
   log_entry run "$@"

   local timestamp1="$1"
   local timestamp2="$2"
   local suppress="$3"
   local boldmarker="$4"
   local boring_distance="$5"

   local version

   version="`mulle-project-version -s`"
   if [ -z "${version}" ]
   then
      fail "No project version found in \"${PWD#${MULLE_USER_PWD}/}\""
   fi

   #
   # get commit tagged as "latest" (assume its the old version and latest
   # has not been tagged yet)
   #
   local latest_commit

   latest_commit="`rexekutor git rev-list -n 1 latest -- 2> /dev/null`"
   if [ -z "${latest_commit}" ]
   then
      log_fluff "No \"latest\" commit found in \"${PWD#${MULLE_USER_PWD}/}\""
      emit_line "${version}" "" "${boldmarker}"
      return
   fi

   local version_commit

   #
   # if there is a commit for the version already, latest is probably boring
   # and version as well as its the latest. Guess last one from timestamp
   #
   version_commit="`rexekutor git rev-list -n 1 "${version}" -- 2> /dev/null`"

   local tag

   if [ ! -z "${version_commit}" ]
   then
      tag="`git_numeric_tags_in_timerange "${timestamp1}" "${timestamp2}" \
            | tail -1 `"
      tag="${tag:-???}"
   else
      tag="`rexekutor git tag -l --points-at "${latest_commit}" \
            | sort -r -n \
            | grep -E '^[0-9]*\.[0-9]*\.[0-9]*$' | head -1`"
   fi

   if [ "${suppress}" = 'YES' -o "${boldmarker}" = 'YES' ]
   then
      #
      # if somethings funny, lets just bold it
      # sanity check that version tag are parseable...
      #
      case "${version};${tag}" in
         *\.*\.*\;*\.*\.*)
            include "version"

            r_version_distance "${tag}" "${version}"
            if [ "$RVAL" -lt "${boring_distance}" ]
            then
               # check that both are reasonably valid tags
               log_fluff "Just a patch version distance ($RVAL) in \"${PWD#${MULLE_USER_PWD}/}\", skipping"
               return
            fi

            if [ "$RVAL" -lt 1048576 ]
            then
               boldmarker=""
            fi
         ;;
      esac
   fi
   emit_line "${version}" "${tag}" "${boldmarker}"
}


main()
{
   local OPTION_PREVIOUS_RELEASE_DATE
   local OPTION_SUPPRESS_ONLY_PATCH_CHANGES
   local OPTION_BOLD_MARKER
   local OPTION_BORING_DISTANCE=256

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -m|--suppress-only-patch-changes)
            OPTION_SUPPRESS_ONLY_PATCH_CHANGES='YES'
         ;;

         --boring-distance)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_BORING_DISTANCE="$1"
         ;;

         -b|--bold-marker)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_BOLD_MARKER="$1"
         ;;

         -p|--previous-release-date)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_PREVIOUS_RELEASE_DATE="$1"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   if [ -z "${OPTION_PREVIOUS_RELEASE_DATE}" ]
   then
      run "" \
          "" \
          "${OPTION_SUPPRESS_ONLY_PATCH_CHANGES}" \
          "${OPTION_BOLD_MARKER}"  \
          "${OPTION_BORING_DISTANCE}"
      return $?
   fi

   local timestamp1
   local timestamp2

   # remove timezone, date can't parse it
   OPTION_PREVIOUS_RELEASE_DATE="${OPTION_PREVIOUS_RELEASE_DATE%[+-][0-9][0-9][0-9][0-9]}"

   datestring="`date -d "${OPTION_PREVIOUS_RELEASE_DATE}" +'%Y%m%d%H%M%S' `"
   timestamp1="`convert_datestring_to_timestamp "${datestring}" `" || return 1

   # give it + 2days
   timestamp2=$(( timestamp1 + 7200 * 7 ))

   # we want to ignore commits after this timestamp
   run "" \
       "${timestamp2}" \
       "${OPTION_SUPPRESS_ONLY_PATCH_CHANGES}" \
       "${OPTION_BOLD_MARKER}" \
       "${OPTION_BORING_DISTANCE}"
}

call_with_flags "main" "${MULLE_PROJECT_RELEASE_ENTRY_FLAGS}" "$@"
