#!/bin/sh
#
# Create debian package on OS X
#

usage()
{
   cat <<EOF >&2
Usage:
   mulle-homebrew-debian [options]

   Produce debian packages for bash projects.

   Options:
      --root <path> : default is /usr
      --no-update   : don't execute did-update.sh in the taps directory
      --no-publish  : don't publish to tap
EOF
   exit 1
}


log_printf()
{
   if [ -z "${MULLE_EXEKUTOR_LOG_DEVICE}" ]
   then
      printf "$@" >&2
   else
      printf "$@" > "${MULLE_EXEKUTOR_LOG_DEVICE}"
   fi
}


log_info()
{
   if [ "${MULLE_FLAG_LOG_TERSE}" != "YES" ]
   then
      log_printf "${C_INFO}%b${C_RESET}\n" "$*"
   fi
}


log_verbose()
{
   if [ "${MULLE_FLAG_LOG_VERBOSE}" = "YES" -a \
        "${MULLE_FLAG_LOG_TERSE}" != "YES" ]
   then
      log_printf "${C_VERBOSE}%b${C_RESET}\n" "$*"
   fi
}


log_fail()
{
   log_printf "${C_FAIL}Fatal Error: %b${C_RESET}\n" "$*"
}


_bail()
{
   exit 1
}


fail()
{
   if [ ! -z "$*" ]
   then
      log_fail "$*"
   fi
   _bail
}



control_echo()
{
   local key="$1"
   local value="$2"
   local envkey="$3"

   if [ -z "${value}" ]
   then
      fail "\"${envkey:-${key}}\" is not defined"
   fi

   echo "${key}: ${value}"
}


write_control()
{
   control_echo "Package" "${PROJECT}" PROJECT
   control_echo "Architecture" "all"
   control_echo "Priority" "optional"
   control_echo "Version" "${VERSION}" VERSION
   control_echo "Section" "devel"
   if [ ! -z "${DEBIAN_DEPENDENCIES}" ]
   then
      control_echo "Depends" "${DEBIAN_DEPENDENCIES}"
   fi
   if [ ! -z "${DEBIAN_RECOMMENDATIONS}" ]
   then
      control_echo "Recommends" "${DEBIAN_RECOMMENDATIONS}"
   fi
   control_echo "Maintainer" "${PUBLISHER_EMAIL}" PUBLISHER_EMAIL
   control_echo "Description" "${DESC}" DESC
   control_echo "Homepage" "https://github.com/mulle-nat/${PROJECT}"
}


debian_init()
{
   if [ "${MULLE_BOOTSTRAP_NO_COLOR}" != "YES" ]
   then
      case "${UNAME}" in
         *)
            C_RESET="\033[0m"

            # Useable Foreground colours, for black/white white/black
            C_RED="\033[0;31m"     C_GREEN="\033[0;32m"
            C_BLUE="\033[0;34m"    C_MAGENTA="\033[0;35m"
            C_CYAN="\033[0;36m"

            C_BR_RED="\033[0;91m"
            C_BOLD="\033[1m"
            C_FAINT="\033[2m"

            C_RESET_BOLD="${C_RESET}${C_BOLD}"
            trap 'printf "${C_RESET}" >&2 ; exit 1' TERM INT
            ;;
      esac
   fi


   C_ERROR="${C_RED}${C_BOLD}"
   C_WARNING="${C_RED}${C_BOLD}"
   C_INFO="${C_CYAN}${C_BOLD}"
   C_VERBOSE="${C_GREEN}${C_BOLD}"
   C_FLUFF="${C_GREEN}${C_BOLD}"
}


create_debian()
{
   local directory

   directory="${PROJECT}_${VERSION}"

   if [ -d "${directory}" ]
   then
      rm -rf "${directory}"
   fi

   mkdir -p "${directory}/DEBIAN" || exit 1

   mulle-install --prefix "${PWD}/${directory}${OPTION_ROOT}" >&2 || exit 1

   write_control > "${directory}/DEBIAN/control"

   # brew install dpkg
   dpkg-deb -b "${directory}" >&2 || exit 1

   if [ "${OPTION_REMOVE_TMP}" = "YES" ]
   then
      rm -rf "${directory}"
   fi

   echo "${directory}.deb"
}


main()
{
   local debian

   local OPTION_PREFIX
   local OPTION_ROOT="/usr"
   local OPTION_UPDATE="YES"
   local OPTION_PUBLISH="YES"
   local OPTION_REMOVE_TMP="YES"

   VERSION="`mulle-homebrew-version --no-tag-warning`"

   if [ -f "./bin/formula-info.sh" ]
   then
      . ./bin/formula-info.sh
   fi

   if [ -f "./bin/publisher-info.sh" ]
   then
      . ./bin/publisher-info.sh
   else
      if [ -f "./bin/tap-info.sh" ]
      then
         . ./bin/tap-info.sh
      fi
   fi

   while [ $# -ne 0 ]
   do
      case "$1" in
         -h|-help|--help)
            usage
         ;;

         -t)
            set -x
         ;;

         --no-update)
            OPTION_UPDATE="NO"
         ;;

         --no-publish)
            OPTION_PUBLISH="NO"
         ;;

         --no-remove-tmp)
            OPTION_REMOVE_TMP="NO"
         ;;

         --root)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ROOT="$1"
         ;;

         -*)
            log_error "unknown option $1"
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   [ -z "${PROJECT}" ] && fail "PROJECT not specified, probably because of missing bin/formula-info.sh"

   if [ -z "`command -v dpkg-deb`" ]
   then
      case "`uname -s`" in
         Darwin)
            fail "install dpkg-deb with \`brew install dpkg\` first"
         ;;

         *)
            fail "install dpkg-deb is missing"
         ;;
      esac
   fi

   debianfile="`create_debian`" || exit 1

   if [ "${OPTION_PUBLISH}" = "YES" ] && [ ! -z "${PUBLISHER_DEBIAN_DISTNAME}" ]
   then
      DISTS_LOCATION="${DISTS_LOCATION:-..}"
      DEBIAN_DISTS="${DEBIAN_DISTS:-${DISTS_LOCATION}/debian-${PUBLISHER_DEBIAN_DISTNAME}}"

      if [ -d "${DEBIAN_DISTS}" ]
      then
         mkdir "${DEBIAN_DISTS}/all" 2> /dev/null

         log_info "Publishing \"${debianfile}\"..."
         mv "${debianfile}" "${DEBIAN_DISTS}/all/"

         if [ "${OPTION_UPDATE}" = "YES" ] && [ -x "${DEBIAN_DISTS}/did-update.sh" ]
         then
            (
              log_info "Executing ./did-update.sh in ..."

              cd "${DEBIAN_DISTS}"
              # let some script take over
              ./did-update.sh "${debianfile}"
            ) || exit 1
         fi
      fi
   else
      log_verbose "No PUBLISHER_DEBIAN_DISTNAME set"
   fi
}

debian_init

main "$@"
