#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES'  -o "${MULLE_PROJECT_SLOPPY_DISTRIBUTE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


show_function()
{
   declare -f "$1" | \
      sed -e '1,2d' -e '$d' | \
      sed -e 's/^    //' | \
      sed -e 's/exekutor //g' | \
      sed -e "s/&&/^  /g" | \
      tr '^' '\n'
}

usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} <message>

   A lazy and sloppy way to push out a patch. It does:

   `show_function "sloppy_commit"`
   `show_function "sloppy_push"`
EOF
   exit 1
}

sloppy_commit()
{
   exekutor git add -u &&
   exekutor git commit -m "* $*"
}


sloppy_push()
{
   exekutor mulle-project-version --increment-patch --write &&
   [ ! -f "RELEASENOTES.md" ] || exekutor mulle-project-releasenotes RELEASENOTES.md &&
   exekutor git add -u &&
   exekutor git commit --amend --no-edit &&
   exekutor mulle-project-distribute
}


sloppy_distribute()
{
   if [ $# -ne 0 ]
   then
      sloppy_commit "$@" || exit 1
   fi

   exekutor mulle-project-distribute --verify-only || exit 1

   sloppy_push
}


project::git::is_clean()
{
   log_entry "project::git::is_clean" "$@"

   local name

   name="${1:-${PWD}}"

   if [ ! -d .git ]
   then
      fail "\"${name}\" is not a git repository"
   fi

   local clean

   clean=`git status -s --untracked-files=no`
   [ -z "${clean}" ]
}


main()
{
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -*)
            usage "Unknown option \"$1\""
         ;;

         --)
            shift
            break
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   untracked="`exekutor git ls-files --others --exclude-standard`"
   if [ ! -z "${untracked}" ]
   then
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' ]
      then
         log_warning "There are still untracked files here, you shouldn't be that sloppy"
      else
         fail "There are still untracked files here, can't be that sloppy"
      fi
   fi

   if ! project::git::is_clean && [ $# -eq 0 ]
   then
      log_error "Need a commit message for the outstandig commits"
      git status -s
      exit 1
   fi

   sloppy_distribute "$@"
}


main "$@"


