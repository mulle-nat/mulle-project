#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_INIT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


usage()
{
   cat <<EOF >&2
Usage: ${MULLE_EXECUTABLE} [directory]

   Install release and versioning information scripts in the
   "./mulle/etc/project" subdirectory.

   This is obsoleted by the mulle-sde extension.

EOF
   exit 1
}


fail()
{
   echo "Error:" "$*" >&2
   exit 1
}


log_verbose()
{
   if [ "${OPTION_VERBOSE}" = 'YES' ]
   then
      printf "%s\n" "$*" >&2
   fi
}


libexec_path()
{
   [ ! -d "${libexecpath}" ] && fail "libexec folder \"${libexecpath}\" missing"

   cd "${libexecpath}" || exit 1
   pwd -P
}


share_path()
{
   [ ! -d "${sharepath}" ] && fail "share folder \"${sharepath}\" missing"

   cd "${sharepath}" || exit 1
   pwd -P
}


_template_path()
{
   local name="$1"

   [ ! -f "${sharepath}/${name}" ] && fail "template \"${sharepath}/${name}\" missing"

   cd "${sharepath}" || exit 1
   echo "`pwd -P`/${name}"
}


generate_formula_template_path()
{
   _template_path "generate-formula.sh.template"
}


version_info_template_path()
{
   _template_path "version-info.sh.template"
}


formula_info_template_path()
{
   _template_path "formula-info.sh.template"
}


generic_write_template()
{
   local template="$1"
   local filename="$2"

   local directory

   directory="`dirname -- "${filename}"`"

   if [ ! -d "${directory}" ]
   then
      mkdir -p "${directory}" || exit 1
   fi

   if [ ! -e "${filename}" -o "${OPTION_FORCE}" = 'YES' ]
   then
      log_verbose "Write \"${filename}\""
      (
         cat "${template}" > "${filename}" &&
         chmod 755 "${filename}"
      ) || exit 1
   fi
}


write_version_info_template()
{
   local directory="$1"

   generic_write_template "`version_info_template_path`" "${directory}/version-info.sh"
}


write_generate_formula_template()
{
   local directory="$1"

   generic_write_template "`generate_formula_template_path`" "${directory}/generate-formula.sh"
}


write_formula_info_template()
{
   local directory="$1"
   local projectdir="$2"

   local template
   local project

   template="`formula_info_template_path`"

   project="`basename -- "${projectdir}"`"

   result="`sed "s/^# PROJECT=\\\"MyProject\\\"/PROJECT=\\\"${project}\\\"/" "${template}"`" || exit 1
   [ -z "${result}" ] && fail "formula-info.sh generation failed"
   result="`printf "%s\n" "${result}" | sed "s/^# DESC=\\\".*\\\"/DESC=\\\"${project} is ...\\\"/"`" || exit 1

   if [ -f "${projectdir}/CMakeLists.txt" ]
   then
      result="`printf "%s\n" "${result}" |  sed "s/^' *# cmake may be useful to add *$/cmake'/"`" || exit 1
   fi

   if [ ! -d "${directory}" ]
   then
      mkdir -p "${directory}" || exit 1
   fi

   local filename

   #
   # sic! check for version-info.sh
   # because a deleted formula-info.sh has meaning
   #
   filename="${directory}/formula-info.sh"
   if [ ! -e "${directory}/version-info.sh" -o "${OPTION_FORCE}" = 'YES' ]
   then
      (
         log_verbose "Write \"${filename}\""

         printf "%s\n" "${result}" > "${filename}" &&
         chmod 755 "${filename}"
      ) || exit 1
   fi
}


main()
{

   local projectdir
   local executable
   local exedirpath
   local prefix

   projectdir="`pwd -P`"

   local OPTION_FORCE
   local OPTION_VERBOSE
   local OPTION_FORMULA='YES'

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;


         "-d"|"--directory")
            [ $# -eq 1 ] && fail "missing argument for $1"
            shift
            projectdir="$1"
         ;;

         -f)
            OPTION_FORCE='YES'
         ;;

         -t)
            set -x
         ;;

         -v)
            OPTION_VERBOSE='YES'
         ;;

         --no-formula)
            OPTION_FORMULA='NO'
         ;;

         -*)
            fail "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   local libexecpath
   local sharepath

   sharepath="`mulle-project share-path`"
   libexecpath="${MULLE_PROJECT_LIBEXEC_DIR}"

   options_setup_trace "${MULLE_TRACE}" && set -x

   directory=".mulle/etc/project"
   if [ ! -z "$1" ]
   then
      directory="$1/.mulle/etc/project"
   fi

   if [ "${OPTION_FORMULA}" = 'YES' ]
   then
      write_formula_info_template "${directory}" "${projectdir}" # write first
      write_generate_formula_template "${directory}"
   fi

   write_version_info_template "${directory}"
}


main "$@"

