#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_DEPENDENCY_VERSIONS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####

MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f          : force operation"
   echo "   --reflect   : write into ${PROJECT_SOURCE_DIR:-src}/reflect"

   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-versioncheck [flags]

   Produces version checks of dependencies for C headers.


Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


emit_version_check()
{
   log_entry "emit_version_check"

   local version

   version="`mulle-project-version -s 2> /dev/null`"
   if [ -z "${version}" ]
   then
      log_verbose "`basename "${PWD}"` is not a mulle project"
      return
   fi

   local major
   local minor
   local patch

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1

   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local type

   type="`mulle-sde environment get PROJECT_TYPE`"
   if [ "${type}" != "library" ]
   then
      return
   fi

   local identifier
   local name

   name="`mulle-sde environment get PROJECT_NAME`" || exit 1
   r_identifier "${name}"
   r_tweaked_de_camel_case "${RVAL}"
   r_uppercase "${RVAL}"
   identifier="${RVAL}"

   local max_major
   local max_minor

   if [ ${major} -gt 0 ]
   then
      max_major=$(( major + 1))
      max_minor=0
   else
      max_major=${major}
      max_minor=$(( minor + 1))
   fi

   echo "#if defined( ${identifier}_VERSION)"
   echo "# if ${identifier}_VERSION < ((${major} << 20) | (${minor} << 8) | ${patch})"
   echo "#  error \"${name} is too old\""
   echo "# endif"
   echo "# if ${identifier}_VERSION >= ((${max_major} << 20) | (${max_minor} << 8) | 0)"
   echo "#  error \"${name} is too new\""
   echo "# endif"
   echo "#endif"
   echo
}


emit_include_file()
{
   local main_identifier="$1"

   local dependency
   local name

   echo "/*
 *   This file will be regenerated by \``basename $0`\`.
 *   Any edits will be lost.
 */"

#   echo "#ifndef ${main_identifier}_CHECK_H__"
#   echo "#define ${main_identifier}_CHECK_H__"

   shell_disable_glob
   IFS=$'\n'
   for name in `mulle-sde dependency list -- --output-no-header --format '%a\n' | sort`
   do
      r_basename "${name}"
      if [ "${RVAL}" = "${name}" ]
      then
         dependency="${MULLE_SOURCETREE_STASH_DIRNAME:-stash}/${name}"
      else
         dependency="${name}"
      fi

      if [ -d "${dependency}" ]
      then
      (
         cd "${dependency}" 2> /dev/null && emit_version_check
      )
      fi
   done
   shell_enable_glob; IFS="${DEFAULT_IFS}"
#   echo "#endif"
}

main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_REFLECT

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --reflect)
            OPTION_REFLECT='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   local main_identifier
   local name

   name="`rexekutor mulle-sde environment get PROJECT_NAME`" || exit 1
   r_identifier "${name}"
   PROJECT_IDENTIFIER="${identifier}"

   r_uppercase "${RVAL}"
   PROJECT_UPCASE_IDENTIFIER="${RVAL}"

   if [ ! -d "${MULLE_SOURCETREE_STASH_DIRNAME:-stash}" ]
   then
      log_warning "There is no ${MULLE_SOURCETREE_STASH_DIRNAME:-stash} directory here, nothing to do
${C_INFO}Run mulle-sde fetch if this is unexpected."
      return 0
   fi

   if [ "${OPTION_REFLECT}" = 'YES' ]
   then
      local name

      dstfile="${PROJECT_SOURCE_DIR:-src}/reflect/_${name}-versioncheck.h"
      r_mkdir_parent_if_missing "${dstfile}"

      log_info "${PROJECT_NAME}: ${dstfile}"

      text="`emit_include_file "${PROJECT_UPCASE_IDENTIFIER}" `"
      redirect_exekutor "${dstfile}" echo "${text}"
   else
      emit_include_file "${PROJECT_UPCASE_IDENTIFIER}"
   fi
}


########
###
### INIT - You usually won't edit code below
###

_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env (${PWD}})" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-case.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-version.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   shell_enable_pipefail
   shell_enable_extglob

   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   call_main "${MULLE_PROJECT_DEPENDENCY_VERSIONS_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
