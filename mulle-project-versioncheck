#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_VERSIONCHECK_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions-all.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f            : force operation"
   echo "   --reflect     : write into ${PROJECT_SOURCE_DIR:-src}/reflect"
   echo "   --update-only : only write if file exists"

   options_technical_flags_usage "         : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-versioncheck [flags]

   Produces version checks of dependencies for C headers in the form of

   #if defined( FOO_VERSION)
   # if FOO_VERSION < ((1 << 20) | (2 << 8) | 3)"
   #  error "foo is too old"
   # endif
   # if FOO_VERSION >= ((1 << 20) | (2 << 8) | 0)"
   #  error "foo is too new"
   # endif
   #endif

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


emit_version_check()
{
   log_entry "emit_version_check"

   local version

   version="`mulle-project-version -s 2> /dev/null`"
   if [ -z "${version}" ]
   then
      log_verbose "`basename "${PWD}"` is not a mulle project"
      return
   fi

   local major
   local minor
   local patch

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-version.sh" || exit 1

   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local type

   type="`mulle-sde environment get PROJECT_TYPE`"
   if [ "${type}" != "library" ]
   then
      return
   fi

   local identifier
   local name

   name="`mulle-sde environment get PROJECT_NAME`" || exit 1
   r_identifier "${name}"
   r_tweaked_de_camel_case "${RVAL}"
   r_uppercase "${RVAL}"
   identifier="${RVAL}"

   local max_major
   local max_minor

   if [ ${major} -gt 0 ]
   then
      max_major=$(( major + 1))
      max_minor=0
   else
      max_major=${major}
      max_minor=$(( minor + 1))
   fi

   echo "#if defined( ${identifier}_VERSION)"
   echo "# if ${identifier}_VERSION < ((${major} << 20) | (${minor} << 8) | ${patch})"
   echo "#  error \"${name} is too old\""
   echo "# endif"
   echo "# if ${identifier}_VERSION >= ((${max_major} << 20) | (${max_minor} << 8) | 0)"
   echo "#  error \"${name} is too new\""
   echo "# endif"
   echo "#endif"
   echo
}


emit_include_file()
{
   local main_identifier="$1"

   local dependency
   local name

   echo "/*
 *   This file will be regenerated by \``basename $0`\`.
 *   Any edits will be lost.
 */"

#   echo "#ifndef ${main_identifier}_CHECK_H__"
#   echo "#define ${main_identifier}_CHECK_H__"

   shell_disable_glob
   IFS=$'\n'
   for name in `mulle-sde dependency list -- --output-no-header --format '%a\n' | sort`
   do
      r_basename "${name}"
      if [ "${RVAL}" = "${name}" ]
      then
         dependency="${MULLE_SOURCETREE_STASH_DIRNAME:-stash}/${name}"
      else
         dependency="${name}"
      fi

      if [ -d "${dependency}" ]
      then
      (
         cd "${dependency}" 2> /dev/null && emit_version_check
      )
      fi
   done
   shell_enable_glob; IFS="${DEFAULT_IFS}"
#   echo "#endif"
}

main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_REFLECT
   local OPTION_UPDATE

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --reflect)
            OPTION_REFLECT='YES'
         ;;

         --update-only)
            OPTION_UPDATE='ONLY'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   local main_identifier

   PROJECT_NAME="`rexekutor mulle-sde environment get PROJECT_NAME`" || fail "failed to get project name"

   r_identifier "${PROJECT_NAME}"
   PROJECT_IDENTIFIER="${identifier}"

   include "case"

   r_smart_upcase_identifier "${RVAL}"
   PROJECT_UPCASE_IDENTIFIER="${RVAL}"

   if [ ! -d "${MULLE_SOURCETREE_STASH_DIRNAME:-stash}" ]
   then
      _log_warning "There is no ${MULLE_SOURCETREE_STASH_DIRNAME:-stash} directory here, nothing to do
${C_INFO}Run mulle-sde fetch if this is unexpected."
      return 0
   fi

   if [ "${OPTION_REFLECT}" != 'YES' ]
   then
      emit_include_file "${PROJECT_UPCASE_IDENTIFIER}"
      return
   fi

   local folder

   folder="${PROJECT_SOURCE_DIR:-src}/reflect"
   if [ ! -d "${folder}" ]
   then
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
      then
         log_warning "No reflect ${folder#${MULLE_USER_PWD}/} here"
         return
      fi
   fi

   local dstfile
   local verb

   dstfile="${PROJECT_SOURCE_DIR:-src}/reflect/_${PROJECT_NAME}-versioncheck.h"

   verb="created"
   if [ ! -f "${dstfile}" ]
   then
      if [ "${OPTION_UPDATE}" = 'ONLY' ]
      then
         log_warning "No update as ${dstfile#${MULLE_USER_PWD}/} is missing"
         return
      fi

      verb="created"
      r_mkdir_parent_if_missing "${dstfile}"
   fi

   log_info "${PROJECT_NAME} ${verb} ${dstfile#${MULLE_USER_PWD}/}"

   local text

   text="`emit_include_file "${PROJECT_UPCASE_IDENTIFIER}" `"
   redirect_exekutor "${dstfile}" echo "${text}"
}


call_with_flags "main" "${MULLE_PROJECT_VERSIONCHECK_FLAGS}" "$@"
