#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_VERSIONCHECK_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f                : force operation"
   echo "   --reflect         : write into ${PROJECT_SOURCE_DIR:-src}/reflect"
   echo "   --update-only     : only write if file exists"
   echo "   --fetch-if-needed : fetch dependencies if missing"

   options_technical_flags_usage \
                "             : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-versioncheck [flags]

   Produces version checks of dependencies for C headers in the form of:

   #if defined( FOO_VERSION)
   # ifndef FOO_VERSION_MIN
   #  define FOO_VERSION_MIN  ((1 << 20) | (2 << 8) | 3)
   # endif
   # ifndef FOO_VERSION_MAX
   #  define FOO_VERSION_MAX  ((2 << 20) | (0 << 8) | 0)
   # endif
   # if FOO_VERSION < FOO_VERSION_MIN"
   #  error "foo is too old"
   # endif
   # if FOO_VERSION >= FOO_VERSION_MAX"
   #  error "foo is too new"
   # endif
   #endif

   For this to work, the project must have been built successfully.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


emit_version_check()
{
   log_entry "emit_version_check"

   local version

   version="`mulle-project-version -s 2> /dev/null`"
   if [ -z "${version}" ]
   then
      log_verbose "`basename "${PWD}"` is not a mulle project"
      return
   fi

   include "version"

   local major
   local minor
   local patch

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-version.sh" || exit  1

   r_get_version_major "${version}"
   major="${RVAL}"
   r_get_version_minor "${version}"
   minor="${RVAL}"
   r_get_version_patch "${version}"
   patch="${RVAL}"

   local type

   type="`mulle-sde environment get PROJECT_TYPE`"
   if [ "${type}" != "library" ]
   then
      log_debug "Not a library"
      return
   fi

   local identifier
   local name

   name="`mulle-sde environment get PROJECT_NAME`" || exit 1

   r_smart_file_upcase_identifier "${name}"
   identifier="${RVAL}"

   local max_major
   local max_minor

   if [ ${major} -gt 0 ]
   then
      max_major=$(( major + 1))
      max_minor=0
   else
      max_major=${major}
      max_minor=$(( minor + 1))
   fi

   cat <<EOF
#if defined( ${identifier}_VERSION)
# ifndef ${identifier}_VERSION_MIN
#  define ${identifier}_VERSION_MIN  ((${major} << 20) | (${minor} << 8) | ${patch})
# endif
# ifndef ${identifier}_VERSION_MAX
#  define ${identifier}_VERSION_MAX  ((${max_major} << 20) | (${max_minor} << 8) | 0)
# endif
# if ${identifier}_VERSION < ${identifier}_VERSION_MIN
#  error "${name} is too old"
# endif
# if ${identifier}_VERSION >= ${identifier}_VERSION_MAX
#  error "${name} is too new"
# endif
#endif

EOF

}


emit_include_file()
{
   log_entry "emit_include_file" "$@"

   local main_identifier="$1"
   local stashdir="$2"

#   echo "#ifndef ${main_identifier}_CHECK_H__"
#   echo "#define ${main_identifier}_CHECK_H__"

   local dependencies
   local dependency
   local name

   #
   # avoid getting embedded stuff into this
   # also we don't do TreePrivate (would need to generate a
   # <name>-versioncheck-private.h header)
   #
   dependencies="`mulle-sde dependency list --qualifier "MATCHES build AND MATCHES bequeath" -- \
                                            --output-no-header \
                                            --force-format '%a\n' | sort`"
   .foreachline name in ${dependencies}
   .do
      r_basename "${name}"
      if [ "${RVAL}" = "${name}" ]
      then
         log_verbose "Emit check for \"\${stash_dir}/${name}\""
         dependency="${stashdir}/${name}"
      else
         log_verbose "Emit check for \"${name}\""
         dependency="${name}"
      fi

      if [ -d "${dependency}" ]
      then
      (
         cd "${dependency}" 2> /dev/null && emit_version_check
      )
      else
         log_verbose "\"${dependency}\" does not exist"
      fi
   .done
#   echo "#endif"
}


main()
{
   local OPTION_REFLECT
   local OPTION_UPDATE
   local OPTION_FETCH

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --fetch-if-needed)
            OPTION_FETCH='YES'
         ;;

         --reflect)
            OPTION_REFLECT='YES'
         ;;

         --update-only)
            OPTION_UPDATE='ONLY'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   local main_identifier

   PROJECT_NAME="`rexekutor mulle-sde environment get PROJECT_NAME`" || fail "failed to get project name"
   if [ -z "${PROJECT_NAME}" ]
   then
      fail "failed to get project name"
   fi

   r_identifier "${PROJECT_NAME}"
   PROJECT_IDENTIFIER="${RVAL}"

   log_verbose "PROJECT_IDENTIFIER is \"${PROJECT_IDENTIFIER}\""

   include "case"

   r_smart_upcase_identifier "${PROJECT_IDENTIFIER}"
   PROJECT_UPCASE_IDENTIFIER="${RVAL}"

   log_verbose "PROJECT_UPCASE_IDENTIFIER is \"${PROJECT_UPCASE_IDENTIFIER}\""

   local stashdir

   stashdir="`rexekutor mulle-sde environment get --output-eval MULLE_SOURCETREE_STASH_DIR`"
   stashdir="${stashdir:-${MULLE_SOURCETREE_STASH_DIRNAME:-stash}}"

   if [ ! -d "${stashdir}" ]
   then
      if [ "${OPTION_FETCH}" = 'YES' ]
      then
         exekutor mulle-sde fetch || exit 1
      fi

      if [ ! -d "${stashdir}" ]
      then
         _log_warning "There is no ${stashdir#${MULLE_USER_PWD}/} directory here, nothing to do
${C_INFO}Run mulle-sde fetch if this is unexpected."
         return 0
      fi
   fi

   log_verbose "stash_dir is \"${stashdir}"

   if [ "${OPTION_REFLECT}" != 'YES' ]
   then
      log_verbose "Unreflected emit for testing"
      emit_include_file "${PROJECT_UPCASE_IDENTIFIER}" "${stashdir}"
      return
   fi

   local folder

   folder="${PROJECT_SOURCE_DIR:-src}/reflect"
   if [ ! -d "${folder}" ]
   then
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
      then
         log_warning "No reflect ${folder#"${MULLE_USER_PWD}/"} here"
         return
      fi
   fi

   local dstfile
   local verb

   dstfile="${PROJECT_SOURCE_DIR:-src}/reflect/_${PROJECT_NAME}-versioncheck.h"
   log_verbose "dstfile is \"${dstfile}"

   verb="Updated"
   if [ ! -f "${dstfile}" ]
   then
      if [ "${OPTION_UPDATE}" = 'ONLY' ]
      then
         log_warning "No update as ${dstfile#"${MULLE_USER_PWD}/"} is missing"
         return
      fi

      verb="Created"
      r_mkdir_parent_if_missing "${dstfile}"
   fi


   local text
   local shield_identifier

   text="`emit_include_file "${PROJECT_UPCASE_IDENTIFIER}" "${stashdir}" `"
   if [ ! -z "${text}" ]
   then
      r_lowercase "${PROJECT_UPCASE_IDENTIFIER}_VERSIONCHECK_H__"
      shield_identifier="${RVAL##+(_)}"
      text="/*
 *   This file will be regenerated by \`mulle-project-versioncheck\`.
 *   Any edits will be lost.
 */
#ifndef ${shield_identifier}
#define ${shield_identifier}

${text}

#endif"
      log_info "${verb} ${C_RESET_BOLD}${dstfile#"${MULLE_USER_PWD}/"}${C_INFO} in ${C_MAGENTA}${C_BOLD}${PROJECT_NAME}"

      redirect_exekutor "${dstfile}" printf "%s\n" "${text}"
   else
      log_info "Remove ${C_RESET_BOLD}${dstfile#"${MULLE_USER_PWD}/"}${C_INFO} in ${C_MAGENTA}${C_BOLD}${PROJECT_NAME}"
      remove_file_if_present "${dstfile}"
   fi
}


call_with_flags "main" "${MULLE_PROJECT_VERSIONCHECK_FLAGS}" "$@"
