#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

usage()
{
   cat <<EOF >&2
Usage:
   mulle-homebrew-untag <tag>

   Remove <tag> from local clone and all remotes.
EOF
   exit 1
}


log_printf()
{
   if [ -z "${MULLE_EXEKUTOR_LOG_DEVICE}" ]
   then
      printf "$@" >&2
   else
      printf "$@" > "${MULLE_EXEKUTOR_LOG_DEVICE}"
   fi
}


log_info()
{
   if [ "${MULLE_FLAG_LOG_TERSE}" != "YES" ]
   then
      log_printf "${C_INFO}%b${C_RESET}\n" "$*"
   fi
}

log_fail()
{
   log_printf "${C_FAIL}Fatal Error: %b${C_RESET}\n" "$*"
}


_bail()
{
   exit 1
}


fail()
{
   if [ ! -z "$*" ]
   then
      log_fail "$*"
   fi
   _bail
}


untag_init()
{
   if [ "${MULLE_BOOTSTRAP_NO_COLOR}" != "YES" ]
   then
      case "${UNAME}" in
         *)
            C_RESET="\033[0m"

            # Useable Foreground colours, for black/white white/black
            C_RED="\033[0;31m"     C_GREEN="\033[0;32m"
            C_BLUE="\033[0;34m"    C_MAGENTA="\033[0;35m"
            C_CYAN="\033[0;36m"

            C_BR_RED="\033[0;91m"
            C_BOLD="\033[1m"
            C_FAINT="\033[2m"

            C_RESET_BOLD="${C_RESET}${C_BOLD}"
            trap 'printf "${C_RESET}" >&2 ; exit 1' TERM INT
            ;;
      esac
   fi


   C_ERROR="${C_RED}${C_BOLD}"
   C_WARNING="${C_RED}${C_BOLD}"
   C_INFO="${C_CYAN}${C_BOLD}"
   C_VERBOSE="${C_GREEN}${C_BOLD}"
   C_FLUFF="${C_GREEN}${C_BOLD}"
}


main()
{
   local ORIGIN="origin"
   local OPTION_FORCE="NO"

   while [ $# -ne 0 ]
   do
      case "$1" in
         -f)
            OPTION_FORCE="YES"
         ;;

         --origin)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            ORIGIN="$1"
         ;;

         -*)
            usage
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   TAG="$1"

   if [ -z "${TAG}" ]
   then
      usage
   fi

   log_info "Trying to remove local tag"
   git tag -d "$TAG" || [ "${OPTION_FORCE}" = "YES" ] || exit 1

   # find .git folder (must exist, since git tag didn't fail)

   while [ ! -d .git ]
   do
      cd ..
      [ `pwd` = "/" ] && exit 1  # paranoia
   done

   local i
   local remote

   for i in .git/refs/remotes/*
   do
      remote="`basename -- "${i}"`"
      case "$remote" in
         "${ORIGIN}"|github) #
            log_info "Trying to remove tag on remote \"${remote}\""
            git push "${remote}" ":${TAG}" # failure is OK
         ;;
      esac
   done
}

untag_init

main "$@"
