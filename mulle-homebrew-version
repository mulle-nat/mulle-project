#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

usage()
{
   cat <<EOF >&2
Usage: mulle-homebrew-version [options] [projectname]

   Get or increment the project version. The version must be readable from
   a variable or constant in  either of two formats:

   `major.minor.patch` or `((major << 20) | (minor << 8) | patch)`, where
   other shift integer values are possible.

   Examples:
      static int   version = ((1 << 16) | (2 << 5) | 3)
      VERSION="1.2.3"
      #define VERSION   "1.2.3"

Options:
   --add-patch <value>   : add value to patch version part
   --first-patch-zero    : set patch to 0 for minor/major increments
   --first-patch-one     : set patch to 1 for minor/major increments
   --increment-major     : add 1 to major versionpart
   --increment-minor     : add 1 to minor version part
   --increment-patch     : add 1 to patch version part
   --read-xcode-version  : read version from Xcode project
   --write-xcode-version : write version to Xcode project

   --language <name>     : project language, (c, obj, cpp, bash etc)
   --no-info             : do not read -info.sh files
   --no-tag-warning      : do not warn if git tag exists
   --versionfile <file>  : file containing version
   --versionname <name>  : version variable name
   --write               : update versionfile with new version
   --xcodeproj <dir>     : specify path of .xcodeproj directory
EOF
   exit 1
}


fail()
{
   echo "Error:" "$*" >&2
   exit 1
}


mulle_homebrew_version_init()
{
   #
   # prefer local mulle-homebrew if available
   # Do not embed it anymore!
   #
   if [ -z "`command -v mulle-homebrew-env`" ]
   then
      cat <<EOF >&2
mulle-homebrew-env not found in PATH.
Visit the homepage for installation instructions:
   https://github.com/mulle-nat/mulle-homebrew
EOF
      exit 1
   fi

   INSTALLED_MULLE_HOMEBREW_VERSION="`mulle-homebrew-env version`" || exit 1
   LIBEXEC_DIR="`mulle-homebrew-env libexec-path`" || exit 1

   . "${LIBEXEC_DIR}/mulle-version.sh" || exit 1
   . "${LIBEXEC_DIR}/mulle-git.sh" || exit 1
}


get_xcodeproj_version()
{
   local filename="$1/project.pbxproj"

   if [ ! -f "${filename}" ]
   then
      fail "Xcode project file \"${filename}\" not found"
   fi

   egrep '^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=' "${filename}" | \
     head -1 | \
     sed 's|^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\([0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*\).*|\1|'
}


get_version()
{
   if [ "${OPTION_READ_XCODE_VERSION}" = "YES" -o "${OPTION_WRITE_XCODE_VERSION}" = "YES" ]
   then
      ACTUAL_XCODEPROJ="${OPTION_XCODEPROJ}"
      if [ -z "${ACTUAL_XCODEPROJ}" ]
      then
         ACTUAL_XCODEPROJ="`ls -1d *.xcodeproj | head -1`" 2> /dev/null
         if [ -z "${ACTUAL_XCODEPROJ}" ]
         then
            fail "No Xcode project found"
         fi
      fi

      XCODE_VERSION="`get_xcodeproj_version "${ACTUAL_XCODEPROJ}"`"
      if [ -z "${XCODE_VERSION}" ]
      then
         fail "could not read CURRENT_PROJECT_VERSION from \"${ACTUAL_XCODEPROJ}\""
      fi

      if [ "${OPTION_READ_XCODE_VERSION}" = "YES" ]
      then
         VERSION="${XCODE_VERSION}"
      fi
   fi

   #
   # these can usually be deduced, if you follow the conventions
   #
   if [ -z "${VERSION}" ]
   then
      if [ -z "${LANGUAGE}" ]
      then
         LANGUAGE="`get_language_from_directoryname "${DIRECTORY_NAME}"`" || exit 1
      fi

      if [ -z "${VERSIONFILE}" ]
      then
         VERSIONFILE="`get_header_from_project "${PROJECT}" "${LANGUAGE}"`" || exit 1
      fi

      if [ -z "${VERSIONNAME}" ]
      then
         VERSIONNAME="`get_versionname_from_project "${PROJECT}"`" || exit 1
      fi

      if [ -f VERSION ]
      then
         VERSIONFILE="VERSION"
         VERSIONNAME=""
         VERSION="`head -1 "${VERSIONFILE}"`"
      else
         VERSION="`get_project_version "${VERSIONFILE}" "${VERSIONNAME}"`" || exit 1
         if [ -z "${VERSION}" ]
         then
            VERSIONFILE="src/version.h"
            VERSION="`get_project_version "${VERSIONFILE}" "${VERSIONNAME}"`" || exit 1
         fi
      fi
   else
      VERSIONFILE=
   fi

   if [ -z "${VERSION}" ]
   then
      fail "Could not figure out the version for PROJECT=\"${PROJECT}\", LANGUAGE=\"${LANGUAGE}\", VERSIONNAME=\"${VERSIONNAME}\", VERSIONFILE=\"${VERSIONFILE}\". (hint: specify VERSIONNAME, VERSIONFILE)"
   fi
}


edit_version_if_requested()
{
   [ "${OPTION_ADD_MAJOR}" -ne 0 ] &&
      [ "${OPTION_ADD_MINOR}" -ne 0 -o "${OPTION_ADD_PATCH}" -ne 0 ] &&
         fail "only specify major to increment"

   [ "${OPTION_ADD_MINOR}" -ne 0 ] &&
      [ "${OPTION_ADD_PATCH}" -ne 0 ] &&
         fail "only specify minor to increment"

   OLDVERSION="${VERSION}"

   if [ "${OPTION_ADD_MAJOR}" -ne 0 -o \
        "${OPTION_ADD_MINOR}" -ne 0 -o \
        "${OPTION_ADD_PATCH}" -ne 0 ]
   then
      if [ -z "${VERSIONFILE}" ]
      then
         fail "Don't know how to increment version"
      fi

      VERSION="`project_version_add "${VERSION}" \
                                    "${OPTION_ADD_MAJOR}" \
                                    "${OPTION_ADD_MINOR}" \
                                    "${OPTION_ADD_PATCH}" \
                                    "0" \
                                    "${OPTION_FIRST_PATCH}"`" || exit 1
   fi

   if [ "${OPTION_TAG_WARNING}" = "YES" ]
   then
      if git_tag_exists "${VERSION}"
      then
         echo "warning: ${VERSION} already exists as a git tag" >&2
      else
         local last

         last="`git_last_tag`"
         if [ ! -z "${last}" ]
         then
            echo "info: Version is ${VERSION}. Last git tag is \"${last}\"." >&2
         else
            echo "info: No git tag \"${VERSION}\" exists. (git fetch --tags maybe ?)" >&2
         fi
      fi
   fi
}


write_version_if_requested()
{
   if [ "${OPTION_WRITE}" = "YES" -o "${OPTION_WRITE_XCODE_VERSION}" = "YES" ]
   then
      if [ "${OPTION_WRITE_XCODE_VERSION}" = "YES" ]
      then
         sed -i ".bak" 's|^\([[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\)'${XCODE_VERSION}'\(.*\)|\1'${VERSION}'\2|' "${ACTUAL_XCODEPROJ}/project.pbxproj"
      fi

      if [ "${OPTION_WRITE}" = "YES" ]
      then
         set_project_version "${VERSION}" "${VERSIONFILE}" "${VERSIONNAME}"
      fi

      VERIFY_VERSION="`"${MULLE_EXECUTABLE_PATH}" "$@" --reset`"

      if [ "${VERSION}" != "${VERIFY_VERSION}" ]
      then
         fail "Version could not be set"
      else
         log_info "Version successfully set to ${VERSION}"
      fi

      exit 0
   fi
}


parse_arguments()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         --no-info)
            OPTION_READ_INFO="NO"
         ;;

         --no-tag-warning)
            OPTION_TAG_WARNING="NO"
         ;;

         --increment-minor)
            OPTION_ADD_MINOR="1"
         ;;

         --increment-minor)
            OPTION_ADD_MINOR="1"
         ;;

         --increment-patch)
            OPTION_ADD_PATCH="1"
         ;;

         --reset) # stupid option for verify must be last
            OPTION_ADD_PATCH="0"
            OPTION_ADD_MINOR="0"
            OPTION_ADD_MAJOR="0"
            OPTION_WRITE_XCODE_VERSION="NO"
            OPTION_WRITE="NO"
            OPTION_TAG_WARNING="NO"
         ;;

         --first-patch-zero)
            OPTION_FIRST_PATCH="0"
         ;;

         --first-patch-one)
            OPTION_FIRST_PATCH="1"
         ;;

         --add-patch)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ADD_PATCH="$1"
         ;;

         --write)
            OPTION_WRITE="YES"
         ;;

         --no-write)
            OPTION_WRITE="NO"
         ;;

         --xcodeproj)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_XCODEPROJ="$1"
         ;;

         --read-xcode-version)
            OPTION_READ_XCODE_VERSION="YES"
         ;;

         --write-xcode-version)
            OPTION_WRITE_XCODE_VERSION="YES"
         ;;

         --no-write-xcode-version)
            OPTION_WRITE_XCODE_VERSION="NO"
         ;;

         --language)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            LANGUAGE="$1"
         ;;

         --versionname)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONNAME="$1"
         ;;

         --versionfile)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONFILE="$1"
         ;;

         -h|--help)
            usage
         ;;

         -t)
            set -x
         ;;

         -*)
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   DIRECTORY_NAME="`basename -- "$PWD"`"

   if [ -z "${PROJECT}" ]
   then
      PROJECT="${1:-${DIRECTORY_NAME}}"
      [ $# -ne 0 ] && shift
   fi
}


main()
{
   local directory

   local OPTION_ADD_MAJOR="0"
   local OPTION_ADD_MINOR="0"
   local OPTION_ADD_PATCH="0"
   local OPTION_FIRST_PATCH="0"
   local OPTION_READ_INFO="YES"
   local OPTION_READ_XCODE_VERSION="NO"
   local OPTION_WRITE="NO"
   local OPTION_WRITE_XCODE_VERSION="NO"
   local OPTION_XCODEPROJ=""
   local OPTION_TAG_WARNING="YES"

   local OPTION_VERSIONNAME
   local OPTION_VERSIONFILE

   if [ -f ".first_patch" ]
   then
      OPTION_FIRST_PATCH="`cat ".first_patch"`"
   fi

   parse_arguments "$@"

   if [ "${OPTION_READ_INFO}" = "YES" ]
   then
      if [ -f "./bin/version-info.sh" ]
      then
         . ./bin/version-info.sh
      fi
      if [ -f "./bin/release-info.sh" ]
      then
         . ./bin/release-info.sh
      fi
      if [ -f "./bin/formula-info.sh" ]
      then
         . ./bin/formula-info.sh
      fi
   fi

   VERSIONNAME="${OPTION_VERSIONNAME:-${VERSIONNAME}}"
   VERSIONFILE="${OPTION_VERSIONFILE:-${VERSIONFILE}}"

   get_version

   edit_version_if_requested

   write_version_if_requested "$@"

   echo "${VERSION}"
}


MULLE_EXECUTABLE_PATH="$0"
MULLE_EXECUTABLE="`basename -- $0`"
MULLE_BOOTSTRAP_FAIL_PREFIX="${MULLE_EXECUTABLE}"

mulle_homebrew_version_init

main "$@"
