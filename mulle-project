#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"



MULLE_PROJECT_VERSION="3.4.0"


project::usage()
{
   local error="$1"

   if [ ! -z "${error}" ]
   then
      log_error "${error}"
   fi

   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage: mulle-project [command]

   Prints the configuration of various mulle-project related values.

Commands:
   libexec-dir : print path to support scripts (default)
   share-dir   : print path to resources
   version     : print version of mulle-project
   path        : path of the executable

EOF
   exit 1
}

#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-version.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


project::main()
{
   # the option prefix is kinda historic now
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         '--help'|'-h'|'help')
            project::usage
         ;;

         '--version')
            printf "%s\n" "${MULLE_PROJECT_VERSION}"
         ;;

         -*)
            project::usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   case "${1:-libexec-dir}" in
      'libexec-dir')
         printf "%s\n" "${MULLE_PROJECT_LIBEXEC_DIR}"
      ;;

      'share-path'|'share-dir')
         r_simplified_path "${MULLE_PROJECT_LIBEXEC_DIR}/../share"
         printf "%s\n" "${RVAL}"
      ;;

      'version')
         printf "%s\n" "${MULLE_PROJECT_VERSION}"
      ;;

      'path')
         printf "%s\n" "${MULLE_EXECUTABLE}"
      ;;

      *)
         project::usage "Unknown command \"$1\""
      ;;
   esac
}


call_with_flags "project::main" "${MULLE_PROJECT_FLAGS}" "$@"

