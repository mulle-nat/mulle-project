#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_REPLACE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.1"


### >> START OF mulle-bashfunctions-embed.sh >>
### << END OF mulle-bashfunctions-embed.sh <<

print_flags()
{
   echo "   -f            : force operation on protected files"
   echo "   -1            : replace only once per line"
   echo "   --global      : use global replace"
   echo "   --delete-line : instead of replacement, delete whole line"
   echo "   --regex       : use sed regexp"
   echo "   --word        : replace word"
   echo "   --            : skip options"


   ##
   ## ADD YOUR FLAG DESCRIPTION HERE
   ##

   options_technical_flags_usage "         : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-replace [flags] <find> <replace> <file> ...

   Replace a string with another string in a file (or multiple files).

   You will need to escape the '/' characters, if you choose the --regex
   option. Use the dry-run option to see what will happen.
   
Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}



delete_line()
{
   log_entry delete_line "$@"

   local find="$1"
   local filename="$2"

   local escaped_find

   if [ "${OPTION_ESCAPE}" = 'YES' ]
   then
      r_escaped_sed_pattern "${find}"
      escaped_find="${RVAL}"
   else
      escaped_find="${find}"
   fi

   if [ "${OPTION_WORD}" = 'NO' ]
   then
      sed_command="-e 's/${escaped_find}/d'"
   else
      sed_command="\
-e 's/^${escaped_find}\\([^[:alnum:]_]\\)/d' \
-e 's/\\([^[:alnum:]_]\\)${escaped_find}\$/d' \
-e 's/\\([^[:alnum:]_]\\)${escaped_find}\\([^[:alnum:]_]\\)/d' \
-e 's/^${escaped_find}\$/${escaped_replace}/d' "
   fi

   local before
   local after
   local DIFF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'YES' -o "${MULLE_FLAG_EXEKUTOR_DRY_RUN}" = 'YES' ]
   then
      # TODO check file size
      before="`rexekutor cat "${filename}"`"

      if ! DIFF="${DIFF:-"`command -v diff`"}"
      then
         log_warning "diff command not installed"
      fi
   fi

   if [ "${MULLE_FLAG_EXEKUTOR_DRY_RUN}" = 'YES' ]
   then
      after="`eval_rexekutor sed "${sed_command}" "'${filename}'" `"
      log_info "Changes in ${C_RESET_BOLD}${filename}"
      rexekutor "${DIFF}" -b <( echo "${before}") <( echo "${after}" ) >&2
      return $?
   fi

   local unprotect

   if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' -a ! -w "${filename}" ]
   then
      unprotect='YES'
   fi

   local permissions

   if [ "${unprotect}" = 'YES' ]
   then
      permissions="`lso "${filename}"`"
      exekutor chmod +w "${filename}"
   fi

   local error

   if ! "`{ error=$( eval_rexekutor inplace_sed "${sed_command}" "'${filename}'" 2>&1 >&3 3>&-); } 3>&1`"
   then
      if [ -d "${filename}" ]
      then
         log_verbose "${filename} is a directory"
         return 0
      fi
      printf "%s\n" "${error}" >&2
      return 1
   fi

   if [ "${unprotect}" = 'YES' ]
   then
      exekutor chmod "${permissions}" "${filename}"
   fi

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'YES' ]
   then
      log_verbose "Changes in ${C_RESET_BOLD}${filename}"
      rexekutor "${DIFF}" -b <( echo "${before}") "${filename}" >&2
   fi
}


replace()
{
   log_entry replace "$@"

   local find="$1"
   local replace="$2"
   local filename="$3"

   local escaped_find
   local escaped_replace

   if [ "${OPTION_ESCAPE}" = 'YES' ]
   then
      r_escaped_sed_pattern "${find}"
      escaped_find="${RVAL}"

      r_escaped_sed_replacement "${replace}"
      escaped_replace="${RVAL}"
   else
      escaped_find="${find}"
      escaped_replace="${replace}"
   fi

   local sed_command

   if [ "${OPTION_WORD}" = 'NO' ]
   then
      sed_command="-e 's/${escaped_find}/${escaped_replace}/${OPTION_SED}'"
   else
      sed_command="\
-e 's/^${escaped_find}\\([^[:alnum:]_]\\)/${escaped_replace}\\1/${OPTION_SED}' \
-e 's/\\([^[:alnum:]_]\\)${escaped_find}\$/\\1${escaped_replace}/${OPTION_SED}' \
-e 's/\\([^[:alnum:]_]\\)${escaped_find}\\([^[:alnum:]_]\\)/\\1${escaped_replace}\\2/${OPTION_SED}' \
-e 's/^${escaped_find}\$/${escaped_replace}/${OPTION_SED}' "
   fi

   local before
   local after
   local DIFF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'YES' -o "${MULLE_FLAG_EXEKUTOR_DRY_RUN}" = 'YES' ]
   then
      before="`rexekutor cat "${filename}" 2> /dev/null`"

      if ! DIFF="${DIFF:-"`command -v diff`"}"
      then
         log_warning "diff command not installed"
      fi
   fi

   if [ "${MULLE_FLAG_EXEKUTOR_DRY_RUN}" = 'YES' ]
   then
      after="`eval_rexekutor sed "${sed_command}" "'${filename}'" `"

      log_info "Changes in ${C_RESET_BOLD}${filename}"
      rexekutor "${DIFF}" -b <( echo "${before}") <( echo "${after}" ) >&2
      return 0
   fi

   local unprotect

   if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' -a ! -w "${filename}" ]
   then
      unprotect='YES'
   fi

   local permissions

   if [ "${unprotect}" = 'YES' ]
   then
      permissions="`lso "${filename}"`"
      exekutor chmod +w "${filename}"
   fi

   local error

   if ! { error=$( eval_rexekutor inplace_sed "${sed_command}" "'${filename}'" 2>&1 >&3 3>&-); } 3>&1
   then
      if [ -d "${filename}" ]
      then
         log_verbose "${filename} is a directory"
         return 0
      fi
      printf "%s\n" "${error}" >&2
      return 1
   fi

   if [ "${unprotect}" = 'YES' ]
   then
      exekutor chmod "${permissions}" "${filename}"
   fi

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'YES' ]
   then
      log_verbose "Changes in ${C_RESET_BOLD}${filename}"
      rexekutor "${DIFF}" -b <( echo "${before}") "${filename}" >&2
   fi

   return 0
}


main()
{
   local OPTION_SED="g"
   local OPTION_ESCAPE='YES'
   local OPTION_WORD='NO'
   local OPTION_DELETE_LINE='NO'

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         -1|--once)
            OPTION_SED=""
         ;;

         --delete-line)
            OPTION_DELETE_LINE="YES"
         ;;

         -g|--global)
            OPTION_SED="g"
         ;;

         --regex|--regexp)
            OPTION_ESCAPE='NO'
         ;;

         -w|--word)
            OPTION_WORD='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            shift
            break
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local rval

   if [ "${OPTION_DELETE_LINE}" = 'YES' ]
   then
      [ $# -lt 2 ] && usage "missing argument"

      local find="$1"

      shift 1

      while [ $# -ne 0 ]
      do
         delete_line "${find}" "$1" || return $?
         shift
      done
      return $?
   fi

   [ $# -lt 3 ] && usage "missing argument"

   local find="$1"
   local replace="$2"

   shift 2

   while [ $# -ne 0 ]
   do
      replace "${find}" "${replace}" "$1" || return $?
      shift
   done
   return $?
}


call_with_flags "main" "${MULLE_REPLACE_FLAGS}" "$@"
