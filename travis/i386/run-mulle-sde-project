#! /usr/bin/env bash

[ "${TRACE}" = 'YES' -o "${FOOXX_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################


#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


MOUNT_POINT="/mnt/project"


print_flags()
{
   cat <<EOF
   --branch <name> : git branch to clone, affects TRAVIS_BRANCH
   --copy          : copy project (default)
   --clone         : git clone project
   --fail-shell    : enter a shell after errors
   --no-source-env : do not load mulle-sde environment
   --shell         : enter a shell after completion
   --symlink       : symlink project, dangerous!
   --travis        : execute all script files found in .travis.d
   --travis-fast   : execute only the script phase file found in .travis.d
   -f              : force operation"
EOF
   ##
   ## ADD YOUR FLAGS HERE
   ##

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   run-mulle-sde-project [flags] ...

   Run commands in a mulle-sde project that has been mounted into the
   container at "${MOUNT_POINT}"


Flags:

EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


load_project_environment()
{
   log_entry "load_project_environment" "$@"

   local envfile
   local relpath

   relpath=".mulle/etc/env/environment-project.sh"
   envfile="${MOUNT_POINT}/${relpath}"
   if rexekutor [ ! -f "${envfile}" ]
   then
      fail "Mount a mulle-sde project unto this container with
${C_RESET_BOLD}--volume \"\${PWD}:/mnt/project\""
   fi

   # get definition for PROJECT_NAME and so on
   exekutor source "${envfile}" || container_fail "${OPTION_SHELL}" "Could not source ${envfile}"

   [ ! -z "${PROJECT_NAME}" ] || container_fail "${OPTION_SHELL}" "PROJECT_NAME is undefined in \"${relpath}\""

   return 0
}


r_copy_project()
{
   log_entry "r_copy_project" "$@"

   local branch="$1"; shift

   local dst

   dst="travis-build/${PROJECT_NAME}"

   mkdir_if_missing  "${dst}" &&
   exekutor rsync --exclude 'addiction/' \
         --exclude 'dependency/' \
         --exclude 'kitchen/' \
         --exclude 'stash/' \
         --exclude '.mulle/var/' \
         --exclude '*/.mulle/var' \
         -a "$@" "${MOUNT_POINT}/" "${dst}" || return 1

   # we haz the project

   RVAL="${dst}"
}


r_clone_project()
{
   log_entry "r_clone_project" "$@"

   local branch="$1"; shift

   local dst

   dst="travis-build/${PROJECT_NAME}"
   case "${branch}" in
      "")
         exekutor git clone "$@" "${MOUNT_POINT}" "${dst}" || return 1
      ;;

      *)
         exekutor git clone -b "${branch}" "$@" "${MOUNT_POINT}" "${dst}" || return 1
      ;;
   esac
   # we haz the project

   RVAL="${dst}"
}


r_symlink_project()
{
   log_entry "r_symlink_project" "$@"

   local branch="$1"; shift

   local dst

   dst="travis-build/${PROJECT_NAME}"
   mkdir_if_missing travis-build
   exekutor ln -s "${MOUNT_POINT}" "${dst}" || exit 1

   RVAL="${dst}"
}


run_travis_script()
{
   log_entry "run_travis_script" "$@"

   rexekutor [ ! -d .travis.d ] && fail "There is no .travis.d directory in this project."

   rexekutor [ ! -f ".travis.d/script" ] || exekutor source ".travis.d/script"
}


run_travis_install()
{
   log_entry "run_travis_install" "$@"

   rexekutor [ ! -d .travis.d ] && fail "There is no .travis.d directory in this project."

   rexekutor [ ! -f ".travis.d/before_install.${MULLE_UNAME}" ]      || exekutor source ".travis.d/before_install.${MULLE_UNAME}"
   rexekutor [ ! -f ".travis.d/before_install-aux.${MULLE_UNAME}" ]  || exekutor source ".travis.d/before_install-aux.${MULLE_UNAME}"
   rexekutor [ ! -f ".travis.d/before_install-user.${MULLE_UNAME}" ] || exekutor source ".travis.d/before_install-user.${MULLE_UNAME}"
}


upgrade_sde()
{
   log_entry "upgrade_sde" "$@"

   local prefix

   prefix="`command -v mulle-sde`"
   r_dirname "${prefix}"   # remove mulle-sde
   r_dirname "${RVAL}"     # remove bin
   prefix="${RVAL}"

   IFS=$'\n'; shell_disable_glob
   for i in `egrep -v '^#' /mnt/sde/REPOS`
   do
      (
         rexekutor cd "/mnt/sde/$i" && exekutor sudo ./bin/installer "${prefix}"
      ) || exit 1
   done
   IFS="${DEFAULT_IFS}"; shell_enable_glob
}


container_exit()
{
   log_entry "container_exit" "$@"

   local shell="$1"; shift

   if [ "${shell}" = 'ALWAYS' ] || [ "$1" -ne 0 -a "${shell}" = 'YES' ]
   then
      exekutor exec "${BASH}"
   fi
   exit $1
}


container_fail()
{
   log_entry "container_fail" "$@"

   local shell="$1"; shift

   log_error "$@"
   container_exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local OPTION_MODE='copy'
   local OPTION_CD='DEFAULT'
   local OPTION_RUN='DEFAULT'
   local OPTION_SHELL='YES'
   local OPTION_SOURCE_ENV='YES'
   local OPTION_UPGRADE_SDE='DEFAULT'

   TRAVIS_BRANCH="${TRAVIS_BRANCH}"
   export TRAVIS_BRANCH
   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         ##
         ## ADD YOUR FLAGS HERE
         ##
         --shell)
            OPTION_SHELL='ALWAYS'
         ;;

         --fail-shell)
            OPTION_SHELL='YES'
         ;;

         --no-shell)
            OPTION_SHELL='NO'
         ;;

         --upgrade-sde)
            OPTION_UPGRADE_SDE='YES'
         ;;

         --source-env)
            OPTION_SOURCE_ENV='YES'
         ;;

         --no-source-env)
            OPTION_SOURCE_ENV='NO'
         ;;

         --copy|--clone|--symlink)
            OPTION_MODE="${1:2}"
         ;;

         -c)
            OPTION_RUN="eval"
         ;;

         --travis-fast)
            OPTION_RUN="fast"
         ;;

         --eval|--travis|--fast)
            OPTION_RUN="${1:2}"
         ;;

         --branch)
            [ $# -eq 0 ] && usage "Missing $1 argument"
            shift

            TRAVIS_BRANCH="$1"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   #
   # determine project name from source environment otherwise use
   # name "default". Don't poison the local environment though.
   #
   if [ "${OPTION_SOURCE_ENV}" = 'YES' ]
   then
      PROJECT_NAME="`(
            load_project_environment && echo "${PROJECT_NAME}"
         )`" || exit 1
   else
      PROJECT_NAME="default"
   fi

   r_${OPTION_MODE}_project "${TRAVIS_BRANCH}" || container_fail "${OPTION_SHELL}" "${OPTION_MODE} failed"
   project_dir="${RVAL}"

   # enter project
   case "${OPTION_CD}" in
      'DEFAULT'|cd)
         rexekutor cd "${project_dir}" || container_exit "${OPTION_SHELL}" 1
      ;;
   esac

   #
   # Unset some variables, set by mulle-bash-functions now
   #
   unset MULLE_USER_PWD
   unset MULLE_VIRTUAL_ROOT
   unset MULLE_BASHFUNCTIONS_LIBEXEC_DIR

   #
   # preinstall what's needed
   # need to be in project to get at .travis.d here
   case "${OPTION_RUN}" in
      travis)
         run_travis_install "$@" || container_exit "${OPTION_SHELL}" 1
      ;;
   esac

   # possibly upgrade sde now, after travis has installed its stuff
   case "${OPTION_UPGRADE_SDE}"  in
      DEFAULT)
         if [ -d /mnt/sde ]
         then
            upgrade_sde
         fi
      ;;

      'YES')
         [ ! -d /mnt/sde ] &&  fail "No /mnt/sde present"
         upgrade_sde
      ;;
   esac


   #
   # MULLE_FETCH_SEARCH_PATH is host specific and therefore usually
   # empty
   #
   if [ -z "${MULLE_FETCH_SEARCH_PATH}" ]
   then
      shell_enable_nullglob
      for searchpath in "/mnt/search"/*
      do
         r_colon_concat "${MULLE_FETCH_SEARCH_PATH}" "${searchpath}"
         MULLE_FETCH_SEARCH_PATH="${RVAL}"
      done
      shell_disable_nullglob

      export MULLE_FETCH_SEARCH_PATH
   fi

   # do something in project
   case "${OPTION_RUN}" in
      fast|travis)
         run_travis_script "$@"
         container_exit "${OPTION_SHELL}" $?
      ;;

      eval)
         eval_exekutor "$@"
         container_exit "${OPTION_SHELL}" $?
      ;;

      *)
         exekutor "$@"
         container_exit "${OPTION_SHELL}" $?
      ;;
   esac
}



call_with_flags "main" "${RUN_MULLE_SDE_PROJECT_FLAGS}" "$@"
