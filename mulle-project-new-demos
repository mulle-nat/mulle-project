#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VERSION=<|MULLE_BASHFUNCTIONS_VERSION|>
# shellcheck shell=bash
#


[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_NEW_DEMOS_TRACE}" = 'YES' ] \
&& set -x  \
&& : "$0" "$@"

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.0"



new_demos::print_flags()
{
   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
           "          : "
}


new_demos::usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   mulle-project-new-demos [flags] 

   Create a new demos subdirectory in a library project. The library will be
   built "inline" with the demos. Each file of the form main-*.<extension> in
   \`src\` will produce an executable.

   The result is not well upgradable though. As it would be, if this was 
   completely done by a proper extension.

   With the -f flag you can force this to work with executable projects as 
   well. You are on you own there though..

Flags:
EOF
   new_demos::print_flags | LC_ALL=C sort >&2

   exit 1
}


new_demos::r_get_env()
{
   local key="$1"

   if ! RVAL="`rexekutor mulle-sde env get "${key}"`"
   then
      fail "No suitable library mulle-sde project here"
   fi
}


new_demos::emit_task_script()
{
   cat <<EOF
#! /usr/bin/env mulle-bash
# shellcheck shell=bash

#
# This function will be called by mulle-monitor
#
library_task_run()
{
   log_entry "library_task_run" "\$@"

   local rc 

   #
   # we only want linkable stuff (avoids -startup and mulle-objc-list)
   #
   rexekutor mulle-sourcetree \${MULLE_TECHNICAL_FLAGS} -N rcopy --update .. '*' 'ENABLES link AND ENABLES intermediate-link'
   rc=\$?
   if [ \$rc -eq 2 ]
   then
      rc=0
   fi
   return \$rc
}

#
# Convenience to test your script standalone
#
if [ -z "\${MULLE_MONITOR_TASK_LOAD}" ]
then
   library_task_run "\$@"
fi
EOF
}


new_demos::emit_cmakelists_txt()
{
   cat <<EOF
cmake_minimum_required( VERSION 3.15)

project( demos C)

set( MULLE_PROJECT_TYPE "Executable")

### mulle-sde environment

# add cmake module paths to search path
list( INSERT CMAKE_MODULE_PATH 0 "\${PROJECT_SOURCE_DIR}/cmake/share")
list( INSERT CMAKE_MODULE_PATH 0 "\${PROJECT_SOURCE_DIR}/cmake/reflect")
list( INSERT CMAKE_MODULE_PATH 0 "\${PROJECT_SOURCE_DIR}/cmake")


include( Environment)

include( Files)

include( Dependencies OPTIONAL)

foreach( SOURCE \${SOURCES})
   # get rid off src/main- prefix and .m suffix
   #             offset 9  length -9 - 2
   if( SOURCE MATCHES "^src/main-")
      list( APPEND DEMO_MAIN_SOURCES "\${SOURCE}")
   else()
      list( APPEND DEMO_OTHER_SOURCES "\${SOURCE}")
   endif()
endforeach()

foreach( MAIN_SOURCE \${DEMO_MAIN_SOURCES})
   string( LENGTH "\${MAIN_SOURCE}" MAIN_SOURCE_LENGTH)
   math( EXPR MAIN_SOURCE_LENGTH "\${MAIN_SOURCE_LENGTH} - 11")
   string( SUBSTRING "\${MAIN_SOURCE}" 9 \${MAIN_SOURCE_LENGTH} EXECUTABLE_NAME)

   set( SOURCES "\${MAIN_SOURCE}" \${DEMO_OTHER_SOURCES})
   include( Executable)
   include( InstallExecutable)
   include( FinalOutput OPTIONAL)
   # only for Executable
   include( Motd OPTIONAL)
endforeach()

EOF
}


new_demos::main()
{
   #
   # simple option/flag handling
   #
   local OPTION_LICENSE="BSD-3-Clause"
   local OPTION_DIRNAME="demos"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            new_demos::usage
         ;;

         -d|--directory-name)
            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
            shift

            OPTION_DIRNAME="$1"
         ;;

         -l|--license)
            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
            shift

            OPTION_LICENSE="$1"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            new_demos::usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -ne 0 ] && new_demos::usage "Superflous arguments $*"

   if [ -d "${OPTION_DIRNAME}" ]
   then
      fail "There is already a directory \"${OPTION_DIRNAME}\" here, move it aside"
   fi

   local PROJECT_SOURCE_DIR
   local PROJECT_TYPE

   new_demos::r_get_env "PROJECT_SOURCE_DIR"
   LIBRARY_SOURCE_DIR="${RVAL}"

   new_demos::r_get_env "PROJECT_TYPE"
   PROJECT_TYPE="${RVAL}"

   if [ "${PROJECT_TYPE}" != 'library' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
   then
      fail "Need a library project to install demos"
   fi

   # get first only
   new_demos::r_get_env "PROJECT_EXTENSIONS"
   PROJECT_EXTENSION="${RVAL%%:*}"

   local meta 

   if ! meta="`rexekutor mulle-sde extension meta`"
   then
      fail "Couldn't figure out the meta extension of the library"
   fi

   if ! exekutor mulle-sde init -m "${meta}" -d "${OPTION_DIRNAME}" executable
   then
      return 1
   fi

   log_info "Setting up ${C_RESET_BOLD}${OPTION_DIRNAME}"
   (
      exekutor cd "${OPTION_DIRNAME}"

      new_demos::r_get_env "PROJECT_SOURCE_DIR"
      PROJECT_SOURCE_DIR="${RVAL}"

      exekutor mv "${PROJECT_SOURCE_DIR}/main.${PROJECT_EXTENSION}" \
                  "${PROJECT_SOURCE_DIR}/main-demo1.${PROJECT_EXTENSION}"

      #
      # install a task to update changes in parent dependencies
      #
      log_info "Installing ${C_MAGENTA}${C_BOLD}library${C_INFO} task to copy parent dependencies on reflect"

      new_demos::emit_task_script \
      | rexekutor mulle-monitor ${MULLE_TECHNICAL_FLAGS} task add library -

      rexekutor mulle-monitor ${MULLE_TECHNICAL_FLAGS} callback create library

      rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} environment \
         set MULLE_SDE_REFLECT_CALLBACKS 'library@:${MULLE_SDE_REFLECT_CALLBACKS}' 

      #
      # install custom CMakeLists.txt (clumsy)
      #
      log_info "Installing custom ${C_RESET_BOLD}CMakeLists.txt"

      new_demos::emit_cmakelists_txt \
      | redirect_exekutor CMakeLists.txt cat

      #
      # for benefit of an executable parent instead of a library
      #
      rexekutor mulle-sde ignore "../${LIBRARY_SOURCE_DIR}/main.m"

      #
      # Add library sources to project and reflect
      #
      log_info "Adding library sources to project files"

      rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} environment \
         set MULLE_MATCH_PATH "\${MULLE_MATCH_PATH}:../${LIBRARY_SOURCE_DIR}"

      rexekutor mulle-sde reflect
   )
}


#
# You can also use the function `call_with_flags`, which has been defined
# during mulle-boot. It lets you call 'new_demos::main'
# with MULLE_PROJECT_NEW_DEMOS_FLAGS interposed.
#
# call_with_flags "new_demos::main" "${MULLE_PROJECT_NEW_DEMOS_FLAGS}" "$@"

new_demos::main "$@"
