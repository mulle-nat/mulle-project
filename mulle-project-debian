#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
# Create debian package on OS X
#
[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_DEBIAN_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   mulle-project-debian [options]

   Produce debian packages for bash projects.
   There is no signing involved.

   Options:
      --root <path>    : default is /usr
      --debname <name> : repository name parameter for did-update.sh (main)
      --no-update      : don't execute did-update.sh in the taps directory
      --no-publish     : don't publish to tap
EOF
   exit 1
}


control_echo()
{
   log_entry "control_echo" "$@"

   local key="$1"
   local value="$2"
   local envkey="$3"

   if [ -z "${value}" ]
   then
      fail "\"${envkey:-${key}}\" is not defined"
   fi

   rexekutor printf "%s\n" "${key}: ${value}"
}


write_control()
{
   log_entry "write_control" "$@"

   control_echo "Package" "${PROJECT}" PROJECT
   control_echo "Architecture" "all"
   control_echo "Priority" "optional"
   control_echo "Version" "${VERSION}" VERSION
   control_echo "Section" "devel"
   if [ ! -z "${DEBIAN_DEPENDENCIES}" ]
   then
      control_echo "Depends" "${DEBIAN_DEPENDENCIES}"
   fi
   if [ ! -z "${DEBIAN_RECOMMENDATIONS}" ]
   then
      control_echo "Recommends" "${DEBIAN_RECOMMENDATIONS}"
   fi
   control_echo "Maintainer" "${PUBLISHER_EMAIL}" PUBLISHER_EMAIL
   control_echo "Description" "${DESC}" DESC
   control_echo "Homepage" "https://github.com/mulle-nat/${PROJECT}"
}


r_create_debian()
{
   log_entry "r_create_debian" "$@"

   local directory

   directory="${PROJECT}_${VERSION}"

   rmdir_safer "/tmp/${directory}"
   mkdir_if_missing "/tmp/${directory}/DEBIAN"

   log_verbose "Run mulle-install --prefix \"/tmp/${directory}${OPTION_ROOT}\""

   rexekutor mulle-make ${MULLE_TECHNICAL_FLAGS} \
                  install -k --prefix "/tmp/${directory}${OPTION_ROOT}" >&2 || exit 1

   redirect_exekutor "/tmp/${directory}/DEBIAN/control" write_control || exit 1

   # brew install dpkg
   (
      exekutor cd "/tmp"

      # we use gzip, because on trusty xz is not always available
      # and trusty is used on travis-ci

      # building packages on OSX can be shit, if something plunks down
      # .DS_Store files
      exekutor find "${directory}" \( -name ._.DS_Store -o -name .DS_Store \) -exec rm -f {} \;

      exekutor dpkg-deb -Zgzip -b "${directory}" >&2 || exit 1

      if [ "${OPTION_REMOVE_TMP}" = 'YES' ]
      then
         rmdir_safer "${directory}"
      fi
   ) || exit 1

   RVAL="/tmp/${directory}.deb"
}


main()
{
   local debian

   local OPTION_PREFIX
   local OPTION_ROOT="/usr"
   local OPTION_UPDATE='YES'
   local OPTION_PUBLISH='YES'
   local OPTION_REMOVE_TMP='YES'

   VERSION="`mulle-project-version --no-tag-warning`"

   if [ -f ".mulle/etc/project/formula-info.sh" ]
   then
      . .mulle/etc/project/formula-info.sh
   fi
   if [ -f ".mulle/etc/project/publisher-info.sh" ]
   then
      . .mulle/etc/project/publisher-info.sh
   fi

   local key
   local value

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         --debname)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            DEBIAN_REPOSITORY="$1"
         ;;

         --no-update)
            OPTION_UPDATE='NO'
         ;;

         --no-publish)
            OPTION_PUBLISH='NO'
         ;;

         --no-remove-tmp)
            OPTION_REMOVE_TMP='NO'
         ;;

         --root)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ROOT="$1"
         ;;

            # allow user to specify own parameters for his
            # generate_formula scripts w/o having to modify this file
         --*)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""

            key="`sed 's/^..//' <<< "$1"`"
            key="`tr '-' '_' <<< "${key}"`"
            key="`tr '[:lower:]' '[:upper:]' <<< "${key}"`"
            if ! grep -E -q -s '^[A-Z_][A-Z0-9_]*$' <<< "${key}" > /dev/null
            then
               fail "invalid variable specification \"${key}\", created by \"$1\""
            fi

            shift

            value="$1"

            eval ${key}='${value}'
            log_info "Variable ${key} set to \"${value}\""
         ;;

         -*)
            log_error "unknown option $1"
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   include "project::git"     || exit 1
   include "project::version" || exit 1

   #
   # parameters sent by mulle-project-distribute
   # we only care about DEBIAN_REPOSITORY as we already have code for
   # the rest...
   #
   # PROJECT
   # NAME
   # VERSION
   # DEPENDENCIES
   # BUILD_DEPENDENCIES
   # HOMEPAGE_URL
   # DESC
   # ARCHIVE_URL
   # DEBIAN_DEPENDENCIES
   # DEBIAN_REPOSITORY

   log_debug "Arguments: $*"

   [ $# -eq 0 ] || shift  # PROJECT
   [ $# -eq 0 ] || shift  # NAME
   [ $# -eq 0 ] || shift  # VERSION
   [ $# -eq 0 ] || shift  # DEPENDENCIES
   [ $# -eq 0 ] || shift  # BUILD_DEPENDENCIES
   [ $# -eq 0 ] || shift  # HOMEPAGE_URL
   [ $# -eq 0 ] || shift  # DESC
   [ $# -eq 0 ] || shift  # ARCHIVE_URL
   [ $# -eq 0 ] || shift  # DEBIAN_DEPENDENCIES

   # we are not really using DEBIAN_REPOSITORY anywhere ?
   DEBIAN_REPOSITORY="${1:-${DEBIAN_REPOSITORY}}" ; [ $# -eq 0 ] || shift  # DEBIAN_REPOSITORY
   DEBIAN_REPOSITORY="${DEBIAN_REPOSITORY:-main}"
   [ $# -eq 0 ] || shift  # TAG

   if [ -z "${PROJECT}" ]
   then
      r_basename "${PWD}"
      PROJECT="${RVAL}"
   fi

   if [ -z "`command -v dpkg-deb`" ]
   then
      case "`uname -s`" in
         Darwin)
            fail "install dpkg-deb with \`brew install dpkg\` first"
         ;;

         *)
            fail "install dpkg-deb is missing"
         ;;
      esac
   fi

   r_create_debian || exit 1
   debianfile="${RVAL}"

   if [ "${OPTION_PUBLISH}" = 'YES' ]
   then
      DEBIAN_DISTS="${DEBIAN_DISTS:-${DISTS_LOCATION:-..}/debian-${PUBLISHER_DEBIAN_DISTNAME:-software}}"

      if [ -d "${DEBIAN_DISTS}" ]
      then
         exekutor mkdir "${DEBIAN_DISTS}/all" 2> /dev/null

         log_info "Publishing \"${debianfile}\"..."
         exekutor mv "${debianfile}" "${DEBIAN_DISTS}/all/"

         if [ "${OPTION_UPDATE}" = 'YES' ] && [ -x "${DEBIAN_DISTS}/did-update.sh" ]
         then
            (
              log_info "Executing ./did-update.sh ${DEBIAN_REPOSITORY} in \"${DEBIAN_DISTS}\"..."

              #
              # this calls srcO/debian-software/did-upload.sh
              #
              r_basename "${debianfile}"

              exekutor cd "${DEBIAN_DISTS}" && \
              exekutor ./did-update.sh "${DEBIAN_REPOSITORY}" "${RVAL}"
            ) || exit 1
         fi
      else
         log_info "No folder \"${DEBIAN_DISTS}\" found. No update will run"
      fi
   else
      log_verbose "No PUBLISHER_DEBIAN_DISTNAME set"
   fi
}


main "$@"
