#!/usr/bin/env bash
#
# Create debian package on OS X
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   mulle-project-debian [options]

   Produce debian packages for bash projects.

   Options:
      --root <path> : default is /usr
      --no-update   : don't execute did-update.sh in the taps directory
      --no-publish  : don't publish to tap
EOF
   exit 1
}


control_echo()
{
   local key="$1"
   local value="$2"
   local envkey="$3"

   if [ -z "${value}" ]
   then
      fail "\"${envkey:-${key}}\" is not defined"
   fi

   echo "${key}: ${value}"
}


write_control()
{
   control_echo "Package" "${PROJECT}" PROJECT
   control_echo "Architecture" "all"
   control_echo "Priority" "optional"
   control_echo "Version" "${VERSION}" VERSION
   control_echo "Section" "devel"
   if [ ! -z "${DEBIAN_DEPENDENCIES}" ]
   then
      control_echo "Depends" "${DEBIAN_DEPENDENCIES}"
   fi
   if [ ! -z "${DEBIAN_RECOMMENDATIONS}" ]
   then
      control_echo "Recommends" "${DEBIAN_RECOMMENDATIONS}"
   fi
   control_echo "Maintainer" "${PUBLISHER_EMAIL}" PUBLISHER_EMAIL
   control_echo "Description" "${DESC}" DESC
   control_echo "Homepage" "https://github.com/mulle-nat/${PROJECT}"
}


create_debian()
{
   local directory

   directory="${PROJECT}_${VERSION}"

   if [ -d "/tmp/${directory}" ]
   then
      rm -rf "/tmp/${directory}"
   fi

   mkdir -p "/tmp/${directory}/DEBIAN" || exit 1

   log_verbose "Run mulle-install --prefix \"/tmp/${directory}${OPTION_ROOT}\""

   mulle-make install --prefix "/tmp/${directory}${OPTION_ROOT}" >&2 || exit 1

   write_control > "/tmp/${directory}/DEBIAN/control"

   # brew install dpkg
   (
      cd "/tmp" ;

      # we use gzip, because on trusty xz is not always available
      # and trusty is used on travis-ci

      dpkg-deb -Zgzip -b "${directory}" >&2 || exit 1

      if [ "${OPTION_REMOVE_TMP}" = "YES" ]
      then
         rm -rf "${directory}"
      fi
   )

   echo "/tmp/${directory}.deb"
}


main()
{
   local debian

   local OPTION_PREFIX
   local OPTION_ROOT="/usr"
   local OPTION_UPDATE="YES"
   local OPTION_PUBLISH="YES"
   local OPTION_REMOVE_TMP="YES"

   VERSION="`mulle-project-version --no-tag-warning`"

   if [ -f "./mulle-project/formula-info.sh" ]
   then
      . ./mulle-project/formula-info.sh
   fi

   EXE_DIR="`dirname -- "$0"`"
   LIBEXEC_DIR="`"${EXE_DIR}/mulle-project-env" libexec-dir`" || exit 1

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         -v)
            MULLE_FLAG_LOG_VERBOSE="YES"
         ;;
         -vv)
            MULLE_FLAG_LOG_VERBOSE="YES"
            MULLE_FLAG_LOG_FLUFF="YES"
         ;;
         -vvv)
            MULLE_FLAG_LOG_VERBOSE="YES"
            MULLE_FLAG_LOG_FLUFF="YES"
            MULLE_FLAG_LOG_TRACE="YES"
         ;;

         -t)
            set -x
         ;;

         --no-update)
            OPTION_UPDATE="NO"
         ;;

         --no-publish)
            OPTION_PUBLISH="NO"
         ;;

         --no-remove-tmp)
            OPTION_REMOVE_TMP="NO"
         ;;

         --root)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ROOT="$1"
         ;;

            # allow user to specify own parameters for his
            # generate_formula scripts w/o having to modify this file
         --*)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""

            local key

            key="`sed 's/^..//' <<< "$1"`"
            key="`tr '-' '_' <<< "${key}"`"
            key="`tr '[a-z]' '[A-Z]' <<< "${key}"`"
            if ! egrep -q -s '^[A-Z_][A-Z0-9_]*$' <<< "${key}" > /dev/null
            then
               fail "invalid variable specification \"${key}\", created by \"$1\""
            fi

            shift

            local value

            value="$1"

            eval ${key}='${value}'
            log_info "Variable ${key} set to \"${value}\""
         ;;

         -*)
            log_error "unknown option $1"
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   # assume mulle-project debian is called from ./bin/release.sh

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-publisher.sh"

   if [ -z "${PROJECT}" ]
   then
      PROJECT="`basename -- "$PWD"`"
   fi

   if [ -z "`command -v dpkg-deb`" ]
   then
      case "`uname -s`" in
         Darwin)
            fail "install dpkg-deb with \`brew install dpkg\` first"
         ;;

         *)
            fail "install dpkg-deb is missing"
         ;;
      esac
   fi

   debianfile="`create_debian`" || exit 1

   if [ "${OPTION_PUBLISH}" = "YES" ]
   then
      DEBIAN_DISTS="${DEBIAN_DISTS:-${DISTS_LOCATION:-..}/debian-${PUBLISHER_DEBIAN_DISTNAME:-software}}"

      if [ -d "${DEBIAN_DISTS}" ]
      then
         mkdir "${DEBIAN_DISTS}/all" 2> /dev/null

         log_info "Publishing \"${debianfile}\"..."
         mv "${debianfile}" "${DEBIAN_DISTS}/all/"

         if [ "${OPTION_UPDATE}" = "YES" ] && [ -x "${DEBIAN_DISTS}/did-update.sh" ]
         then
            (
              log_info "Executing ./did-update.sh in ..."

              cd "${DEBIAN_DISTS}"
              # let some script take over
              ./did-update.sh "${debianfile}"
            ) || exit 1
         fi
      else
         log_info "No folder \"${DEBIAN_DISTS}\" found. No update will run"
      fi
   else
      log_verbose "No PUBLISHER_DEBIAN_DISTNAME set"
   fi
}


########
###
### INIT
###
_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions are not installed" >&2 && \
      exit 1
   fi

   # shellcheck source=../mulle-bashfunctions/src/mulle-bashfunctions.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh"

   if [ -z "`command -v mulle-project-env`" ]
   then
      cat <<EOF >&2
mulle-project-env not found in PATH.
Visit the homepage for installation instructions:
      https://github.com/mulle-nat/mulle-project
EOF
      exit 1
   fi

   INSTALLED_MULLE_PROJECT_VERSION="`mulle-project-env version`" || exit 1
   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-git.sh" || exit 1
   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   set -o pipefail
}


###
### INIT
###
########


_init "$@" # needs params
main "$@"
