#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####

usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage: mulle-project-version [options] [projectname]

   Get or increment the project version. The version must be readable from
   a variable or constant in  either of two formats:

   \`major.minor.patch\` or \`((major << 20) | (minor << 8) | patch)\`, where
   other shift integer values are possible.

   Major : incompatible API changes
   Minor : API additions
   Patch : Fixes

   Examples:
      static int   version = ((1 << 16) | (2 << 5) | 3)
      VERSION="1.2.3"
      #define VERSION   "1.2.3"

   For special purposed like mulle-gdb you can have an additional custom
   part makeing the version look like this "1.2.3.4"

Options:
   ++                    : shorthand for --increment-patch --write
   --add-patch <value>   : add value to patch version part, needs --write
   --custom-versioning   : use custom versioning (four numbers)
   --first-patch-one     : set patch to 1 for minor/major increments
   --first-patch-zero    : set patch to 0 for minor/major increments
   --increment-major     : add 1 to major versionpart, needs --write
   --increment-minor     : add 1 to minor version part, needs --write
   --increment-patch     : add 1 to patch version part, needs --write
   --increment-custom    : add 1 to custom (fourth) version part, needs --write
   --if-needed           : increment, if needed only (determined by status)
   --language <name>     : project language, (c, obj, cpp, bash etc)
   --no-info             : do not read -info.sh files
   --no-tag-warning      : do not warn if git tag exists
   --print-latest-tag    : print latest release tag
   --releasenotes        : read RELEASENOTES.md version
   --no-releasenotes     : ignore RELEASENOTES.md version
   --read-xcode-version  : read version from Xcode project
   --set <value>         : set version, needs --write to persist change
   --status              : prints. if project version needs a bump. Preempts.
   --versionname <name>  : version variable name
   --write               : update versionfile with new version
   --write-xcode-version : write version to Xcode project
   --xcodeproj <dir>     : specify path of .xcodeproj directory

Environment:
   VERSIONFILE           : File to look for master version number
   VERSIONNAME           : Variable name of the version number
   VERSIONCUSTOM         : Set to YES for custom versioning
   VERSIONFILEMIRRORS    : Other files containing the version number

EOF
   exit 1
}



get_xcodeproj_version()
{
   log_entry "get_xcodeproj_version" "$@"

   local filename="$1/project.pbxproj"

   if [ ! -f "${filename}" ]
   then
      fail "Xcode project file \"${filename}\" not found"
   fi

   egrep '^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=' "${filename}" | \
     head -1 | \
     sed 's|^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\([0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*\).*|\1|'
}


get_version()
{
   log_entry "get_version" "$@"

   if [ "${OPTION_READ_XCODE_VERSION}" = 'YES' -o "${OPTION_WRITE_XCODE_VERSION}" = 'YES' ]
   then
      ACTUAL_XCODEPROJ="${OPTION_XCODEPROJ}"
      if [ -z "${ACTUAL_XCODEPROJ}" ]
      then
         ACTUAL_XCODEPROJ="`ls -1d *.xcodeproj | head -1`" 2> /dev/null
         if [ -z "${ACTUAL_XCODEPROJ}" ]
         then
            fail "No Xcode project found"
         fi
      fi

      XCODE_VERSION="`get_xcodeproj_version "${ACTUAL_XCODEPROJ}"`"
      if [ -z "${XCODE_VERSION}" ]
      then
         fail "could not read CURRENT_PROJECT_VERSION from \"${ACTUAL_XCODEPROJ}\""
      fi

      if [ "${OPTION_READ_XCODE_VERSION}" = 'YES' ]
      then
         VERSION="${XCODE_VERSION}"
      fi
   fi

   #
   # these can usually be deduced, if you follow the conventions
   #
   if [ -z "${VERSION}" ]
   then
      if [ -z "${LANGUAGE}" ]
      then
         LANGUAGE="`get_language_from_directoryname "${DIRECTORY_NAME}"`"
         log_verbose "LANGUAGE is \"${LANGUAGE}\""
      fi

      if [ -z "${VERSIONFILE}" ]
      then
         VERSIONFILE="`get_header_from_project "${PROJECT}" "${LANGUAGE}"`"
      fi

      if [ -z "${VERSIONNAME}" ]
      then
         if [ ! -z "${PROJECT_UPCASE_IDENTIFIER}" ]
         then
            VERSIONNAME="${PROJECT_UPCASE_IDENTIFIER}_VERSION"
         else
            r_de_camel_case_upcase_identifier "${PROJECT}"
            VERSIONNAME="${RVAL}_VERSION"
         fi
      fi

      if [ ! -f "${VERSIONFILE}" -a -f "VERSION" ]
      then
         VERSION="`egrep -v '^#' "VERSION"`"
         if [ ! -z "${VERSION}" ]
         then
            VERSIONFILE="VERSION"
            VERSIONNAME=""
         fi
      else
         VERSION="`get_project_version "${VERSIONFILE}" "${VERSIONNAME}" "${VERSIONCUSTOM}"`"
         if [ -z "${VERSION}" ]
         then
            VERSION="`get_project_version "src/version.h" "${VERSIONNAME}" "${VERSIONCUSTOM}"`"
            if [ ! -z "${VERSION}" ]
            then
               VERSIONFILE="src/version.h"
            fi
         fi
      fi
   else
      VERSIONFILE=
   fi

   if [ -z "${VERSION}" ]
   then
      fail "Could not figure out the version for PROJECT=\"${PROJECT}\", \
LANGUAGE=\"${LANGUAGE}\", VERSIONNAME=\"${VERSIONNAME}\", \
VERSIONFILE=\"${VERSIONFILE}\".
Hint: specify VERSIONNAME, VERSIONFILE in .mulle/etc/project/version-info.sh"
   else
      log_fluff "Versionfile: ${VERSIONFILE}"
   fi
}


get_latest_releasenote_version()
{
   log_entry "get_latest_releasenote_version" "$@"

   local filename="$1"

   if [ ! -f "${filename}" ]
   then
      log_debug "Releasenote file \"${filename}\" not found."
      return 1
   fi

   sed -n 's/^#*[[:space:]]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/p' \
          "${filename}" \
   | head -1

   return 0
}



info_version()
{
   log_entry "info_version" "$@"

   local version="$1"
   local last="$2"

   local last

   if [ ! -z "${last}" ]
   then
      log_info "Version is ${version}. Last git tag is \"${last}\"."
   else
      log_info "No git tag \"${version}\" exists. (git fetch --tags maybe ?)"
   fi
}


info_releasenotes()
{
   log_entry "info_releasenotes" "$@"

   local version="$1"

   local releasenotes_version

   if releasenotes_version="`get_latest_releasenote_version "RELEASENOTES.md"`"
   then
      if [ -z "${releasenotes_version}" ]
      then
         log_warning "No version found in RELEASENOTES.md"
      else
         if [ "${releasenotes_version}" != "${version}" ]
         then
            log_warning "Last RELEASENOTES.md version is ${releasenotes_version}"
         else
            log_info "Last RELEASENOTES.md version is ${version}"
         fi
      fi
   fi
}


status_version()
{
   log_entry "status_version" "$@"

   local info

   info=" "
   if git_can_amend
   then
      info=", amendable "
   fi

   local last

   last="`rexekutor git tag -l --sort=-creatordate | egrep -x '[0-9]*\.[0-9]*\.[0-9]*' | head -1`"
   info_version "${VERSION}" "${last}"

   if [ "${OPTION_RELEASENOTES}" != 'NO' ]
   then
      info_releasenotes "${VERSION}"
   fi

   if [ -z "${last}" ]
   then
      log_info "Project has never been tagged, so version is probably OK."
      if ! git_is_clean
      then
         log_info "There are ${C_WARNING}uncommitted${info}${C_INFO}changes."
         return 1
      fi
      return 0
   fi

   if [ "${VERSION}" = "${last}" ]
   then
      local counts

      counts="`rexekutor git rev-list --left-right --count master...${last} `" || exit 1

      log_debug "Counts for master...${last}: ${counts}"

      # clumsy
      local master_count
      local last_count=0

      for count in ${counts}
      do
         if [ -z "${master_count}" ]
         then
            master_count="${count}"
         else
            last_count="${count}"
         fi
      done

      if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
      then
         log_trace2 "master_count : ${master_count:-0}"
         log_trace2 "last_count   : ${last_count}"
      fi

      if [ ${master_count:-0} -gt 0 ]
      then
         log_warning "Project version needs a bump, as there are commits."
         if ! git_is_clean
         then
            log_info "There are ${C_WARNING}uncommitted${info}${C_INFO}changes."
            rexekutor mulle-project-commit -v -n --status ${MULLE_PROJECT_COMMIT_FLAGS}
         fi
         return 1
      fi

      if ! git_is_clean
      then
         log_warning "Project version needs a bump, as there are uncommitted${info}changes."
         rexekutor mulle-project-commit -v -n --status ${MULLE_PROJECT_COMMIT_FLAGS}
         return 1
      fi

      log_info "Project version is OK, as there are no changes."
      return 0
   fi

   if ! git_is_clean
   then
      log_info "Project version is already bumped, for the ${C_WARNING}uncommitted${info}${C_INFO}changes."
      rexekutor mulle-project-commit -v -n --status ${MULLE_PROJECT_COMMIT_FLAGS}
      return 1
   fi

   log_info "Project version is already bumped and there are no uncommitted changes."
   return 0
}



warn_version()
{
   log_entry "warn_version" "$@"

   if [ "${OPTION_TAG_WARNING}" = 'YES' ]
   then
      if git_tag_exists "${VERSION}"
      then
         log_warning "${VERSION} already exists as a git tag"
      else
         last="`rexekutor git tag -l --sort=-creatordate | egrep -x '[0-9]*\.[0-9]*\.[0-9]*' | head -1`"

         info_version "${VERSION}" "${last}"
      fi

      if [ "${OPTION_RELEASENOTES}" != 'NO' ]
      then
         info_releasenotes "${VERSION}"
      fi
   fi
}


edit_version()
{
   log_entry "edit_version" "$@"

   [ "${OPTION_ADD_MAJOR}" -ne 0 ] &&
      [ "${OPTION_ADD_MINOR}" -ne 0 -o "${OPTION_ADD_PATCH}" -ne 0 -o "${OPTION_ADD_CUSTOM}" -ne 0 ] &&
         fail "only specify major to increment"

   [ "${OPTION_ADD_MINOR}" -ne 0 ] &&
      [ "${OPTION_ADD_PATCH}" -ne 0 -o "${OPTION_ADD_CUSTOM}" -ne 0 ] &&
         fail "only specify minor to increment"

   [ "${OPTION_ADD_PATCH}" -ne 0 ] &&
      [ "${OPTION_ADD_CUSTOM}" -ne 0 ] &&
         fail "only specify patch to increment"

   OLDVERSION="${VERSION}"

   if [ "${OPTION_ADD_MAJOR}" -ne 0 -o \
        "${OPTION_ADD_MINOR}" -ne 0 -o \
        "${OPTION_ADD_PATCH}" -ne 0 -o \
        "${OPTION_ADD_CUSTOM}" -ne 0 ]
   then
      if [ -z "${VERSIONFILE}" ]
      then
         fail "Don't know how to increment version"
      fi

      VERSION="`project_version_add "${VERSION}" \
                                    "${OPTION_ADD_MAJOR}" \
                                    "${OPTION_ADD_MINOR}" \
                                    "${OPTION_ADD_PATCH}" \
                                    "${OPTION_ADD_CUSTOM}" \
                                    "0" \
                                    "${OPTION_FIRST_PATCH}" \
                                    "${OPTION_FIRST_CUSTOM}"`" || exit 1
   fi
}


write_version()
{
   log_entry "write_version" "$@"

   if [ "${VERSIONIMMUTABLE}" = 'YES' ]
   then
      fail "Version is immutable (VERSIONIMMUTABLE=${VERSIONIMMUTABLE})"
   fi

   if [ "${OPTION_WRITE}" = 'YES' ]
   then
      #
      # small hack for extensions to distribute versioning
      # improve with namekeys later
      #
      local other

      shell_disable_glob; IFS=$'\n'
      for other in ${VERSIONFILEMIRRORS}
      do
         IFS="${DEFAULT_IFS}" ; shell_enable_glob

         if [ ! -z "${other}" ]
         then
            set_project_version "${VERSION}" \
                                "${other}" \
                                "${VERSIONMIRRORNAME}" \
                                "${VERSIONCUSTOM}" || exit 1
         fi
      done
      IFS="${DEFAULT_IFS}" ; shell_enable_glob

      # set mirrors first before "real", which is nicer in case of fails
      set_project_version "${VERSION}" \
                          "${VERSIONFILE}" \
                          "${VERSIONNAME}" \
                          "${VERSIONCUSTOM}" || exit 1
   fi

   if [ "${OPTION_WRITE_XCODE_VERSION}" = 'YES' ]
   then
      inplace_sed -e 's|^\([[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\)'${XCODE_VERSION}'\(.*\)|\1'${VERSION}'\2|' \
                     "${ACTUAL_XCODEPROJ}/project.pbxproj"
   fi

   if [ "${OPTION_WRITE_EXTENSION_VERSIONS}" = 'YES' ]
   then
      exekutor mulle-project-extension-versions --project-version "${VERSION}" bump
   fi
}


verify_version()
{
   # lame ass bug check
   case "$*" in
      *--reset*)
         internal_fail "verify called too often"
      ;;
   esac

   VERIFY_VERSION="`rexekutor "$0" "$@" --reset`" || internal_fail "Could not get VERIFY_VERSION"

   if [ "${VERSION}" != "${VERIFY_VERSION}" ]
   then
      fail "Version could not be set to ${VERSION} (is ${VERIFY_VERSION})"
   else
      log_info "Version successfully set to ${VERSION}"
   fi

   return 0
}


parse_arguments()
{
   log_entry "parse_arguments" "$@"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         --no-info)
            OPTION_READ_INFO='NO'
         ;;

         --releasenotes)
            OPTION_RELEASENOTES='YES'
         ;;

         --no-releasenotes)
            OPTION_RELEASENOTES='NO'
         ;;

         ++)
            OPTION_ADD_PATCH="1"
            OPTION_WRITE='YES'
         ;;

         --custom-versioning)
            OPTION_CUSTOM_VERSIONING='YES'
         ;;

         --no-tag-warning)
            OPTION_TAG_WARNING='NO'
         ;;

         --ignore-untracked)
            r_concat "${MULLE_PROJECT_COMMIT_FLAGS}" "$1"
            MULLE_PROJECT_COMMIT_FLAGS="${RVAL}"
         ;;

         --increment-major)
            OPTION_ADD_MAJOR="1"
         ;;

         --increment-minor)
            OPTION_ADD_MINOR="1"
         ;;

         --increment-patch)
            OPTION_ADD_PATCH="1"
         ;;

         --increment-custom)
            OPTION_ADD_CUSTOM="1"
         ;;

         --if-needed)
            OPTION_IF_NEEDED='YES'
         ;;

         --print-latest-tag)
            git_last_tag
            exit $?
         ;;

         --first-patch-zero)
            OPTION_FIRST_PATCH="0"
         ;;

         --set|--set-version)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_VERSION_SET="$1"
         ;;

         --first-patch-one)
            OPTION_FIRST_PATCH="1"
         ;;

         --add-patch)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ADD_PATCH="$1"
         ;;

         --first-custom-one)
            OPTION_FIRST_CUSTOM="1"
         ;;

         --add-custom)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ADD_CUSTOM="$1"
         ;;

         --status)
            OPTION_STATUS='YES'
         ;;

         --write)
            OPTION_WRITE='YES'
         ;;

         --no-write)
            OPTION_WRITE='NO'
         ;;

         --xcodeproj)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_XCODEPROJ="$1"
         ;;

         --read-xcode-version)
            OPTION_READ_XCODE_VERSION='YES'
         ;;

         --write-xcode-version)
            OPTION_WRITE_XCODE_VERSION='YES'
         ;;

         --no-write-xcode-version)
            OPTION_WRITE_XCODE_VERSION='NO'
         ;;

         --write-extension-versions)
            OPTION_WRITE_EXTENSION_VERSIONS='YES'
         ;;

         --no-write-extension-versions)
            OPTION_WRITE_EXTENSION_VERSIONS='NO'
         ;;

         --language)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            LANGUAGE="$1"
         ;;

         --versionname)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONNAME="$1"
         ;;

         --versionfile)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONFILE="$1"
         ;;

         --reset) # stupid option for verify must be last in command line
            OPTION_IF_NEEDED=""
            OPTION_ADD_PATCH="0"
            OPTION_ADD_MINOR="0"
            OPTION_ADD_MAJOR="0"
            OPTION_ADD_CUSTOM="0"
            OPTION_WRITE_XCODE_VERSION='NO'
            OPTION_WRITE='NO'
            OPTION_WRITE_EXTENSION_VERSIONS='NO'
            OPTION_TAG_WARNING='NO'
         ;;

         -*)
            usage "Unknown option $1"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   r_basename "${PWD}"
   DIRECTORY_NAME="${RVAL}"

   if [ -z "${PROJECT}" ]
   then
      PROJECT="${1:-${DIRECTORY_NAME}}"
      [ $# -ne 0 ] && shift
   fi
}


main()
{
   local directory

   local OPTION_ADD_MAJOR="0"
   local OPTION_ADD_MINOR="0"
   local OPTION_ADD_PATCH="0"
   local OPTION_ADD_CUSTOM="0"
   local OPTION_FIRST_PATCH="0"
   local OPTION_FIRST_CUSTOM="0"
   local OPTION_READ_INFO='YES'
   local OPTION_READ_XCODE_VERSION='NO'
   local OPTION_WRITE='DEFAULT'
   local OPTION_WRITE_XCODE_VERSION='DEFAULT'
   local OPTION_WRITE_EXTENSION_VERSIONS='DEFAULT'
   local OPTION_XCODEPROJ=""
   local OPTION_TAG_WARNING='YES'
   local OPTION_CUSTOM_VERSIONING
   local OPTION_VERSIONNAME
   local OPTION_VERSIONFILE
   local OPTION_IS_OK
   local OPTION_IF_NEEDED
   local OPTION_RELEASENOTES

   if [ -f ".mulle/etc/project/.first_patch" ]
   then
      OPTION_FIRST_PATCH="`cat ".mulle/etc/project/.first_patch"`"
   fi

   parse_arguments "$@"

   if [ "${OPTION_READ_INFO}" = 'YES' ]
   then
      if [ -f "./.mulle/etc/project/version-info.sh" ]
      then
         . ./.mulle/etc/project/version-info.sh
      fi
      if [ -f "./.mulle/etc/project/release-info.sh" ]
      then
         . ./.mulle/etc/project/release-info.sh
      fi
      if [ -f "./.mulle/etc/project/formula-info.sh" ]
      then
         . ./.mulle/etc/project/formula-info.sh
      fi
   fi

   VERSIONNAME="${OPTION_VERSIONNAME:-${VERSIONNAME}}"
   VERSIONFILE="${OPTION_VERSIONFILE:-${VERSIONFILE}}"
   VERSIONCUSTOM="${OPTION_CUSTOM_VERSIONING:-${VERSIONCUSTOM}}"

   if [ "${OPTION_WRITE}" = "${DEFAULT}" ]
   then
      OPTION_WRITE="NO"
   fi

   if [ "${OPTION_WRITE_XCODE_VERSION}" = 'DEFAULT' ]
   then
      if [ "${OPTION_WRITE}" = "YES" ]
      then
         OPTION_WRITE_XCODE_VERSION="${OPTION_WRITE_XCODE_VERSION:-NO}"
      else
         OPTION_WRITE_XCODE_VERSION="NO"
      fi
   fi

   # do this by default
   if [ "${OPTION_WRITE_EXTENSION_VERSIONS}" = 'DEFAULT' ]
   then
      if [ "${OPTION_WRITE}" = "YES" ]
      then
         OPTION_WRITE_EXTENSION_VERSIONS="${OPTION_WRITE_EXTENSION_VERSIONS:-YES}"
      else
         OPTION_WRITE_EXTENSION_VERSIONS="NO"
      fi
   fi

   get_version

   if [ "${OPTION_STATUS}" = 'YES' ]
   then
      status_version
      return $?
   fi

   if [ "${OPTION_IF_NEEDED}" = 'YES' ] && status_version
   then
      log_verbose "Nothing to do"
      return 0
   fi


   if [ ! -z "${OPTION_VERSION_SET}" ]
   then
      VERSION="${OPTION_VERSION_SET}"
   else
      edit_version
   fi

   if [ "${OPTION_TAG_WARNING}" = 'YES' ]
   then
      warn_version
   fi

   log_verbose "VERSION=${VERSION}"
   log_verbose "VERSIONNAME=${VERSIONNAME}"
   log_verbose "VERSIONFILE=${VERSIONFILE}"
   log_verbose "VERSIONCUSTOM=${VERSIONCUSTOM}"

   if [ "${OPTION_WRITE}" = 'YES' \
        -o "${OPTION_WRITE_XCODE_VERSION}" = 'YES' \
        -o "${OPTION_WRITE_EXTENSION_VERSIONS}" = 'YES' ]
   then
      write_version "$@" &&
      verify_version "$@"
      return $?
   fi

   printf "%s\n" "${VERSION}"
   return 0
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"             || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"             || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-case.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-case.sh"             || exit 1

   #
   # prefer local mulle-project if available
   # Do not embed it anymore!
   #
   if [ -z "`command -v mulle-project-env`" ]
   then
      cat <<EOF >&2
mulle-project-env not found in PATH.
Visit the homepage for installation instructions:
   https://github.com/mulle-nat/mulle-project
EOF
      exit 1
   fi

   INSTALLED_MULLE_PROJECT_VERSION="`mulle-project-env version`" || exit 1
   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1
   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-git.sh" || exit 1
}



MULLE_EXECUTABLE="${MULLE_EXECUTABLE:-${BASH_SOURCE[0]:-${(%):-%x}}}"

_init "$@"

main "$@"
