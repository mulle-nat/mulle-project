#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


usage()
{
   [ "$#" -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage: mulle-project-version [options] [projectname]

   Get or increment the project version. The version must be readable from
   a variable or constant in  either of two formats:

   \`major.minor.patch\` or \`((major << 20) | (minor << 8) | patch)\`, where
   other shift integer values are possible.

   Examples:
      static int   version = ((1 << 16) | (2 << 5) | 3)
      VERSION="1.2.3"
      #define VERSION   "1.2.3"

Options:
   ++                    : shorthand for --increment-patch --write
   --add-patch <value>   : add value to patch version part, needs --write
   --first-patch-one     : set patch to 1 for minor/major increments
   --first-patch-zero    : set patch to 0 for minor/major increments
   --increment-major     : add 1 to major versionpart, needs --write
   --increment-minor     : add 1 to minor version part, needs --write
   --increment-patch     : add 1 to patch version part, needs --write
   --language <name>     : project language, (c, obj, cpp, bash etc)
   --no-info             : do not read -info.sh files
   --no-tag-warning      : do not warn if git tag exists
   --print-latest-tag    : print latest release tag
   --read-xcode-version  : read version from Xcode project
   --set <value>         : set version, needs --write to persist change
   --versionname <name>  : version variable name
   --write               : update versionfile with new version
   --write-xcode-version : write version to Xcode project
   --xcodeproj <dir>     : specify path of .xcodeproj directory
EOF
   exit 1
}



get_xcodeproj_version()
{
   log_entry "get_xcodeproj_version" "$@"

   local filename="$1/project.pbxproj"

   if [ ! -f "${filename}" ]
   then
      fail "Xcode project file \"${filename}\" not found"
   fi

   egrep '^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=' "${filename}" | \
     head -1 | \
     sed 's|^[[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\([0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*\).*|\1|'
}


get_version()
{
   log_entry "get_version" "$@"

   if [ "${OPTION_READ_XCODE_VERSION}" = 'YES' -o "${OPTION_WRITE_XCODE_VERSION}" = 'YES' ]
   then
      ACTUAL_XCODEPROJ="${OPTION_XCODEPROJ}"
      if [ -z "${ACTUAL_XCODEPROJ}" ]
      then
         ACTUAL_XCODEPROJ="`ls -1d *.xcodeproj | head -1`" 2> /dev/null
         if [ -z "${ACTUAL_XCODEPROJ}" ]
         then
            fail "No Xcode project found"
         fi
      fi

      XCODE_VERSION="`get_xcodeproj_version "${ACTUAL_XCODEPROJ}"`"
      if [ -z "${XCODE_VERSION}" ]
      then
         fail "could not read CURRENT_PROJECT_VERSION from \"${ACTUAL_XCODEPROJ}\""
      fi

      if [ "${OPTION_READ_XCODE_VERSION}" = 'YES' ]
      then
         VERSION="${XCODE_VERSION}"
      fi
   fi

   #
   # these can usually be deduced, if you follow the conventions
   #
   if [ -z "${VERSION}" ]
   then
      if [ -z "${LANGUAGE}" ]
      then
         LANGUAGE="`get_language_from_directoryname "${DIRECTORY_NAME}"`"
         log_verbose "LANGUAGE is \"${LANGUAGE}\""
      fi

      if [ -z "${VERSIONFILE}" ]
      then
         VERSIONFILE="`get_header_from_project "${PROJECT}" "${LANGUAGE}"`"
      fi

      if [ -z "${VERSIONNAME}" ]
      then
         VERSIONNAME="`get_versionname_from_project "${PROJECT}"`"
      fi

      if [ ! -f "${VERSIONFILE}" -a -f "VERSION" ]
      then
         VERSION="`egrep -v '^#' "VERSION"`"
         if [ ! -z "${VERSION}" ]
         then
            VERSIONFILE="VERSION"
            VERSIONNAME=""
         fi
      else
         VERSION="`get_project_version "${VERSIONFILE}" "${VERSIONNAME}"`"
         if [ -z "${VERSION}" ]
         then
            VERSION="`get_project_version "src/version.h" "${VERSIONNAME}"`"
            if [ ! -z "${VERSION}" ]
            then
               VERSIONFILE="src/version.h"
            fi
         fi
      fi
   else
      VERSIONFILE=
   fi

   if [ -z "${VERSION}" ]
   then
      fail "Could not figure out the version for PROJECT=\"${PROJECT}\", \
LANGUAGE=\"${LANGUAGE}\", VERSIONNAME=\"${VERSIONNAME}\", \
VERSIONFILE=\"${VERSIONFILE}\".
Hint: specify VERSIONNAME, VERSIONFILE in .mulle/etc/project/version-info.sh"
   else
      log_fluff "Versionfile: ${VERSIONFILE}"
   fi
}


warn_version()
{
   log_entry "warn_version" "$@"

   if [ "${OPTION_TAG_WARNING}" = 'YES' ]
   then
      if git_tag_exists "${VERSION}"
      then
         log_warning "${VERSION} already exists as a git tag"
      else
         local last

         last="`git_last_tag`"
         if [ ! -z "${last}" ]
         then
            log_info "Version is ${VERSION}. Last git tag is \"${last}\"."
         else
            log_info  "No git tag \"${VERSION}\" exists. (git fetch --tags maybe ?)"
         fi
      fi
   fi
}


edit_version()
{
   log_entry "edit_version" "$@"

   [ "${OPTION_ADD_MAJOR}" -ne 0 ] &&
      [ "${OPTION_ADD_MINOR}" -ne 0 -o "${OPTION_ADD_PATCH}" -ne 0 ] &&
         fail "only specify major to increment"

   [ "${OPTION_ADD_MINOR}" -ne 0 ] &&
      [ "${OPTION_ADD_PATCH}" -ne 0 ] &&
         fail "only specify minor to increment"

   OLDVERSION="${VERSION}"

   if [ "${OPTION_ADD_MAJOR}" -ne 0 -o \
        "${OPTION_ADD_MINOR}" -ne 0 -o \
        "${OPTION_ADD_PATCH}" -ne 0 ]
   then
      if [ -z "${VERSIONFILE}" ]
      then
         fail "Don't know how to increment version"
      fi

      VERSION="`project_version_add "${VERSION}" \
                                    "${OPTION_ADD_MAJOR}" \
                                    "${OPTION_ADD_MINOR}" \
                                    "${OPTION_ADD_PATCH}" \
                                    "0" \
                                    "${OPTION_FIRST_PATCH}"`" || exit 1
   fi
}


write_version()
{
   log_entry "write_version" "$@"

   if [ "${VERSIONIMMUTABLE}" = 'YES' ]
   then
      fail "Version is immutable (VERSIONIMMUTABLE=${VERSIONIMMUTABLE})"
   fi

   if [ "${OPTION_WRITE_XCODE_VERSION}" = 'YES' ]
   then
      inplace_sed -e 's|^\([[:space:]]*CURRENT_PROJECT_VERSION[[:space:]]*=[[:space:]]*["]*\)'${XCODE_VERSION}'\(.*\)|\1'${VERSION}'\2|' "${ACTUAL_XCODEPROJ}/project.pbxproj"
   fi

   if [ "${OPTION_WRITE}" = 'YES' ]
   then
      #
      # small hack for extensions to distribute versioning
      # improve with namekeys later
      #
      local other

      set -o noglob ; IFS=$'\n'
      for other in ${VERSIONFILEMIRRORS}
      do
         IFS="${DEFAULT_IFS}" ; set +o noglob

         if [ ! -z "${other}" ]
         then
            set_project_version "${VERSION}" "${other}" "${VERSIONMIRRORNAME}" || exit 1
         fi
      done
      IFS="${DEFAULT_IFS}" ; set +o noglob

      # set mirrors first before "real", which is nicer in case of fails
      set_project_version "${VERSION}" "${VERSIONFILE}" "${VERSIONNAME}" || exit 1
   fi

   VERIFY_VERSION="`"$0" "$@" --reset`"

   if [ "${VERSION}" != "${VERIFY_VERSION}" ]
   then
      fail "Version could not be set to ${VERSION} (is ${VERIFY_VERSION})"
   else
      log_info "Version successfully set to ${VERSION}"
   fi

   return 0
}


parse_arguments()
{
   log_entry "parse_arguments" "$@"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         --no-info)
            OPTION_READ_INFO='NO'
         ;;

         ++)
            OPTION_ADD_PATCH="1"
            OPTION_WRITE='YES'
         ;;

         --no-tag-warning)
            OPTION_TAG_WARNING='NO'
         ;;

         --increment-major)
            OPTION_ADD_MAJOR="1"
         ;;

         --increment-major)
            OPTION_ADD_MAJOR="1"
         ;;

         --increment-minor)
            OPTION_ADD_MINOR="1"
         ;;

         --increment-minor)
            OPTION_ADD_MINOR="1"
         ;;

         --increment-patch)
            OPTION_ADD_PATCH="1"
         ;;

         --print-latest-tag)
            git_last_tag
            exit $?
         ;;

         --reset) # stupid option for verify must be last
            OPTION_ADD_PATCH="0"
            OPTION_ADD_MINOR="0"
            OPTION_ADD_MAJOR="0"
            OPTION_WRITE_XCODE_VERSION='NO'
            OPTION_WRITE='NO'
            OPTION_TAG_WARNING='NO'
         ;;

         --first-patch-zero)
            OPTION_FIRST_PATCH="0"
         ;;

         -set|--set-version)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_VERSION_SET="$1"
         ;;


         --first-patch-one)
            OPTION_FIRST_PATCH="1"
         ;;

         --add-patch)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_ADD_PATCH="$1"
         ;;

         --write)
            OPTION_WRITE='YES'
         ;;

         --no-write)
            OPTION_WRITE='NO'
         ;;

         --xcodeproj)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_XCODEPROJ="$1"
         ;;

         --read-xcode-version)
            OPTION_READ_XCODE_VERSION='YES'
         ;;

         --write-xcode-version)
            OPTION_WRITE_XCODE_VERSION='YES'
         ;;

         --no-write-xcode-version)
            OPTION_WRITE_XCODE_VERSION='NO'
         ;;

         --language)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            LANGUAGE="$1"
         ;;

         --versionname)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONNAME="$1"
         ;;

         --versionfile)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_VERSIONFILE="$1"
         ;;

         -t)
            set -x
         ;;


         -*)
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   DIRECTORY_NAME="`basename -- "$PWD"`"

   if [ -z "${PROJECT}" ]
   then
      PROJECT="${1:-${DIRECTORY_NAME}}"
      [ $# -ne 0 ] && shift
   fi
}


main()
{
   local directory

   local OPTION_ADD_MAJOR="0"
   local OPTION_ADD_MINOR="0"
   local OPTION_ADD_PATCH="0"
   local OPTION_FIRST_PATCH="0"
   local OPTION_READ_INFO='YES'
   local OPTION_READ_XCODE_VERSION='NO'
   local OPTION_WRITE='NO'
   local OPTION_WRITE_XCODE_VERSION='NO'
   local OPTION_XCODEPROJ=""
   local OPTION_TAG_WARNING='YES'

   local OPTION_VERSIONNAME
   local OPTION_VERSIONFILE

   if [ -f ".mulle/etc/project/.first_patch" ]
   then
      OPTION_FIRST_PATCH="`cat ".mulle/etc/project/.first_patch"`"
   fi

   parse_arguments "$@"

   if [ "${OPTION_READ_INFO}" = 'YES' ]
   then
      if [ -f "./.mulle/etc/project/version-info.sh" ]
      then
         . ./.mulle/etc/project/version-info.sh
      fi
      if [ -f "./.mulle/etc/project/release-info.sh" ]
      then
         . ./.mulle/etc/project/release-info.sh
      fi
      if [ -f "./.mulle/etc/project/formula-info.sh" ]
      then
         . ./.mulle/etc/project/formula-info.sh
      fi
   fi

   VERSIONNAME="${OPTION_VERSIONNAME:-${VERSIONNAME}}"
   VERSIONFILE="${OPTION_VERSIONFILE:-${VERSIONFILE}}"

   get_version

   if [ ! -z "${OPTION_VERSION_SET}" ]
   then
      VERSION="${OPTION_VERSION_SET}"
   else
      edit_version
   fi

   if [ "${OPTION_TAG_WARNING}" = 'YES' ]
   then
      warn_version
   fi

   log_verbose "VERSION=${VERSION}"
   log_verbose "VERSIONNAME=${VERSIONNAME}"
   log_verbose "VERSIONFILE=${VERSIONFILE}"

   if ! [ "${OPTION_WRITE}" = 'YES' -o "${OPTION_WRITE_XCODE_VERSION}" = 'YES' ]
   then
      printf "%s\n" "${VERSION}"
      return 0
   fi

   write_version "$@"
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"             || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"             || exit 1


   #
   # prefer local mulle-project if available
   # Do not embed it anymore!
   #
   if [ -z "`command -v mulle-project-env`" ]
   then
      cat <<EOF >&2
mulle-project-env not found in PATH.
Visit the homepage for installation instructions:
   https://github.com/mulle-nat/mulle-project
EOF
      exit 1
   fi

   INSTALLED_MULLE_PROJECT_VERSION="`mulle-project-env version`" || exit 1
   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-version.sh" || exit 1
   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-git.sh" || exit 1
}



_init "$@"
main "$@"


