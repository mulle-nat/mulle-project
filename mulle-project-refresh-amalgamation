#! /usr/bin/env mulle-bash
#! MULLE_BASHFUNCTIONS_VERSION=<|MULLE_BASHFUNCTIONS_VERSION|>
# shellcheck shell=bash
#


[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_REFRESH_AMALGAMATION_TRACE}" = 'YES' ] \
&& set -x  \
&& : "$0" "$@"

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f    : force operation"

   ##
   ## ADD YOUR FLAGS DESCRIPTIONS HERE
   ##

   options_technical_flags_usage \
           "      : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-refresh-amalgamation [flags]

   ##
   ## ADD YOUR USAGE DESCRIPTION HERE
   ##

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}

create_clib_json()
{
   local constituent="$1"

   log_info "Create clib.json for \"${constituent#${MULLE_USER_PWD}/}\""
   (
      cd "${constituent}" &&
      rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} reflect &&
      rexekutor mulle-project-clib-json ${MULLE_TECHNICAL_FLAGS} -o "clib.json"
   ) || fail "Could not create \"clib.json\" for \"${constituent#${MULLE_USER_PWD}/}\""
}


create_clib_json_in_constituents()
{
   local constituents="$1"

   include "parallel"

   parallel_execute "${constituents}" create_clib_json
}


reamalgamate()
{
   log_info "Reamalgamate"

   rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} clean -g &&
   rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} fetch &&
   rexekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} reflect
}


search_local_repos()
{
   local repos="$1"

   include "parallel"

   parallel_execute "${repos}" mulle-sde run mulle-fetch search-local
}


refresh()
{
   local nodes
   local node

   log_verbose "Collecting nodes..."

   nodes="`rexekutor mulle-sourcetree ${MULLE_TECHNICAL_FLAGS} list --marks Amalgamated --output-no-header \
          | grep -E '^src/' \
          | sed -e 's/^src//' `"

   log_debug "nodes: ${nodes}"
   if [ -z "${nodes}" ]
   then
      fail "No amalgamation nodes found"
   fi

   local constituents

   constituents="`search_local_repos "${nodes}" `" || exit 1

   create_clib_json_in_constituents "${constituents}" &&
   reamalgamate
}



main()
{
   #
   # simple option/flag handling
   #
   local OPTION_VALUE

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --value)
            [ $# -eq 1 ] && match_list_usage "missing argument to $1"
            shift

            OPTION_VALUE="$1"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;


         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   refresh "$@"
}

#
# You can also use the function `call_with_flags`, which has been defined
# during mulle-boot. It lets you call 'main'
# with MULLE_PROJECT_REFRESH_AMALGAMATION_FLAGS interposed.
#
# call_with_flags "main" "${MULLE_PROJECT_REFRESH_AMALGAMATION_FLAGS}" "$@"

main "$@"
