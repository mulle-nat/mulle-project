#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_COMMIT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f                 : force operation"
   echo "   --always-amend     : always amend the commit [dangerous]"
   echo "   --boring           : all files are considered to be boring"
   echo "   --no-amend         : never amend, just create a new commit [most safe]"
   echo "   --no-diff          : don't diff non-boring changes"
   echo "   --safe-amend       : amend if harmless, otherwise new commit (default)"
   echo "   --only-amend       : don't commit, if an amend is not possible"
   echo "   --ignore-untracked : ignore untracked files"

   options_technical_flags_usage \
                "              : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-commit [flags]

   Automatically commit with \`--amend\` the current changes, if the changes 
   are due to a mulle-sde upgrade. In more technical terms, changes in "share"
   and "reflect" folders are considered boring.

   It is checked that only a commit is amended, that hasn't been tagged
   or pushed yet.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_IGNORE_UNTRACKED
   local OPTION_AMEND='DEFAULT'
   local OPTION_STATUS
   local OPTION_DIFF='YES'
   local OPTION_BUMP
   local OPTION_BORING

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --amend)
            OPTION_AMEND='YES'
         ;;

         --no-amend)
            OPTION_AMEND='NO'
         ;;

         --safe-amend)
            OPTION_AMEND='DEFAULT'
         ;;

         --only-amend)
            OPTION_AMEND='ONLY'
         ;;

         --bump-if-needed)
            OPTION_BUMP='YES'
         ;;

         -u|--ignore-untracked)
            OPTION_IGNORE_UNTRACKED='YES'
         ;;

         --boring)
            OPTION_BORING='YES'
         ;;

         --diff)
            OPTION_DIFF='YES'
         ;;

         --no-diff)
            OPTION_DIFF='NO'
         ;;

         --status)
            OPTION_STATUS='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            shift
            break
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-project-git.sh" || exit 1

   #
   # to catch added files so they aren't untracked
   # need to grab this from mulle-sde environment somehow, but for now
   # its hardcoded.
   #
   exekutor git add --ignore-errors \
                      .mulle/share \
                      .mulle/etc/env/environment-host-ci-*.sh \
                      cmake/share \
                      cmake/reflect \
                      src/reflect \
                      */.mulle/share \
                      */.mulle/etc/env/environment-host-ci-*.sh \
                      */cmake/share \
                      */cmake/reflect \
                      */src/reflect \
                      */*/.mulle/share \
                      */*/.mulle/etc/env/environment-host-ci-*.sh \
                      */*/cmake/share \
                      */*/cmake/reflect \
                      */*/src/reflect \
                      cola \
                      overview.dot.svg \
                      .github/workflows \
                      .gitattributes \
                      .gitignore \
                      .travis.yml \
                      .travis.d \
                      .ackrc 2> /dev/null


   local changes

   changes="`rexekutor git status -s `"
   if [ -z "${changes}" ]
   then
      log_info "There are no changes."
      return
   fi

   if [ "${OPTION_IGNORE_UNTRACKED}" = 'YES' ]
   then
      changes="`rexekutor git status -s ${status_options} --untracked-files=no `"
      if [ -z "${changes}" ]
      then
         log_info "There are no changes to tracked files."
         return
      fi
   fi

   local bad_changes

   bad_changes="`rexekutor grep -E '^UU' <<< "${changes}" `"
   if [ ! -z "${bad_changes}" ]
   then
      if [ "${OPTION_STATUS}" = 'YES' ]
      then
         MULLE_LOG_FAIL_ERROR_PREFIX=""
         MULLE_EXECUTABLE_FAIL_PREFIX=""
      fi
      fail "There is an unfinished merge here:
${C_RESET}${bad_changes# }"
   fi

   if [ "${OPTION_BORING}" != 'YES' ]
   then
      local ignore_patterns

      ignore_patterns="/share/|/reflect/|[[:space:]]cola/"
      ignore_patterns="${ignore_patterns}|/environment-host-.*\.sh"
      ignore_patterns="${ignore_patterns}|/environment-user-.*\.sh"
      ignore_patterns="${ignore_patterns}|\.github/workflows"
      ignore_patterns="${ignore_patterns}|\.gitignore|\.gitattributes"
      ignore_patterns="${ignore_patterns}|\.ackrc"
      ignore_patterns="${ignore_patterns}|README\.md"
      ignore_patterns="${ignore_patterns}|overview\.dot\.svg"

      local interesting_changes

      interesting_changes="`grep -E -v "${ignore_patterns}" <<< "${changes}" `"
      if [ ! -z "${interesting_changes}" ]
      then
         if [ "${OPTION_STATUS}" = 'YES' ]
         then
            MULLE_LOG_FAIL_ERROR_PREFIX=""
            MULLE_EXECUTABLE_FAIL_PREFIX=""
         fi

         log_warning "There are possibly interesting changes that may need a commit message:
${C_RESET}${interesting_changes# }"

         if [ "${OPTION_DIFF}" = 'YES' ]
         then
            local line

            .foreachline line in ${interesting_changes}
            .do
               r_trim_whitespace "${line#*\ }"
               rexekutor git diff -r HEAD -- "${RVAL}"
            .done
         fi

         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
         then
            fail "Not proceeding because of diffs (use -f to override)"
         fi
      fi
   fi


#   if [ "${OPTION_BUMP}" = 'YES' ]
#   then


   if [ "${OPTION_STATUS}" != 'YES' ]
   then
      local commit_options

      project::git::r_commit_options "${OPTION_AMEND}" "" "$*"
      commit_options="${RVAL}"

      log_verbose "Add changes and commit..."

      exekutor git add -u &&
      eval_exekutor git commit ${commit_options}
   else
      if project::git::can_amend
      then
         log_info "There are changes to amend"
      else
         log_info "There are changes to commit"
      fi
   fi
}


call_with_flags "main" "${MULLE_PROJECT_COMMIT_FLAGS}" "$@"
