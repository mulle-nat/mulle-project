#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_COMMIT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####


MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f             : force operation"
   echo "   --always-amend : always amend the commit [dangerous]"
   echo "   --no-amend     : never amend, just create a new commit [most safe]"
   echo "   --safe-amend   : amend if harmless, otherwise new commit (default)"
   echo "   --only-amend   : don't commit, if an amend is not possible"
   echo "   -u             : ignore untracked files"

   options_technical_flags_usage \
                "          : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-project-commit [flags]

   Automatically commit with \`--amend\` the current changes, if the changes 
   are due to a mulle-sde upgrade. In more technical terms, changes in "share"
   and "reflect" folders are considered boring.

   It is checked that only a commit is ammended, that hasn't been tagged
   or pushed yet.

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_IGNORE_UNTRACKED
   local OPTION_AMEND='DEFAULT'
   local OPTION_STATUS

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --amend)
            OPTION_AMEND='YES'
         ;;

         --no-amend)
            OPTION_AMEND='NO'
         ;;

         --safe-amend)
            OPTION_AMEND='DEFAULT'
         ;;

         --only-amend)
            OPTION_AMEND='ONLY'
         ;;

         -u|--ignore-untracked)
            OPTION_IGNORE_UNTRACKED='YES'
         ;;

         --status)
            OPTION_STATUS='YES'
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   #
   # to catch added files so they aren't untracked
   # need to grab this from mulle-sde environment somehow, but for now
   # its hardcoded.
   #
   exekutor git add --ignore-errors \
                      .mulle/share \
                      .mulle/etc/env/environment-host-ci-*.sh \
                      cmake/share \
                      cmake/reflect \
                      src/reflect \
                      */.mulle/share \
                      */.mulle/etc/env/environment-host-ci-*.sh \
                      */cmake/share \
                      */cmake/reflect \
                      */src/reflect \
                      */*/.mulle/share \
                      */*/.mulle/etc/env/environment-host-ci-*.sh \
                      */*/cmake/share \
                      */*/cmake/reflect \
                      */*/src/reflect \
                      .github/workflows \
                      .gitattributes \
                      .gitignore \
                      .travis.yml \
                      .travis.d \
                      .ackrc 2> /dev/null


   local changes

   changes="`rexekutor git status -s `"
   if [ -z "${changes}" ]
   then
      log_info "There are no changes."
      return
   fi

   if [ "${OPTION_IGNORE_UNTRACKED}" = 'YES' ]
   then
      changes="`rexekutor git status -s ${status_options} --untracked-files=no `"
      if [ -z "${changes}" ]
      then
         log_info "There are no changes to tracked files."
         return
      fi
   fi

   local bad_changes

   bad_changes="`rexekutor egrep '^UU' <<< "${changes}" `"
   if [ ! -z "${bad_changes}" ]
   then
      if [ "${OPTION_STATUS}" = 'YES' ]
      then
         MULLE_LOG_FAIL_ERROR_PREFIX=""
         MULLE_EXECUTABLE_FAIL_PREFIX=""
      fi
      fail "There is an unfinished merge here:
${C_RESET}${bad_changes# }"
   fi

   local ignore_patterns

   ignore_patterns="/share/|/reflect/"
   ignore_patterns="${ignore_patterns}|/environment-host-.*\.sh"
   ignore_patterns="${ignore_patterns}|/environment-user-.*\.sh"
   ignore_patterns="${ignore_patterns}|\.github/workflows"
   ignore_patterns="${ignore_patterns}|\.gitignore|\.gitattributes"
   ignore_patterns="${ignore_patterns}|\.ackrc"

   local interesting_changes

   interesting_changes="`egrep -v "${ignore_patterns}" <<< "${changes}" `"
   if [ ! -z "${interesting_changes}" ]
   then
      if [ "${OPTION_STATUS}" = 'YES' ]
      then
         MULLE_LOG_FAIL_ERROR_PREFIX=""
         MULLE_EXECUTABLE_FAIL_PREFIX=""
      fi
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
      then
         fail "There are possibly interesting changes that may need a commit message:
${C_RESET}${interesting_changes# }"
      fi
   fi

   if [ "${OPTION_STATUS}" != 'YES' ]
   then
      local commit_options

      r_git_commit_options "${OPTION_AMEND}"
      commit_options="${RVAL}"

      log_verbose "Add changes and commit..."

      exekutor git add -u &&
      eval_exekutor git commit ${commit_options}
   else
      if git_can_amend
      then
         log_info "There are changes to amend"
      else
         log_info "There are changes to commit"
      fi
   fi
}


########
###
### INIT - You usually won't edit code below
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env (${PWD}})" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   MULLE_PROJECT_LIBEXEC_DIR="`mulle-project-env libexec-dir`" || exit 1

   . "${MULLE_PROJECT_LIBEXEC_DIR}/mulle-git.sh" || exit 1

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   shell_enable_pipefail
   shell_enable_extglob

   call_main "${MULLE_PROJECT_COMMIT_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
