#! /usr/bin/env bash

[ "${TRACE}" = 'YES' -o "${BUMB_EXTENSION_VERSIONS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   echo "   -f           : force operation"
   echo "   --vendor <v> : extension vendor name"
   echo "   --tag <t>    : tag to diff against"

   options_technical_flags_usage \
                "        : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   bumb-extension-versions [flags] [command]

   Figure out which extension versions need to be bumped, because they
   have changes from last commit.

Commands:
   bump   : set all extension versions to mulle-project-version, that need it
   unbump : reset all extension versions to last tag, that didn't need a bump
   list   : list all extensuion state

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


list_extension()
{
   log_entry "list_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         log_warning "\"${extension#${MULLE_USER_PWD}/}\" has been needlessly bumped"
      else
         log_info "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
   else
      if [ "${version}" = "${project_version}" ]
      then
         log_info "\"${extension#${MULLE_USER_PWD}/}\" has been bumped already"
      else
         log_warning "\"${extension#${MULLE_USER_PWD}/}\" needs a bump ($version)"
      fi
   fi
}


bump_extension()
{
   log_entry "bump_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         log_info "\"${extension#${MULLE_USER_PWD}/}\" is needlessly bumped"
      else
         log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
      return
   fi

   if [ "${version}" = "${project_version}" ]
   then
      if [ "${project_version}" = "${tag}" ]
      then
         fail "Project version is same as extension version. Bump it first."
      fi

      log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is already bumped"
      return
   fi

   redirect_append_exekutor "${version_file}" echo "${project_version}"
   log_info "\"${extension#${MULLE_USER_PWD}/}\" has been bumped"
}


unbump_extension()
{
   log_entry "unbump_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         redirect_exekutor "${version_file}" echo "${tag}"
         log_info "\"${extension#${MULLE_USER_PWD}/}\" has been unbumped"
      else
         log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
   fi

   log_verbose "\"${extension#${MULLE_USER_PWD}/}\" has changes"
}


common_main()
{
   log_entry "common_main" "$@"

   local cmd="$1"; shift

   local extension
   local version_file
   local version
   local changed

   for extension in "${extensions_dir}"/*
   do
      r_filepath_concat "${extension}" "version"
      version_file="${RVAL}"

      if rexekutor [ ! -f "${version_file}" ]
      then
         continue
      fi

      version="`rexekutor egrep -v '^#' "${version_file}" `"

      if rexekutor git diff --quiet -r "${tag}" -- "${extension}" ":(exclude)${version_file}"
      then
         changed='NO'
      else
         changed='YES'
      fi

      ${cmd}_extension "${extension}" \
                       "${changed}" \
                       "${version_file}" \
                       "${version}" \
                       "$@"
   done
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_TAG
   local OPTION_VENDOR

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --tag)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_TAG="$1"
         ;;

         --vendor)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_VENDOR="$1"
         ;;

         --version|--project-version)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_VERSION="$1"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="${1:-list}"
   [ $# -ne 0 ] && shift

   [ $# -ne 0 ] && usage "superflous parameters $*"

   local project_dir

   project_dir="`mulle-sde project-dir 2> /dev/null`"
   project_dir="${project_dir:-$PWD}"
   rexekutor cd "${project_dir}" || exit 1

   local vendor="${OPTION_VENDOR}"

   if [ -z "${vendor}" ]
   then
      vendor="`mulle-env environment get PROJECT_NAME 2> /dev/null`"
      if [ -z "${vendor}" ]
      then
         r_basename "${project_dir}"
         vendor="${RVAL}"
      fi
      vendor="${vendor%-developer}"
   fi

   [ -z "${vendor}" ] && internal_fail "Couldn't figure out vendor"

   local src

   src="`mulle-env environment get PROJECT_SOURCE_DIR  2> /dev/null`"
   src="${src:-src}"

   local extensions_dir

   r_filepath_concat "${src}" "${vendor}"
   extensions_dir="${RVAL}"

   if [ ! -d "${extensions_dir}" ]
   then
      # but its not a big problem
      log_verbose "Assumed extensions directory \"${extensions_dir}\" not present"
      return 2
   fi

   local tag="${OPTION_TAG}"

   if [ -z "${tag}" ]
   then
      tag="`rexekutor git tag -l --sort=-creatordate | egrep -x '[0-9]*\.[0-9]*\.[0-9]*' | head -1`"
      if [ -z "${tag}" ]
      then
         log_info "Project has never been tagged, so versions are probably OK"
         tag="HEAD"
      else
         log_verbose "Latest tag is ${C_RESET_BOLD}${tag}"
      fi
   fi

   local project_version="${OPTION_PROJECT_VERSION}"

   if [ -z "${project_version}" ]
   then
      project_version="`mulle-project-version -s`" || exit 1
   fi

   case "${cmd}" in
      help)
         usage
      ;;

      list|bump|unbump)
         common_main "${cmd}" "${extensions_dir}" "${tag}" "${project_version}"
      ;;

      ""|*)
         usage
      ;;
   esac
}


########
###
### INIT - You usually won't edit code below
###

trap_fail()
{
   exit 1
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   call_main "${BUMB_EXTENSION_VERSIONS_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main

###
### INIT
###
########
