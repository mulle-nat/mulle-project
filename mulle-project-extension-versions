#! /bin/sh

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_EXTENSION_VERSIONS_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"

if [ -z "${MULLE_PROJECT_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-project" "mulle-project-git.sh"
   MULLE_PROJECT_LIBEXEC_DIR="${RVAL}"
fi


print_flags()
{
   echo "   -f           : force operation"
   echo "   --vendor <v> : extension vendor name"
   echo "   --tag <t>    : tag to diff against"

   options_technical_flags_usage \
                "        : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   Figure out which extension versions need to be bumped, because they
   have changes from last commit.

Commands:
   bump   : set all extension versions to mulle-project-version, that need it
   unbump : reset all extension versions to last tag, that didn't need a bump
   list   : list all extension state

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


list_extension()
{
   log_entry "list_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         log_warning "\"${extension#${MULLE_USER_PWD}/}\" has been needlessly bumped"
      else
         log_info "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
      return
   fi

   if [ "${version}" = "${project_version}" ]
   then
      log_info "\"${extension#${MULLE_USER_PWD}/}\" has been bumped already"
   else
      log_warning "\"${extension#${MULLE_USER_PWD}/}\" needs a bump ($version)"
   fi
}


bump_extension()
{
   log_entry "bump_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         log_info "\"${extension#${MULLE_USER_PWD}/}\" was needlessly bumped"
      else
         log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
      return
   fi

   if [ "${version}" = "${project_version}" ]
   then
      if [ "${project_version}" = "${tag}" ]
      then
         fail "Project version is same as extension version. Bump it first."
      fi

      log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is already bumped"
      return
   fi

   redirect_exekutor "${version_file}" echo "${project_version}"
   log_info "\"${extension#${MULLE_USER_PWD}/}\" has been bumped"
}


unbump_extension()
{
   log_entry "unbump_extension" "$@"

   local extension="$1"
   local changed="$2"
   local version_file="$3"
   local version="$4"
   shift 4

   local extensions_dir="$1"
   local tag="$2"
   local project_version="$3"

   if [ "${changed}" = 'NO' ]
   then
      if [ "${version}" = "${project_version}" ]
      then
         exekutor git checkout "${tag}" -- "${version_file}" || exit 1
         log_info "\"${extension#${MULLE_USER_PWD}/}\" has been unbumped"
      else
         log_verbose "\"${extension#${MULLE_USER_PWD}/}\" is unchanged"
      fi
   fi

   log_verbose "\"${extension#${MULLE_USER_PWD}/}\" has changes"
}


common_main()
{
   log_entry "common_main" "$@"

   local cmd="$1"; shift

   local extension
   local version_file
   local version
   local changed


   .foreachfile extension in "${extensions_dir}"/*
   .do
      r_filepath_concat "${extension}" "version"
      version_file="${RVAL}"

      if rexekutor [ ! -f "${version_file}" ]
      then
         .continue
      fi

      version="`rexekutor egrep -v '^#' "${version_file}" | head -1`"
      log_verbose "Version of \"${extension}\" is ${C_RESET_BOLD}${version}${C_VERBOSE}."

      if rexekutor git diff --quiet -r "${tag}" -- "${extension}" ":(exclude)${version_file}"
      then
         changed='NO'
      else
         changed='YES'
      fi

      ${cmd}_extension "${extension}" \
                       "${changed}" \
                       "${version_file}" \
                       "${version}" \
                       "$@"
   .done
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_TAG
   local OPTION_VENDOR

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --tag)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_TAG="$1"
         ;;

         --vendor)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_VENDOR="$1"
         ;;

         --version|--project-version)
            [ $# -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            OPTION_VERSION="$1"
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd

   cmd="${1:-list}"
   [ $# -ne 0 ] && shift

   [ $# -ne 0 ] && usage "superflous parameters $*"

   local project_dir

   project_dir="`mulle-sde project-dir 2> /dev/null`"
   project_dir="${project_dir:-$PWD}"
   rexekutor cd "${project_dir}" || exit 1

   local vendor="${OPTION_VENDOR}"

   if [ -z "${vendor}" ]
   then
      vendor="`mulle-env environment get PROJECT_NAME 2> /dev/null`"
      if [ -z "${vendor}" ]
      then
         r_basename "${project_dir}"
         vendor="${RVAL}"
      fi
      vendor="${vendor%-developer}"
   fi

   [ -z "${vendor}" ] && _internal_fail "Couldn't figure out vendor"

   local src

   src="`mulle-env environment get PROJECT_SOURCE_DIR  2> /dev/null`"
   src="${src:-src}"

   local extensions_dir

   r_filepath_concat "${src}" "${vendor}"
   extensions_dir="${RVAL}"

   if [ ! -d "${extensions_dir}" ]
   then
      # but its not a big problem
      log_verbose "Assumed extensions directory \"${extensions_dir}\" not present"
      return 2
   fi

   local tag="${OPTION_TAG}"

   if [ -z "${tag}" ]
   then
      tag="`rexekutor git tag -l --sort=-creatordate | egrep -x '[0-9]*\.[0-9]*\.[0-9]*' | head -1`"
      if [ -z "${tag}" ]
      then
         log_info "Project has never been tagged, so versions are probably OK"
         tag="HEAD"
      else
         log_verbose "Latest tag is ${C_RESET_BOLD}${tag}"
      fi
   fi

   local project_version="${OPTION_PROJECT_VERSION}"

   if [ -z "${project_version}" ]
   then
      project_version="`mulle-project-version -s`" || exit 1
   fi

   case "${cmd}" in
      help)
         usage
      ;;

      list|bump|unbump)
         common_main "${cmd}" "${extensions_dir}" "${tag}" "${project_version}"
      ;;

      ""|*)
         usage
      ;;
   esac
}


call_with_flags "main" "${MULLE_PROJECT_EXTENSION_VERSIONS_FLAGS}" "$@"
